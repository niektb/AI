;------------------------Random Map ai for Age of Chivalry---------


;AI Scripters:


;--Herzog de Puce
;Well, some AI - like Wales - let's its armies march in close groups - which makes it
;vulnerable to archers and Mangonels, i know....but at least it arrives in one group.
;What I mean: I've experienced most AI-opponents that simply set the gathering-point
;somewhere in the enemy's city/base and continuously produce units. Of course, they would
;defend themselves (sometimes) if being stopped on their way, but once they reached the
;enemy, it's just as if i would set my units on agressive, march them one after another
;near the enemy and let them do whatever they like. => There is no order, no "discipline".

;I don't mind that they send them in as a swarm (like you said), but it's frustrating and
;becomes boring, if there's no real sense behind it: in the end, you just have single
;hostile units spread around an area. And this is especially idiotic when ythe enemy
;attacks with archers or Siege. They're easily slaughtered (even by infantry) - like i
;said: frustrating and, in my opinion, no real fun.

;It's also what makes this AI weak in defence: if you manage to block off the rush-attacks,
;you can form an attacking force, march into the enemy's city and the attacks on your
;homebase stop. Instead, the AI sets the gathering-point in the place where you troops are
;currently fighting. Which means: it does not gather them to form a unique force, but
;again just spams them unit-by-unit. So it's just a despairing try to defend itself


;EDIT! Added
;defconsts for goals

(defconst NO 0)
(defconst YES 1)
(defconst MAYBE 2)
(defconst NOTICE 3)	;used when a goal value should change

;end EDIT

(defconst male-hunter 122)
(defconst female-hunter 216)
(defconst male-forager 120)
(defconst female-forager 354)
(defconst male-shepherd 592)
(defconst female-shepherd 590)
(defconst male-farmer 214)
(defconst female-farmer 259)
(defconst ri-herbal-medicine 441)
(defconst ri-perfusion 457)
(defconst ri-anarchy 16)
(defconst unpacked-trebuchet 42)
(defconst elite-rax-huskarl 761)
(defconst ranged-units 900)
(defconst infantry-units 906)
(defconst cavalry-units 912)
(defconst siege-units 913)
(defconst religious-units 918)
(defconst cavalry-archer-units 936)
(defconst gunpowder-units 944)
(defconst warships 922)
(defconst tree 915)
(defconst gold-mine 66)
(defconst stone-mine 102)
(defconst shore-fish 933)
(defconst sea-fish 905)
(defconst relic 942)
(defconst domestic-animal 958)
(defconst sheep 594)
(defconst turkey 833)
(defconst military-superiority 215)

 ;EDIT! added
(defconst sn-score-superiority 205)
(defconst sn-current-age 138)
	(defconst 12-century 0)
	(defconst to-13-century 1)
	(defconst 13-century 2)
	(defconst to-14-century 3)
	(defconst 14-century 4)
	(defconst to-15-century 5)
	(defconst 15-century 6)

(defconst dark-villager-count 42)
(defconst feudal-villager-count 60)
(defconst dead-male-lumberjack 228)
(defconst dead-female-lumberjack 219)
(defconst dead-monk 134)
(defconst male-gold-miner 579)
(defconst female-gold-miner 581)
(defconst male-stone-miner 124)
(defconst female-stone-miner 220)

;end EDIT

;Buildings
(defconst guild-hall 110)
(defconst assembly-hall 110)
(defconst princely-court 689)

;PD
;(defconst ri-luxembourgs 529) ;EDIT! - I replaced these 4 defconsts below
;(defconst ri-hussites 537)
;(defconst ri-taborite 579)
;(defconst ri-utraquists 580)
(defconst ostsiedlung 520)
(defconst union-of-krewo 521)

;UT
(defconst ius-teutonicum 445)
(defconst cuirass 9)
(defconst to-armour 366)
(defconst to-attack 368)

;New Techs
(defconst ri-crossbow-companies 587)
(defconst ri-ordonnance-companies 473)
(defconst bo-halberd 627)
(defconst roman-law-court 610)
(defconst representation-court 611)
(defconst fourth-estate-court 612)
(defconst roman-law-hall 613)
(defconst representation-hall 614)
(defconst fourth-estate-hall 615)
(defconst roman-law-he 616)
(defconst representation-he 617)
(defconst fourth-estate-he 618)
(defconst city-rights-hall 620)
(defconst city-councils-hall 621)
(defconst storehouses-hall 622)
(defconst city-rights-court 623)
(defconst city-councils-court 624)
(defconst storehouses-court 625)
(defconst popular-assembly 626)

;====EDIT!!! Added defconsts for other techs

;Policy Decisions

(defconst au-romzug 534)		;trooper att, spear HP, Imperial Knight, priest conversion
(defconst au-hausmacht 532)		;castle HP, lancer HP, Cuman Auxilary
(defconst ba-romzug 535)		;trooper att, spear HP, Imperial Knight, priest conversion
(defconst ba-hausmacht 533)		;castle HP, lancer HP, Rhenish Knight
(defconst bo-luxembourg-dynasty 529)	;Imperial Knight, hero, Royal Knight, techs
(defconst bo-hussite-beliefs 537)	;War Wagon, Arbalester, Halberd Militia, techs, PDs
(defconst bo-taborite-sect 579)		;Heavy Cav att, Royal Knight, techs
(defconst bo-utraquist-sect 580)	;arch att, spear HP, disable knight, bracer, heresy free
(defconst br-english-alliance 523)	;herwr HP & arm, Mercenary Longbowman
(defconst br-francisation 518)		;trading fee 10%, knights att, Genoese Crossbowman
(defconst bu-flemish-relations 524)	;Flemish Infantry, merchant speed, trading fee 10%
(defconst bu-english-alliance 517)	;Mercenary Longbowman, Merchant Barque speed
(defconst de-kalmar-union 539)		;gold gather speed, castle HP
(defconst de-baltic-crusades 536)	;foot knight att, conversion resistance, priest conversion
(defconst en-combined-arms 542)		;Longbow research, militia att
(defconst en-nobility 541)		;Royal Knight, knightly units att, castles cheaper
(defconst fl-three-members-of-flanders 527)	;disable knights, spear att & HP
(defconst fl-chamber-of-the-council 525);militia -HP, knights att
(defconst fra-communes 544)		;militia & spear HP
(defconst fra-papal-protector 543)	;conversion resistance, wall HP, allow Eternal Peace (enable Swiss Pikemen), priest conversion
(defconst fri-vetkopers 475)		;militia -HP, foot knight att, Ruiter
(defconst fri-schieringers 474)		;disable knights, militia att & HP, allow Frisian Liberty (overvaller att)
(defconst ge-ghibellini 528)		;spear HP
(defconst ge-guelfi 526)		;disable knights, light cav HP & speed
(defconst gu-rhenish-league 540)	;gold gather speed, castle HP
(defconst gu-baltic-crusades 538)	;foot knight att, conversion resistance, priest conversion
(defconst he-communal-democracy 476)	;militia lancer att, skirmishers no minimum range
(defconst he-noble-rule 477)		;foot knight att, trooper HP
(defconst po-ostsiedlung 520)		;pikeman, footman, both mounted crossbowmen, mounted cranequinier att
(defconst po-union-of-krewo 521)	;bajoras
(defconst sav-imperial-vicariate 522)	;lancer att & arm, foot knight
(defconst sav-statuta-sabaudiate 519)	;trading fee 10%, militia att & HP
(defconst sax-kurfurst 531)		;militia -HP, knightly units att
(defconst sax-hanseatic-league 530)	;disable knights, militia att & HP, merchant units faster, likedeler
(defconst sax-teutonic-order 590)	;new Order units & techs, priest conversion
(defconst sc-normanisation 547)		;knight att & HP & cheaper, Cliarthaire more expensive, enables Auld Alliance (knightly cav HP), techs
(defconst sc-gaelicisation 548)		;hobelar armor, highland barracks cheaper, enable Claidheamh Biorach, Hobigiuirs, disable Chivalric Order
(defconst wa-independence 546)		;teulu HP, saethwyr cheaper
(defconst wa-english-vassal 545)	;knights HP, enable stone walls

;Princely Court techs

(defconst pc-chivalric-order 464)
(defconst pc-close-order-drill 465)
(defconst pc-swordsmanship 466)
(defconst pc-bow-practise 467)
(defconst pc-court-clergy 468)

;Guild Hall techs

(defconst ba-bow-practise 489)
(defconst ba-close-order-drill 499)
(defconst ba-militia-guilds 504)
(defconst fl-bow-practise 487)
(defconst fl-close-order-drill 497)
(defconst fl-militia-guilds 502)
(defconst ge-bow-practise 491)
(defconst ge-close-order-drill 501)
(defconst ge-militia-guilds 506)
(defconst sax/to-bow-practise 488)
(defconst sax-militia-guilds 503)
(defconst sax/to-chivalric-order 603)
(defconst to-swordsmanship 604)

;Assembly Hall techs

(defconst fri-bow-practise 492)
(defconst fri-swordsmanship 495)
(defconst fri-minor-nobility 508)
(defconst he-bow-practise 493)
(defconst he-swordsmanship 496)
(defconst he-minor-nobility 509)
(defconst wa-bow-practise 486)
(defconst wa-swordsmanship 494)
(defconst wa-minor-nobility 507)

;Other techs

(defconst ri-border-forts 462)
(defconst ri-pavises 581)
(defconst ri-likedeler 572)
(defconst ri-mercenaries 554)
(defconst ri-arras 370) 		;same as ri-elite-woad-raider
(defconst bo-bracer 582)
(defconst bo-arbalest 574)
(defconst bo-heresy 583)
(defconst bo-bloodlines 584)
(defconst bo-iron-casting 585)
(defconst bo-pike-drill 573)
(defconst bo-foot-knight 586)
(defconst bo-slechtic 609)
(defconst de-ordonnance-companies 565)
(defconst en-english-longbowmen 460)
(defconst en-billman 606)
(defconst fl-pike-drill 568)
(defconst fra-foot-knight 570)
(defconst fra-eternal-peace 83)
(defconst fra-auld-alliance 470)
(defconst fra-order-of-the-fleur-de-lys 471)
(defconst fri-pikeman 512)
(defconst fri-elite-skirmisher 515)
(defconst fri-frisian-liberty 461)
(defconst ge-arbalest 575)
(defconst ge-mercenary-longbowman 560)
(defconst he-pikeman 513)
(defconst he-elite-skirmisher 516)
(defconst he-pike-drill 567)
(defconst sc-light-cavalry 549)
(defconst sc-tracking 551)
(defconst sc-husbandry 552)
(defconst sc-claidheim-biorach 469)
(defconst sc-hobelar 550)
(defconst sc-auld-alliance 559)
(defconst sc-pike-drill 566)
(defconst wa-pikeman 511)
(defconst wa-elite-skirmisher 514)
(defconst wa-longbow 3) ;my-unique-research can be used instead
(defconst to-murder-holes 592)
(defconst to-fortified-wall 597)
(defconst to-cistercian-reform 366) ;Order Knights armor
(defconst to-imperial-privilege 368) ;Order Knights attack
(defconst to-alchemy 593)
(defconst to-treadmill-crane 594)

;end EDIT

;New units

(defconst lett-auxiliary 5)
(defconst riga-militia 25)
(defconst new-cavalier 166)
(defconst scots-guard 232)
(defconst liv-auxiliary 282)
(defconst tarasnice 542)
(defconst new-paladin 847)
(defconst handgunner 870)
(defconst szlachcic 877)
(defconst ritterbruder 878)
(defconst halbruder 879)
(defconst new-man-at-arms 880)
(defconst foot-knight 881)
(defconst bajoras 882)
(defconst rhenish-knight 883)
(defconst mercenary-longbow 884)
(defconst reichsritter 885)
(defconst flemish-infantry 886)
(defconst swiss-pike 887)
(defconst italian-infantry 888)
(defconst carroccio 206)
(defconst beguine 889)
(defconst sa-foot-knight 569)

; Goals
(defconst attack-goal 1)
(defconst save-resource-goal 2)
(defconst control-goal 3)
(defconst military-superiority-goal 4)
(defconst enemy-has-archers 5)
(defconst enemy-has-infantry 6)
(defconst enemy-has-cavalry 7)
(defconst under-attack-goal 8)
(defconst tsa-type-goal 9) ;EDIT! changed to tsa-type-goal
(defconst strategy-goal 10)
(defconst train-military-goal 11)
(defconst train-civilian-goal 12)
(defconst wall 13)
	(defconst DONT-BUILD-WALL 1)
	(defconst BUILD-WALL 2)
(defconst water-map 34)

;Added goals
(defconst unit-upgrades-complete-goal 14)
(defconst attack-type-goal 15)
	(defconst NORMAL 0)
	(defconst TSA 1)
(defconst TSA-detected-goal 16)
	(defconst not-detected 0)
	(defconst detected 1)
(defconst attack-status-goal 17)
(defconst tsa-attack-status-goal 18)
(defconst resign-goal 19)
;(defconst sheep-goal 20)			;NOT USED
(defconst escrow-goal 21)
(defconst aggressive-goal 22)
	(defconst defensive 0)
	(defconst aggressive 1)
(defconst delay-attack-goal 23)
	;0 = don't delay
	;3 = NOTICE
	(defconst ask 4)
	(defconst fifteenth-century-self 5)
	(defconst fifteenth-century-all 6)	;NOT USED
(defconst priest-goal 24)
	;0 = don't use priests
	(defconst for-relics 1)
	(defconst for-healing 2)
	(defconst for-converting 4)
(defconst army-type-goal 25)
	;0 = normal
	(defconst late-game 1)
	(defconst counter-herwr 2)		;NOT USED
	(defconst counter-kriichsman 3)	;NOT USED
(defconst extra-goal 40)
	;0 = no
	;1 = yes
	;3 = NOTICE

;Added timers
(defconst tsa-timer 1)
(defconst attack-timer 2)
	(defconst attack-timer-interval 60)
	(defconst first-attack-interval 300)
(defconst resign-timer 3)
	(defconst resign-interval 10)
(defconst delay-attack-timer 4)
(defconst retreat-lumber-camp-timer 5)

;end goals

;Set initial goal values

(defrule
(true)
=>
(set-goal attack-goal 0)
(set-goal attack-type-goal TSA)
(set-goal TSA-detected-goal not-detected)
(set-goal attack-status-goal 0)
(set-goal tsa-attack-status-goal 0)
(set-goal escrow-goal 0)
(set-goal army-type-goal 0)
(set-goal water-map NOTICE)
(chat-to-player my-player-number "Initial Settings: TSA.")
(disable-self)
)

;Goal: agressive-goal (Goal 22)

(defrule
(not	(player-in-game 3))
(difficulty <= moderate)
(game-time < 90)
=>
(set-goal aggressive-goal aggressive)
(chat-to-player my-player-number "We're facing a tough opponent.")
(chat-to-player my-player-number "Play aggressive!")
(disable-self)
)

;13th century

(defrule
(goal aggressive-goal aggressive)
(current-age == feudal-age)
(goal tsa-attack-status-goal 1)
(unit-type-count villager >= feudal-villager-count)
(military-population >= 25)
=>
(set-goal aggressive-goal defensive)
(chat-to-player my-player-number "Attack is going well.")
(chat-to-player my-player-number "Keep attacking but save resources.")
(disable-self)
)

(defrule
(goal aggressive-goal aggressive)
(current-age >= feudal-age)
(goal tsa-attack-status-goal 2)
(military-population > 16)
(goal attack-goal 0)
=>
(set-goal aggressive-goal defensive)
(chat-to-player my-player-number "Previous attack failed, but we have")
(chat-to-player my-player-number "rebuilt our army. Save resources.")
(disable-self)
)

;14th century

(defrule
(goal aggressive-goal defensive)
(or	(current-age == imperial-age)
	(and	(current-age == castle-age)
		(players-current-age every-enemy < imperial-age)))
(strategic-number sn-score-superiority >= 1)
(military-population >= 25)
(or	(goal unit-upgrades-complete-goal 1)
	(strategic-number sn-score-superiority >= 2))
(difficulty <= moderate)
=>
(set-goal aggressive-goal aggressive)
(chat-to-player my-player-number "We have the advantage. Play aggressively!")
)

(defrule
(goal aggressive-goal aggressive)
(current-age >= castle-age)
(or	(strategic-number sn-score-superiority < 0)
	(or	(military-population < 25)
		(and	(current-age == castle-age)
			(or	(players-current-age any-computer == imperial-age)
				(players-current-age any-human == imperial-age)))))
(strategic-number military-superiority >= 0)
=>
(set-goal aggressive-goal defensive)
(chat-to-player my-player-number "We need to start playing defensively.")
)

(defrule
(strategic-number sn-score-superiority == -2)
(goal aggressive-goal aggressive)
=>
(set-goal aggressive-goal defensive)
(chat-to-player my-player-number "Opponent has the advantage. Play Defensively")
)

;Goal: attack-type-goal (Goal 17)

(defrule
(goal aggressive-goal defensive)
=>
(generate-random-number 100)
(disable-self)
)

(defrule
(goal aggressive-goal defensive)
(random-number > 0)
(random-number <= 50)
(unit-type-count rhenish-knight < 3)
=>
(set-goal attack-type-goal TSA)
(chat-to-player my-player-number "Let's use TSA.")
(disable-self)
)

(defrule
(goal aggressive-goal defensive)
(or	(and	(random-number > 50)
		(random-number <= 100))
	(unit-type-count rhenish-knight < 3))
=>
(set-goal attack-type-goal NORMAL)
(chat-to-player my-player-number "Let's use attack groups.")
(disable-self)
)

(defrule
(or	(unit-type-count cavalry-archer-line > 2)		;mounted crossbowmen/cranequiniers
	(or	(unit-type-count chu-ko-nu-line > 2)		;cuman/mongol auxilaries
		(unit-type-count conquistador-line > 2)))	;routiers/ecorcheurs
(players-building-type-count any-enemy castle >= 2)
(players-building-type-count any-enemy stone-wall-line > 0)
(players-building-type-count any-enemy palisade-wall > 0)
(goal attack-type-goal TSA)
=>
(set-goal attack-type-goal NORMAL)
(chat-to-player my-player-number "Cavalry Archers attack castles better")
(chat-to-player my-player-number "in attack groups. Use attack groups.")
)

(defrule
(or	(unit-type-count cavalry-archer-line > 2)		;mounted crossbowmen/cranequiniers
	(or	(unit-type-count chu-ko-nu-line > 2)		;cuman/mongol auxilaries
		(unit-type-count conquistador-line > 2)))	;routiers/ecorcheurs
(players-building-type-count every-enemy castle < 2)
(unit-type-count rhenish-knight < 3)
(goal attack-type-goal NORMAL)
=>
(set-goal attack-type-goal TSA)
(chat-to-player my-player-number "Cavalry Archers attack soldiers better")
(chat-to-player my-player-number "with TSA. Use TSA!")
)

(defrule
(or	(players-building-type-count any-enemy stone-wall-line > 0)
	(players-building-type-count any-enemy palisade-wall > 0))
(goal attack-type-goal NORMAL)
=>
(set-goal attack-type-goal TSA)
(chat-to-player my-player-number "Use TSA to attack walls!")
)

;Goal: sheep-goal (Goal 20)

;For some reason, the AI will not use trained sheep unless they are deleted by the AI code.
;EDIT: Just realized that sheep can't be deleted.

;(defrule
;(goal sheep-goal 1)
;(unit-type-count sheep >= 1)
;=>
;(delete-unit sheep)
;(set-goal sheep-goal 0)
;)

;Goal: delay-attack-goal (Goal 23)

(defrule
(true)
=>
(set-goal delay-attack-goal 0)
(disable-self)
)

;Only one AI should ask if the human player wants to delay attacks.

;if player 1
(defrule
;(players-stance any-human enemy)
(player-number 1)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 2
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(player-number 2)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 3
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(not	(player-computer 2))
(player-number 3)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 4
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(not	(player-computer 2))
(not	(player-computer 3))
(player-number 4)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 5
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(not	(player-computer 2))
(not	(player-computer 3))
(not	(player-computer 4))
(player-number 5)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 6
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(not	(player-computer 2))
(not	(player-computer 3))
(not	(player-computer 4))
(not	(player-computer 5))
(player-number 6)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 7
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(not	(player-computer 2))
(not	(player-computer 3))
(not	(player-computer 4))
(not	(player-computer 5))
(not	(player-computer 6))
(player-number 7)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;if player 8
(defrule
;(players-stance any-human enemy)
(not	(player-computer 1))
(not	(player-computer 2))
(not	(player-computer 3))
(not	(player-computer 4))
(player-number 8)
=>
(set-goal delay-attack-goal NOTICE)
(disable-self)
)

(defrule
;(players-stance any-human enemy)
(goal delay-attack-goal NOTICE)
(not	(player-computer 5))
(not	(player-computer 6))
(not	(player-computer 7))
(player-number 8)
=>
(set-goal delay-attack-goal ask)
(disable-self)
)

;Ask human player if they want to delay attacks

(defrule
(game-time > 30)
(goal delay-attack-goal ask)
(players-stance any-human ally)
(starting-age <= feudal-age)
=>
(chat-to-player every-human "I like to attack our opponents early, but perhaps you would enjoy a peaceful")
(chat-to-player every-human "game. I can tell our enemies to delay their attacks as long as we delay ours.")
(disable-self)
)

(defrule
(game-time > 30)
(goal delay-attack-goal ask)
(players-stance any-human enemy)
(starting-age <= feudal-age)
=>
(chat-to-player every-human "I enjoy a fast, aggressive game, but I will")
(chat-to-player every-human "agree to delay my attacks if you do likewise.")
(disable-self)
)

(defrule
(game-time > 37)
(goal delay-attack-goal ask)
(starting-age <= feudal-age)
=>
(chat-to-player every-human "If you want players to wait until they reach")
(chat-to-player every-human "the 15th century before they attack, taunt 101 to me.")
(disable-timer delay-attack-timer)
(enable-timer delay-attack-timer 60)
(disable-self)
)

(defrule
(timer-triggered delay-attack-timer)
(goal delay-attack-goal ask)
=>
(set-goal delay-attack-goal 0)
(disable-timer delay-attack-timer)
(chat-to-player my-player-number "Attack like normal")
(chat-to-enemies "Agreed then. No attack delays.")
(disable-self)
)

(defrule
(taunt-detected any-human 101)
(goal delay-attack-goal ask)
(or	(stance-toward any-computer ally)
	(stance-toward any-computer enemy))
=>
(acknowledge-taunt any-human 101)
(chat-to-player every-human "Okay, I will wait until the 15th century to attack.")
(chat-to-player every-human "Sending word to the other computer players...")
(chat-to-player every-computer "102 Wait until you are in the 15th century to attack.")
(disable-timer delay-attack-timer)
(enable-timer delay-attack-timer 10)
(set-goal delay-attack-goal fifteenth-century-self)
(disable-self)
)

(defrule
(taunt-detected any-human 101)
(goal delay-attack-goal ask)
(nor	(stance-toward any-computer ally)
	(stance-toward any-computer enemy))
=>
(acknowledge-taunt any-human 101)
(chat-to-player every-human "Okay, I will wait until the 15th century to attack.")
(disable-timer delay-attack-timer)
(enable-timer delay-attack-timer 10)
(set-goal delay-attack-goal fifteenth-century-self)
(disable-self)
)

(defrule
(timer-triggered delay-attack-timer)
(goal delay-attack-goal fifteenth-century-self)
(or	(stance-toward any-computer ally)
	(stance-toward any-computer enemy))
=>
(chat-to-player every-human "All the computer players have received the message.")
(chat-to-player every-human "They have agreed to delay their attacks.")
(disable-timer delay-attack-timer)
(disable-self)
)

(defrule
(taunt-detected any-computer 102)
=>
(chat-to-player this-any-computer "Very well, I shall delay my attacks")
(set-goal delay-attack-goal fifteenth-century-self)
(disable-self)
)

(defrule
(goal delay-attack-goal fifteenth-century-self)
(current-age == imperial-age)
(current-age-time > 15)
(goal unit-upgrades-complete-goal 1)
=>
(set-goal delay-attack-goal 0)
(chat-to-player my-player-number "The attack delay is over!")
(disable-self)
)

(defrule
(game-time > 300)
(or	(goal delay-attack-goal fifteenth-century-self)
	(goal delay-attack-goal fifteenth-century-all))
(town-under-attack)
=>
(disable-timer delay-attack-timer)
(enable-timer delay-attack-timer 30)
(disable-self)
)

(defrule
(game-time > 300)
(timer-triggered delay-attack-timer)
(or	(goal delay-attack-goal fifteenth-century-self)
	(goal delay-attack-goal fifteenth-century-all))
(town-under-attack)
(players-current-age every-human < imperial-age)
(players-current-age every-computer < imperial-age)
(current-age < imperial-age)
=>
(set-goal delay-attack-goal 10)
(chat-to-enemies "My town has been attacked!")
(chat-to-enemies "We were supposed to delay our attacks!")
(chat-to-enemies "I will not delay my attacks anymore.")
(disable-self)
)

(defrule
(not	(player-in-game any-human))
(not	(goal delay-attack-goal 0))
=>
(set-goal delay-attack-goal 0)
)

(defrule
(goal delay-attack-goal 10)
=>
(cc-add-resource wood 2000)
(cc-add-resource food 2000)
(cc-add-resource gold 2000)
(cc-add-resource stone 2000)
(set-goal delay-attack-goal 0)
(disable-self)
)

;Goal: priest-goal (Goal 24)

(defrule
(current-age == dark-age)
=>
(set-goal priest-goal 0)
(disable-self)
)

(defrule
(or	(civ-selected turkish)	;Genoa (has Carroccio)
	(civ-selected gothic))	;Flanders (has Beguine)
(current-age == feudal-age)
(goal aggressive-goal aggressive)
(not	(goal priest-goal for-healing))
=>
(set-goal priest-goal for-healing)
)

(defrule
(or	(research-completed au-romzug)
	(or	(research-completed ba-romzug)
		(or	(civ-selected korean)
			(research-completed de-baltic-crusades))))
(current-age >= castle-age)
(players-unit-type-count every-enemy scout-cavalry-line < 12)
(not	(goal priest-goal for-converting))
=>
(set-goal priest-goal for-converting)
)

(defrule
(or	(research-completed fra-papal-protector)
	(or	(research-completed gu-baltic-crusades)
		(research-completed sax-teutonic-order)))
(current-age >= castle-age)
(players-unit-type-count every-enemy scout-cavalry-line < 12)
(not	(goal priest-goal for-converting))
=>
(set-goal priest-goal for-converting)
)

(defrule
(not	(goal priest-goal for-converting))
(current-age == castle-age)
(current-age-time < 1800)
(not	(goal priest-goal for-relics))
=>
(set-goal priest-goal for-relics)
)

(defrule
(not	(goal priest-goal for-converting))
(not	(goal priest-goal for-healing))
(building-type-count monastery > 0)
(current-age == castle-age)
(or	(research-available ri-sanctity)
	(research-completed ri-sanctity))
=>
(set-goal priest-goal for-healing)
)

(defrule
(not	(goal priest-goal for-converting))
(not	(goal priest-goal 0))
(building-type-count monastery > 0)
(not	(research-available ri-sanctity))
(not	(research-completed ri-sanctity))
(current-age-time > 1800)
=>
(set-goal priest-goal 0)
)

(defrule
(not	(goal priest-goal 0))
(current-age >= castle-age)
(players-unit-type-count any-enemy scout-cavalry-line >= 12)
(current-age-time > 1800)
=>
(set-goal priest-goal 0)
)

;Army Type Goal (Goal 25)

(defrule
(game-time > 4500)	;1 hour 15 minutes
(cc-players-unit-type-count 0 66 < 10)
(gold-amount < 800)
=>
(set-goal army-type-goal late-game)
(disable-self)
)

(defrule
(not	(goal army-type-goal late-game))
(not	(goal army-type-goal counter-herwr))
(players-unit-type-count any-enemy tarkan-line > 10)
(current-age >= castle-age)
=>
(set-goal army-type-goal counter-herwr)
)

(defrule
(goal army-type-goal counter-herwr)
(players-unit-type-count every-enemy tarkan-line <= 10)
(current-age >= castle-age)
=>
(set-goal army-type-goal 0)
)

(defrule
(not	(goal army-type-goal late-game))
(not	(goal army-type-goal counter-kriichsman))
(players-unit-type-count any-enemy berserk-line > 10)
(current-age >= castle-age)
=>
(set-goal army-type-goal counter-kriichsman)
)

(defrule
(goal army-type-goal counter-kriichsman)
(players-unit-type-count every-enemy berserk-line <= 10)
(current-age >= castle-age)
=>
(set-goal army-type-goal 0)
)

;Strategic Number: sn-current-age (SN ID 138)

(defrule
(current-age == dark-age)
=>
(set-strategic-number sn-current-age 12-century)
(disable-self)
)

(defrule
(current-age == dark-age)
=>
(set-strategic-number sn-current-age 13-century)
(disable-self)
)

(defrule
(current-age == dark-age)
=>
(set-strategic-number sn-current-age 14-century)
(disable-self)
)

(defrule
(current-age == dark-age)
=>
(set-strategic-number sn-current-age 15-century)
(disable-self)
)

;------------------variables------------------

#load-if-defined POPULATION-CAP-200
(defconst villager-pop 100)
(defconst villager-pop-watermap 75)
(defconst full-pop 200)
(defconst three-quarters-pop 150)
(defconst half-pop 100)
(defconst quarter-pop 50)
(defconst large-pop 30)
(defconst medium-pop 20)
(defconst small-pop 10)
(defconst tiny-pop 5)
(defconst miniscule-pop 3)
#end-if
#load-if-defined POPULATION-CAP-175
(defconst villager-pop 88)
(defconst villager-pop-watermap 66)
(defconst three-quarters-pop 131)
(defconst full-pop 175)
(defconst half-pop 88)
(defconst quarter-pop 44)
(defconst large-pop 26)
(defconst medium-pop 17)
(defconst small-pop 8)
(defconst tiny-pop 4)
(defconst miniscule-pop 2)
#end-if
#load-if-defined POPULATION-CAP-150
(defconst villager-pop 75)
(defconst villager-pop-watermap 57)
(defconst full-pop 150)
(defconst three-quarters-pop 113)
(defconst half-pop 75)
(defconst quarter-pop 38)
(defconst large-pop 22)
(defconst medium-pop 15)
(defconst small-pop 7)
(defconst tiny-pop 4)
(defconst miniscule-pop 2)
#end-if
#load-if-defined POPULATION-CAP-125
(defconst villager-pop 62)
(defconst villager-pop-watermap 47)
(defconst full-pop 125)
(defconst three-quarters-pop 94)
(defconst half-pop 63)
(defconst quarter-pop 31)
(defconst large-pop 19)
(defconst medium-pop 12)
(defconst small-pop 6)
(defconst tiny-pop 3)
(defconst miniscule-pop 2)
#end-if
#load-if-defined POPULATION-CAP-100
(defconst villager-pop 50)
(defconst villager-pop-watermap 38)
(defconst full-pop 100)
(defconst three-quarters-pop 75)
(defconst half-pop 50)
(defconst quarter-pop 25)
(defconst large-pop 15)
(defconst medium-pop 10)
(defconst small-pop 5)
(defconst tiny-pop 2)
(defconst miniscule-pop 1)
#end-if
#load-if-defined POPULATION-CAP-75
(defconst villager-pop 37)
(defconst villager-pop-watermap 28)
(defconst full-pop 75)
(defconst three-quarters-pop 56)
(defconst half-pop 38)
(defconst quarter-pop 19)
(defconst large-pop 11)
(defconst medium-pop 7)
(defconst small-pop 4)
(defconst tiny-pop 2)
(defconst miniscule-pop 1)
#end-if

;EDIT! add a defconst according to each civilization on how many towers to build

#load-if-defined MONGOL-CIV
(defconst low-tower-count 1)
(defconst high-tower-count 3)
(defconst bombard-tower-count 0)
#end-if
#load-if-defined CHINESE-CIV
(defconst low-tower-count 3)
(defconst high-tower-count 6)
(defconst bombard-tower-count 3)
#end-if
#load-if-defined KOREAN-CIV
(defconst low-tower-count 5)
(defconst high-tower-count 10)
(defconst bombard-tower-count 5)
#end-if
#load-if-defined HUN-CIV
(defconst low-tower-count 0)
(defconst high-tower-count 1)
(defconst bombard-tower-count 0)
#end-if
#load-if-not-defined MONGOL-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined HUN-CIV
(defconst low-tower-count 1)
(defconst high-tower-count 3)
(defconst bombard-tower-count 0)
#end-if
#end-if
#end-if
#end-if

;---------------------------------------------

;EDIT! Added
(defrule
(building-type-count town-center < 1)
(can-build town-center)
=>
(build town-center)
)

;end EDIT
(defrule
(building-type-count-total castle >= 1)
(building-type-count guild-hall < 1)
(can-build guild-hall)
=>
(build guild-hall)

)
(defrule
(not(starting-age == post-imperial-age))
(current-age >= castle-age)
(building-type-count-total castle >= 1)
(building-type-count princely-court < 1)
(can-build princely-court)
=>
(build princely-court)

)
;-----------------------------------------

;Starting Strategic Numbers:

;exploration
(defrule
(true)
=>
(set-strategic-number sn-blot-exploration-map 1) 			
(set-strategic-number sn-number-explore-groups 1)
(set-strategic-number sn-total-number-explorers 6)
(set-strategic-number sn-initial-exploration-required 0); The %age required to start buildings
(set-strategic-number sn-random-placement-factor 100)
(disable-self)
)

(defrule
(building-type-count town-center >= 1)
(or(building-type-count-total mill >= 1)
(or(game-time >= 30)
(or(unit-type-count-total turkey >= 4)
(unit-type-count-total sheep >= 4)))) ; a minimum number of sheep or Turkey to start the gatherering
=>
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-food-gatherer-percentage 100)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(disable-self)
)

(defrule
(true)
=>
(set-strategic-number sn-maximum-food-drop-distance 12)
(set-strategic-number sn-maximum-wood-drop-distance 12)
(set-strategic-number sn-maximum-gold-drop-distance 12)
(set-strategic-number sn-maximum-stone-drop-distance 12)
(set-strategic-number sn-maximum-hunt-drop-distance 25)
(disable-self)
)

(defrule
(not (goal water-map 0))
(wood-amount >= 500)
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
=>
(set-strategic-number sn-number-forward-builders 10)
)

(defrule
(goal water-map 0)
(goal attack-type-goal NORMAL)
=>
(set-strategic-number sn-minimum-attack-group-size 4) ;EDIT! Changed to allow formations, not mobs
(set-strategic-number sn-maximum-attack-group-size 8)
(set-strategic-number sn-number-defend-groups 0)
)

(defrule
(goal water-map 0)
(goal attack-type-goal TSA)
=>
(set-strategic-number sn-minimum-defend-group-size 1) ;EDIT! Changed to allow formations, not mobs
(set-strategic-number sn-maximum-defend-group-size 1)
(set-strategic-number sn-number-defend-groups 200)
(set-strategic-number sn-gather-defense-units 0)
)

(defrule
(not (goal water-map 0))
=>
(set-strategic-number sn-minimum-attack-group-size 12)
(set-strategic-number sn-maximum-attack-group-size 25)
(set-strategic-number sn-minimum-boat-attack-group-size 1)
(set-strategic-number sn-maximum-boat-attack-group-size 1)
(disable-self)
)


(defrule
(true)
=>
(set-strategic-number sn-task-ungrouped-soldiers 0)
(set-strategic-number sn-number-attack-groups 0)
(set-strategic-number sn-number-boat-attack-groups 0)
(set-strategic-number sn-enemy-sighted-response-distance 10)
(set-strategic-number sn-percent-enemy-sighted-response 90)
(set-strategic-number sn-scale-minimum-attack-group-size 0);needed cause default is 1
;(set-strategic-number sn-scale-maximum-attack-group-size 0);default is 0 so not needed
(set-difficulty-parameter ability-to-dodge-missiles 0)
(set-difficulty-parameter ability-to-maintain-distance 0)
(disable-self)
)

;EDIT! - Add some more strategic numbers

(defrule
(difficulty <= hard) ;Hard and Hardest difficulties
=>
(set-strategic-number sn-attack-winning-player 1)
(set-strategic-number sn-attack-winning-player-factor -100)
(set-strategic-number sn-food-dropsite-distance 3)
(set-strategic-number sn-wood-dropsite-distance 3)
(set-strategic-number sn-stone-dropsite-distance 3)
(set-strategic-number sn-gold-dropsite-distance 3)
(set-strategic-number sn-group-form-distance 4)
(set-strategic-number sn-percent-attack-soldiers 100)
(set-strategic-number sn-minimum-attack-group-size 4)
(set-strategic-number sn-maximum-attack-group-size 8)
(set-strategic-number sn-town-defend-priority 1)
(disable-self)
)

(defrule
(difficulty == moderate)
=>
(set-strategic-number sn-attack-winning-player 1)
(set-strategic-number sn-attack-winning-player-factor -100)
(set-strategic-number sn-food-dropsite-distance 3)
(set-strategic-number sn-wood-dropsite-distance 3)
(set-strategic-number sn-stone-dropsite-distance 3)
(set-strategic-number sn-gold-dropsite-distance 3)
(set-strategic-number sn-group-form-distance 4)
(set-strategic-number sn-percent-attack-soldiers 80)
(set-strategic-number sn-minimum-attack-group-size 4)
(set-strategic-number sn-maximum-attack-group-size 8)
(set-strategic-number sn-town-defend-priority 1)
(disable-self)
)

(defrule
(difficulty == easy)
=>
(set-strategic-number sn-attack-winning-player 1)
(set-strategic-number sn-attack-winning-player-factor 100)
(set-strategic-number sn-food-dropsite-distance 3)
(set-strategic-number sn-wood-dropsite-distance 3)
(set-strategic-number sn-stone-dropsite-distance 3)
(set-strategic-number sn-gold-dropsite-distance 3)
(set-strategic-number sn-group-form-distance 4)
(set-strategic-number sn-percent-attack-soldiers 60)
(set-strategic-number sn-minimum-attack-group-size 4)
(set-strategic-number sn-maximum-attack-group-size 8)
(set-strategic-number sn-town-defend-priority 1)
(disable-self)
)

(defrule
(difficulty == easiest)
=>
(set-strategic-number sn-attack-winning-player 1)
(set-strategic-number sn-attack-winning-player-factor 100)
(set-strategic-number sn-food-dropsite-distance 3)
(set-strategic-number sn-wood-dropsite-distance 3)
(set-strategic-number sn-stone-dropsite-distance 3)
(set-strategic-number sn-gold-dropsite-distance 3)
(set-strategic-number sn-group-form-distance 5)
(set-strategic-number sn-percent-attack-soldiers 40)
(set-strategic-number sn-minimum-attack-group-size 6)
(set-strategic-number sn-maximum-attack-group-size 12)
(set-strategic-number sn-town-defend-priority 1)
(disable-self)
)

(defrule
(true)
=>
(set-strategic-number sn-target-evaluation-distance 150)
(set-strategic-number sn-target-evaluation-hitpoints 100)
(set-strategic-number sn-target-evaluation-kills 50)
(set-strategic-number sn-target-evaluation-rof 0)
(set-strategic-number sn-target-evaluation-randomness 0)
(set-strategic-number sn-target-evaluation-attack-attempts 50)
(set-strategic-number sn-target-evaluation-range 0)
(set-strategic-number sn-special-attack-type1 -1)
(set-strategic-number sn-special-attack-influence1 0)
(disable-self)
)

(defrule
(true)
=>
(set-strategic-number sn-target-evaluation-continent 0)
(set-strategic-number sn-target-evaluation-damage-capability 0)
(set-strategic-number sn-target-evaluation-ally-proximity 0)
(set-strategic-number sn-target-evaluation-boat 1000)
(set-strategic-number sn-target-evaluation-time-kill-ratio 100)
(set-strategic-number sn-target-evaluation-in-progress 0)
(set-strategic-number sn-target-evaluation-siege-weapon 50)
(set-strategic-number sn-gather-idle-soldiers-at-center 0)
(set-strategic-number sn-retask-gather-amount 0)
(disable-self)
)

;- Feudal age agatherering--

(defrule
(civilian-population >= 50)
(wood-amount < 300)
(gold-amount > 600)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 44)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 8)
(chat-to-player my-player-number "got needed gold, put more vils on wood")
)


(defrule
(civilian-population >= 50)
(and(wood-amount > 300)(wood-amount < 900))
(gold-amount > 600)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 49)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 8)
(chat-to-player my-player-number "got needed gold and wood, put more vils on food")
)

(defrule
(civilian-population >= 50)
(wood-amount > 1000)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 52)
(set-strategic-number sn-wood-gatherer-percentage 28)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 12)
(chat-to-player my-player-number "high amounts of wood and gold, put more vils on food")
;(build farm)
)

(defrule	;EDIT! using "build" without a corresponding "can-build" in the same rule can cause bugs
(strategic-number sn-food-gatherer-percentage == 52)
(strategic-number sn-wood-gatherer-percentage == 28)
(strategic-number sn-stone-gatherer-percentage == 8)
(strategic-number sn-gold-gatherer-percentage == 12)
(current-age == feudal-age)
(can-build farm)
=>
(build farm)
(chat-to-player my-player-number "got needed gold and wood, build farm for food")
)

(defrule
(civilian-population >= 50)
(gold-amount < 600)
(food-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 39)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 18)
(chat-to-player my-player-number "got needed food, put more vils on gold")
)

(defrule
(civilian-population >= 60)
(wood-amount < 300)
(food-amount < 500)
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 38)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
(civilian-population >= 60)
(and(wood-amount > 300)(wood-amount < 600))
(and(food-amount > 500)(food-amount < 1000))
(and(gold-amount > 300)(gold-amount < 800))
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 38)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
(civilian-population >= 60)
(wood-amount > 600)
(food-amount > 1000)
(gold-amount > 800)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 38)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 21)
)

(defrule
(civilian-population >= 60)
(and(wood-amount > 300)(wood-amount < 600))
(food-amount < 500)
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 22)
)

(defrule
(civilian-population >= 60)
(wood-amount > 600)
(food-amount < 500)
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 26)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 24)
)

(defrule
(civilian-population >= 60)
(and(wood-amount > 300)(wood-amount < 600))
(and(food-amount > 500)(food-amount < 1000))
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 36)
(set-strategic-number sn-wood-gatherer-percentage 26)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 30)
)

(defrule
(civilian-population >= 60)
(wood-amount > 600)
(food-amount > 1000)
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 32)
(set-strategic-number sn-wood-gatherer-percentage 26)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 34)
)

(defrule
(civilian-population >= 60)
(and(wood-amount > 300)(wood-amount < 600))
(food-amount < 500)
(and(gold-amount > 300)(gold-amount < 800))
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 44)
(set-strategic-number sn-wood-gatherer-percentage 28)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 20)
)

(defrule
(civilian-population >= 60)
(wood-amount > 600)
(food-amount < 500)
(gold-amount > 800)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 50)
(set-strategic-number sn-wood-gatherer-percentage 26)
(set-strategic-number sn-stone-gatherer-percentage 6)
(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
(civilian-population >= 60)
(and(food-amount > 500)(food-amount < 1000))
(wood-amount < 300)
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 36)
(set-strategic-number sn-wood-gatherer-percentage 34)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 22)
)

(defrule
(civilian-population >= 60)
(food-amount > 1000)
(wood-amount < 300)
(gold-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 32)
(set-strategic-number sn-wood-gatherer-percentage 36)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 24)
)

(defrule
(civilian-population >= 60)
(and(food-amount > 500)(food-amount < 1000))
(and(gold-amount > 300)(gold-amount < 800))
(wood-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 34)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 20)
)

(defrule
(civilian-population >= 60)
(food-amount > 1000)
(gold-amount > 800)
(wood-amount < 300)
(current-age >= castle-age)
=>
(set-strategic-number sn-food-gatherer-percentage 32)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 19)
)

;------

#load-if-not-defined MONGOL-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined HUN-CIV

;===========================<<<<<<<<<<Decide Strategy>>>>>>>>>>===========================

(defrule
(true)
=>
(set-goal strategy-goal 0)
(generate-random-number 100)
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 0)
(random-number <= 50)
=>
(set-goal strategy-goal 1) ;Hausmacht
(chat-to-player my-player-number "Strategy 1: ?")
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 50)
(random-number <= 100)
=>
(set-goal strategy-goal 2) ;Romzug
(chat-to-player my-player-number "Strategy 2: ?")
(disable-self)
)

;=============================<<<<<<<<<<Town Center>>>>>>>>>>==============================

;Building a town center is the most important action for an AI, especially if the AI does
;not have one.

(defrule
(building-type-count town-center < 1)
(unit-type-count villager > 2)
=>
(chat-to-player my-player-number "increase town size for town center")
(set-strategic-number sn-maximum-town-size 50)
(set-escrow-percentage wood 100)
(set-escrow-percentage stone 100)
)

(defrule
(building-type-count town-center < 1)
(can-build-with-escrow town-center)
=>
(release-escrow wood)
(release-escrow stone)
(build town-center)
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(chat-to-player every-ally "I'm rebuilding my town away from my base.")
(chat-to-player every-ally "Protect me!")
(set-strategic-number sn-maximum-food-drop-distance 25)
)

(defrule
(unit-type-count villager >= 25)
(building-type-count town-center < 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 42)
(building-type-count town-center < 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 50)
(building-type-count town-center < 4)
(building-type-count castle >= 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 55)
(building-type-count town-center < 5)
(building-type-count castle >= 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 65)
(building-type-count town-center < 7)
(building-type-count castle >= 4)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 75)
(building-type-count town-center < 10)
(building-type-count castle >= 5)
(can-build town-center)
=>
(build town-center)
)

;===============================<<<<<<<<<<Research>>>>>>>>>>===============================

;====Age Advancement

(defrule
(can-research feudal-age)
(or	(unit-type-count villager >= 38)
	(food-amount >= 1000))
(unit-type-count-total villager >= 10)
=>
(research feudal-age)
(set-strategic-number sn-current-age to-13-century)
)

(defrule
(can-research-with-escrow castle-age)
(or	(unit-type-count villager >= 55)
	(food-amount >= 1300))
(unit-type-count villager >= 35)
=>
(release-escrow food)
(release-escrow gold)
(research castle-age)
(set-strategic-number sn-current-age to-14-century)
)

(defrule
(can-research-with-escrow imperial-age)
(or	(unit-type-count-total villager > 75)
	(food-amount >= 1400))
(unit-type-count villager >= 60)
=>
(release-escrow food)
(release-escrow gold)
(research imperial-age)
(set-strategic-number sn-current-age to-15-century)
)

;====Policy decisions

;If Strategy 1

(defrule
(goal strategy-goal 1)
(current-age >= castle-age)
(can-research-with-escrow au-hausmacht)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research hausmacht")
(research au-hausmacht)
)

;If Strategy 2

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(can-research-with-escrow au-romzug)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research romzug")
(research au-romzug)
)

; -- end policy decisions --

;DARK AGE START and FEUDAL age START
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START

;Explore to find food at the beginning of the game

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 50); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 0)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 5)
(disable-self)
)

;Stop exploring when food is found

(defrule
(or	(resource-found food)
	(or	(not	(sheep-and-forage-too-far))
		(building-type-count-total mill > 0)))
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 0); to stop exploring
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 0)
(disable-self)
)

;- dark age agatherering--
(defrule
(unit-type-count villager < 8)
=>
(set-strategic-number sn-food-gatherer-percentage 100)
(set-strategic-number sn-wood-gatherer-percentage 0)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 8)
(unit-type-count villager < 10)
=>
(set-strategic-number sn-food-gatherer-percentage 90)
(set-strategic-number sn-wood-gatherer-percentage 10)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 10)
(unit-type-count villager < 15)
=>
(set-strategic-number sn-food-gatherer-percentage 70)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 15)
(unit-type-count villager < 20)
=>
(set-strategic-number sn-food-gatherer-percentage 65)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 20)
(unit-type-count villager < 25)
=>
(set-strategic-number sn-food-gatherer-percentage 52)
(set-strategic-number sn-wood-gatherer-percentage 48)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 25)
(unit-type-count villager < 30)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 4)
)

(defrule
(unit-type-count villager >= 30)
(unit-type-count villager < 35)
=>
(set-strategic-number sn-food-gatherer-percentage 41)
(set-strategic-number sn-wood-gatherer-percentage 52)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
(unit-type-count villager >= 35)
(unit-type-count villager < 43)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(food-amount < 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 48)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
(food-amount >= 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
(food-amount < 800)
(gold-amount >= 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(current-age == dark-age)
(strategic-number sn-current-age == to-13-century)
(building-type-count barracks > 0)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 32)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 19)
)

;- Feudal age agatherering--

(defrule
(civilian-population < 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population < 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 34)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

;------



(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)


(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 900))
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 46)
(set-strategic-number sn-wood-gatherer-percentage 37)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population >= 50)
(wood-amount > 1000)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 53)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 7)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(strategic-number sn-stone-gatherer-percentage == 7)
(can-build farm)
=>
(build farm)
(chat-local-to-self "build extra farms")
)

;==============================<<<<<<<<<<Buildings>>>>>>>>>>===============================

;EDIT! Only build a house right when it is needed by checking for a smaller headroom

(defrule
(current-age == dark-age)
(housing-headroom < 3)
(population-headroom > 3)
(can-build house)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age == dark-age)
(housing-headroom < 5)
(population-headroom > 3)
(can-build house)
(building-type-count barracks > 0)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age >= feudal-age)
(housing-headroom < 8)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
(building-type-count archery-range > 0)
=>
(build house)
)

;end EDIT

(defrule
;(not(death-match-game))
(or	(and	(dropsite-min-distance food > -1)
		(game-time > 90))
	(or	(unit-type-count male-forager > 0)
		(or	(unit-type-count female-forager > 0)
			(unit-type-count villager > 10))))	;EDIT! In case food isn't found
(building-type-count-total mill < 1)
(can-build mill)
=>
(build mill)
;(chat-local-to-self "build first mill")
)

;---dark buildings

(defrule
(building-type-count-total lumber-camp >= 1)
(dropsite-min-distance food > -1)
(or	(unit-type-count male-hunter >= 1)
	(or	(unit-type-count female-hunter >= 1)
		(dropsite-min-distance food > 5)))
(building-type-count-total mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(build mill)
)

#load-if-defined SCANDANAVIA-MAP

(defrule
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(chat-to-player my-player-number "build Scandinavia mill")
(build mill)
)

#end-if

(defrule
(game-time > 90)
(building-type-count-total lumber-camp < 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 4)
(can-build farm)
(dropsite-min-distance food > 5)
=>
(build farm)
)

(defrule
(building-type-count-total lumber-camp >= 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 8)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count mining-camp >= 1) ;EDIT - changed lumber-camp to mining-camp
(idle-farm-count < 3)
(unit-type-count villager >= 25)
(unit-type-count villager <= dark-villager-count)
(building-type-count farm < 20)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age == feudal-age)
(building-type-count-total farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age == feudal-age)
(building-type-count-total farm < 40)
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(or	(building-type-count farm < 15)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 18))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-horse-collar)
(or	(building-type-count farm < 20)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 25))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-heavy-plow)
(or	(building-type-count farm < 25)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 30))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-crop-rotation)
(or	(building-type-count farm < 40)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 50))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

;EDIT! Better lumber camp construction rules

(defrule
(or	(not	(death-match-game))
	(or	(game-time >= 300)
		(building-type-count-total mill > 0)))
(or	(unit-type-count villager >= 12)
	(wood-amount > 500))
(building-type-count lumber-camp < 1)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(building-type-count-total lumber-camp < 3)
(dropsite-min-distance wood > 5)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 5)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 8)
(strategic-number sn-camp-max-distance >= 50)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 12)
(strategic-number sn-camp-max-distance >= 70)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(strategic-number sn-camp-max-distance >= 255)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
(disable-self)
)

(defrule
(timer-triggered retreat-lumber-camp-timer)
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
)

;Better rules for mining camps:

(defrule
(or	(unit-type-count villager >= 25)
	(or	(gold-amount < 10)
		(current-age >= feudal-age)))
(building-type-count-total mining-camp < 1)
(can-build mining-camp)
(dropsite-min-distance gold > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(or	(unit-type-count villager >= 38)
	(and	(current-age >= feudal-age)
		(or	(building-type-count-total market > 0)
			(building-type-count-total siege-workshop > 0))))
(building-type-count mining-camp < 2)
(can-build mining-camp)
(dropsite-min-distance stone > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(current-age >= feudal-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 3)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

;end EDIT

(defrule
(can-build castle)
(or	(building-type-count-total town-center >= 3)
	(or	(and	(building-type-count-total town-center >= 2)
			(stone-amount >= 750))
		(current-age <= feudal-age)))
(building-type-count castle < 1)
=>
(build castle)
)

(defrule
(or	(unit-type-count villager >= 25)
	(wood-amount > 275))
(can-build barracks)
(building-type-count-total barracks < 1)
(or	(building-type-count-total mining-camp > 0)
	(and	(wood-amount > 275)
		(building-type-count-total lumber-camp > 0)))
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build barracks)
(building-type-count-total barracks < 2)
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build barracks)
(building-type-count-total barracks < 4)
=>
(build barracks)
)

(defrule
(or	(unit-type-count villager >= 30)
	(and	(current-age >= feudal-age)
		(building-type-count barracks > 0)))
(can-build archery-range)
(building-type-count-total archery-range < 1)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build archery-range)
(building-type-count-total archery-range < 2)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build archery-range)
(building-type-count-total archery-range < 4)
=>
(build archery-range)
)

(defrule
(not(starting-age == post-imperial-age))
(wood-amount >= 210)
(building-type-count-total blacksmith < 1)
(can-build blacksmith)
=>
(build blacksmith)
)

(defrule
(can-build market)
(building-type-count-total market < 1)
(or	(building-type-count-total siege-workshop > 0)
	(goal aggressive-goal defensive))
=>
(build market)
(chat-local-to-self "build market")
)

(defrule
(or	(unit-type-count villager >= 40)
	(and	(building-type-count-total castle > 0)
		(unit-type-count villager > 30)))
(can-build stable)
(building-type-count-total stable < 1)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build stable)
(building-type-count-total stable < 2)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build stable)
(building-type-count-total stable < 4)
=>
(build stable)
)

(defrule
(or	(goal aggressive-goal aggressive)
	(or	(military-population >= 10)
		(wood-amount > 400)))
(building-type-count siege-workshop < 1)
(can-build siege-workshop)
=>
(build siege-workshop)
)

(defrule
(can-build watch-tower)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower < low-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= low-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
(building-type-count castle < 2)
=>
(build castle)
)

(defrule
(can-build watch-tower)
(building-type-count castle > 1)
(building-type-count watch-tower < high-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= high-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(building-type-count castle >= 2)
(building-type-count bombard-tower < bombard-tower-count)
(can-build bombard-tower)
=>
(build bombard-tower))

(defrule
(building-type-count monastery < 1)
(can-build monastery)
=>
(build monastery)
)

(defrule
(not(starting-age == post-imperial-age))
(building-type-count university < 1)
(building-type-count town-center >= 2)
(building-type-count barracks >= 1)
(building-type-count market >= 1)
(building-type-count archery-range >= 1)
(can-build university)
=>
(build university)
)

#end-if
#end-if
#end-if

#load-if-not-defined DARK-AGE-START

;====Researches

(defrule
(unit-type-count villager >= 42)
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 46)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

;====Buildings

(defrule
(current-age >= feudal-age)
(housing-headroom < 6)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
=>
(build house)
)

(defrule
(wood-amount >= 500)
(building-type-count blacksmith >= 1)
(building-type-count barracks >= 1)
(current-age  >= feudal-age)
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 3)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 35)
(build mill)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age  >= feudal-age)
(building-type-count farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age >= feudal-age)
(building-type-count farm < 40)
(can-build farm)
=>
(build farm)
)

#end-if

;====Princely Court Technologies

(defrule
(can-research-with-escrow pc-bow-practise)
(goal strategy-goal 1)
=>
(release-escrow food)
(release-escrow gold)
(research pc-bow-practise)
)

(defrule
(can-research-with-escrow pc-chivalric-order)
(goal strategy-goal 2)
=>
(release-escrow food)
(release-escrow gold)
(research pc-chivalric-order)
)

(defrule
(can-research wa-bow-practise)
(can-research wa-swordsmanship)
(can-research wa-minor-nobility)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research wa-bow-practise)
(can-research wa-swordsmanship)
(can-research wa-minor-nobility)
=>
(research wa-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research wa-bow-practise)
(can-research wa-swordsmanship)
(can-research wa-minor-nobility)
=>
(research wa-swordsmanship)
)

(defrule
(random-number > 66)
(can-research wa-bow-practise)
(can-research wa-swordsmanship)
(can-research wa-minor-nobility)
=>
(research wa-minor-nobility)
)

(defrule
(current-age == castle-age)
(can-research fl-bow-practise)
(can-research fl-close-order-drill)
(can-research fl-militia-guilds)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research fl-bow-practise)
(can-research fl-close-order-drill)
(can-research fl-militia-guilds)
=>
(research fl-bow-practise)
)

(defrule

(random-number > 33)
(random-number <= 66)
(can-research fl-bow-practise)
(can-research fl-close-order-drill)
(can-research fl-militia-guilds)
=>
(research fl-close-order-drill)
)

(defrule
(random-number > 66)
(can-research fl-bow-practise)
(can-research fl-close-order-drill)
(can-research fl-militia-guilds)
=>
(research fl-militia-guilds)
)

(defrule
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(research sax/to-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(research to-swordsmanship)
)

(defrule
(random-number > 66)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(research sax/to-chivalric-order)
)

(defrule
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(research sax/to-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(research sax-militia-guilds)
)

(defrule
(random-number > 66)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(research sax/to-chivalric-order)
)

(defrule
(current-age == castle-age)
(can-research ba-bow-practise)
(can-research ba-close-order-drill)
(can-research ba-militia-guilds)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research ba-bow-practise)
(can-research ba-close-order-drill)
(can-research ba-militia-guilds)
=>
(research ba-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research ba-bow-practise)
(can-research ba-close-order-drill)
(can-research ba-militia-guilds)
=>
(research ba-close-order-drill)
)

(defrule
(random-number > 66)
(can-research ba-bow-practise)
(can-research ba-close-order-drill)
(can-research ba-militia-guilds)
=>
(research ba-militia-guilds)
)

(defrule
(can-research ge-bow-practise)
(can-research ge-close-order-drill)
(can-research ge-militia-guilds)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research ge-bow-practise)
(can-research ge-close-order-drill)
(can-research ge-militia-guilds)
=>
(research ge-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research ge-bow-practise)
(can-research ge-close-order-drill)
(can-research ge-militia-guilds)
=>
(research ge-close-order-drill)
)

(defrule
(random-number > 66)
(can-research ge-bow-practise)
(can-research ge-close-order-drill)
(can-research ge-militia-guilds)
=>
(research ge-militia-guilds)
)

(defrule
(can-research fri-bow-practise)
(can-research fri-swordsmanship)
(can-research fri-minor-nobility)
=>
(generate-random-number 100)
)

(defrule

(random-number <= 33)
(can-research fri-bow-practise)
(can-research fri-swordsmanship)
(can-research fri-minor-nobility)
=>
(research fri-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research fri-bow-practise)
(can-research fri-swordsmanship)
(can-research fri-minor-nobility)
=>
(research fri-swordsmanship)
)

(defrule
(random-number > 66)
(can-research fri-bow-practise)
(can-research fri-swordsmanship)
(can-research fri-minor-nobility)
=>
(research fri-minor-nobility)
)

(defrule
(can-research he-bow-practise)
(can-research he-swordsmanship)
(can-research he-minor-nobility)
=>
(generate-random-number 100)
)

(defrule
(random-number <= 33)
(can-research he-bow-practise)
(can-research he-swordsmanship)
(can-research he-minor-nobility)
=>
(research he-bow-practise)
)

(defrule
(random-number > 33)
(random-number <= 66)
(can-research he-bow-practise)
(can-research he-swordsmanship)
(can-research he-minor-nobility)
=>
(research he-swordsmanship)
)

(defrule
(random-number > 66)
(can-research he-bow-practise)
(can-research he-swordsmanship)
(can-research he-minor-nobility)
=>
(research he-minor-nobility)
)

(defrule
(can-research to-swordsmanship)
=>
(research to-swordsmanship)
(disable-self))

(defrule
(can-research-with-escrow popular-assembly)
=>
(release-escrow food)
(release-escrow gold)
(research popular-assembly)
)

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-court))

(defrule
(population >= three-quarters-pop)
(can-research-with-escrow city-councils-court)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-court))

(defrule
(population >= full-pop)
(can-research-with-escrow storehouses-court)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-court))

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-hall)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-hall)
)

(defrule
(can-research-with-escrow city-councils-hall)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-hall)
)

(defrule
(can-research-with-escrow storehouses-hall)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-hall)
)

(defrule
(building-type-count-total castle > 0)
(can-research-with-escrow roman-law-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research roman-law-court))

(defrule
(building-type-count-total castle > 1)
(can-research-with-escrow representation-court)
=>
(release-escrow food)
(release-escrow gold)
(research representation-court))

(defrule
(building-type-count-total castle > 2)
(can-research-with-escrow fourth-estate-court)
=>
(release-escrow food)
(release-escrow gold)
(research fourth-estate-court))

(defrule
(building-type-count-total castle > 0)
(can-research-with-escrow roman-law-hall)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research roman-law-hall)
)

(defrule
(building-type-count-total castle > 1)
(can-research-with-escrow representation-hall)
=>
(release-escrow food)
(release-escrow gold)
(research representation-hall)
)

(defrule
(can-research-with-escrow fourth-estate-hall)
=>
(release-escrow food)
(release-escrow gold)
(research fourth-estate-hall)
)

(defrule
(can-research roman-law-he)
=>
(research roman-law-he)
(disable-self))

(defrule
(can-research representation-he)
=>
(research representation-he)
(disable-self))

(defrule
(can-research fourth-estate-he)
=>
(research fourth-estate-he)
(disable-self))

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(can-research-with-escrow pc-court-clergy)
=>
(release-escrow food)
(release-escrow gold)
(research pc-court-clergy))

; -- end princely court techs

;Expensive techs

(defrule
(can-research-with-escrow my-unique-unit-upgrade)
=>
(release-escrow food)
(release-escrow gold)
(research my-unique-unit-upgrade))

(defrule
(can-research-with-escrow en-english-longbowmen)
=>
(release-escrow food)
(release-escrow gold)
(research en-english-longbowmen)
)

(defrule
(can-research-with-escrow ri-elite-chu-ko-nu)
=>
(release-escrow food)
(release-escrow gold)
(research ri-elite-chu-ko-nu))

(defrule
(can-research-with-escrow ri-champion)
(unit-type-count new-man-at-arms > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-champion))

(defrule
(can-research-with-escrow fra-foot-knight)
(unit-type-count new-man-at-arms > 0)
=>
(release-escrow food)
(release-escrow gold)
(research fra-foot-knight))

(defrule
(can-research-with-escrow bo-foot-knight)
(unit-type-count new-man-at-arms > 0)
=>
(release-escrow food)
(release-escrow gold)
(research bo-foot-knight)
)

(defrule
(unit-type-count knight >= miniscule-pop)
(can-research-with-escrow ri-ordonnance-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ordonnance-companies))

(defrule
(unit-type-count knight >= miniscule-pop)
(can-research-with-escrow de-ordonnance-companies)
=>
(release-escrow food)
(release-escrow gold)
(research de-ordonnance-companies)
)

(defrule
(can-research-with-escrow fra-eternal-peace)
=>
(release-escrow food)
(release-escrow gold)
(research fra-eternal-peace)
)

(defrule
(can-research ri-elite-eagle-warrior)
=>
(research ri-elite-eagle-warrior))

(defrule
(can-research-with-escrow fra-auld-alliance)
=>
(release-escrow food)
(release-escrow gold)
(research fra-auld-alliance)
)

(defrule
(can-research-with-escrow fra-order-of-the-fleur-de-lys)
=>
(release-escrow food)
(release-escrow gold)
(research fra-order-of-the-fleur-de-lys)
)

(defrule
(military-population >= 40)
(can-research-with-escrow to-cistercian-reform)
=>
(release-escrow food)
(release-escrow gold)
(research to-cistercian-reform)
)

(defrule
(military-population >= 40)
(can-research-with-escrow to-imperial-privilege)
=>
(release-escrow food)
(release-escrow gold)
(research to-imperial-privilege)
)

;Normal techs

(defrule
(unit-type-count villager >= 4)	;EDIT! Villager production is more important than loom at the beginning of the game.
(can-research ri-loom)
(or	(food-amount < 20)
	(or	(unit-type-count villager >= dark-villager-count)
		(current-age >= feudal-age))) ;end EDIT
=>
(research ri-loom)
)

(defrule
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(building-type-count farm > 10)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

(defrule
(or	(unit-type-count-total militiaman-line >= miniscule-pop)
	(current-age >= feudal-age))
(can-research ri-man-at-arms)
(or	(unit-type-count-total villager >= 37)
	(building-type-count archery-range > 0))
=>
(research ri-man-at-arms)
)

(defrule
(unit-type-count villager >= 50)
(can-research ri-gold-mining)
=>
(research ri-gold-mining)
)

(defrule
(unit-type-count villager >= 60)
(can-research ri-stone-mining)
=>
(research ri-stone-mining)
)

(defrule
(can-research-with-escrow ri-long-swordsman)
=>
(release-escrow food)
(research ri-long-swordsman)
)

(defrule
(unit-type-count-total spearman > 5)
(can-research-with-escrow ri-pikeman)
=>
(release-escrow food)
(research ri-pikeman)
)

(defrule
(unit-type-count-total pikeman > 5)
(can-research-with-escrow sc-pike-drill)
=>
(release-escrow food)
(release-escrow gold)
(research sc-pike-drill)
)

(defrule
(unit-type-count-total pikeman > 5)
(can-research-with-escrow he-pike-drill)
=>
(release-escrow food)
(release-escrow gold)
(research he-pike-drill)
)

(defrule
(unit-type-count-total pikeman > 5)
(can-research-with-escrow fl-pike-drill)
=>
(release-escrow food)
(release-escrow gold)
(research fl-pike-drill)
)

(defrule
(unit-type-count-total pikeman > 5)
(can-research-with-escrow bo-pike-drill)
=>
(release-escrow food)
(release-escrow gold)
(research bo-pike-drill)
)

(defrule
(unit-type-count-total spearman > 5)
(can-research-with-escrow wa-pikeman)
=>
(release-escrow food)
(research wa-pikeman)
)

(defrule
(unit-type-count-total spearman > 5)
(can-research-with-escrow fri-pikeman)
=>
(release-escrow food)
(research fri-pikeman)
)

(defrule
(unit-type-count-total spearman > 5)
(can-research-with-escrow he-pikeman)
=>
(release-escrow food)
(research he-pikeman)
)

(defrule
(or	(unit-type-count-total archer-line > 5)
	(goal strategy-goal 1))
(can-research-with-escrow ri-crossbow)
=>
(release-escrow food)
(research ri-crossbow)
)

(defrule
(can-research-with-escrow ri-light-cavalry)
=>
(release-escrow food)
(research ri-light-cavalry)
)

(defrule
(can-research-with-escrow sc-light-cavalry)
=>
(release-escrow food)
(research sc-light-cavalry)
)

(defrule
(goal strategy-goal 2)
(can-research-with-escrow ri-elite-skirmisher)
=>
(release-escrow gold)
(research ri-elite-skirmisher)
)

(defrule
(can-research-with-escrow wa-elite-skirmisher)
=>
(release-escrow gold)
(research wa-elite-skirmisher)
)

(defrule
(can-research-with-escrow fri-elite-skirmisher)
=>
(release-escrow gold)
(research fri-elite-skirmisher)
)

(defrule
(can-research-with-escrow he-elite-skirmisher)
=>
(release-escrow gold)
(research he-elite-skirmisher)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-bloodlines)
=>
(research ri-bloodlines)
)

(defrule
(unit-type-count archer-line >= miniscule-pop)
(can-research-with-escrow ri-crossbow-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow-companies))

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
)

(defrule
(research-completed ri-scale-mail)
(can-research-with-escrow ri-mercenaries)
=>
(release-escrow food)
(research ri-mercenaries)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research ri-fletching)
=>
(research ri-fletching)
)

(defrule
(or	(research-completed ri-scale-mail)
	(research-completed ri-scale-barding))
(can-research ri-forging)
=>
(research ri-forging)
)

(defrule
(research-completed ri-fletching)
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
)

(defrule
(research-completed ri-forging)
(player-in-game any-ally)
(can-research ri-cartography)
=>
(research ri-cartography)
)

(defrule
(building-type-count-total castle >= 1)
(can-research-with-escrow ri-murder-holes)
=>
(release-escrow food)
(research ri-murder-holes)
)

(defrule
(building-type-count-total castle >= 1)
(can-research-with-escrow to-murder-holes)
=>
(release-escrow food)
(research to-murder-holes)
)

(defrule
(civilian-population >= 60)
(can-research-with-escrow ri-hand-cart)
=>
(release-escrow food)
(research ri-hand-cart)
)

(defrule
(civilian-population >= 60)
(can-research ri-bow-saw)
=>
(research ri-bow-saw)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-gold-shaft-mining)
=>
(release-escrow food)
(research ri-gold-shaft-mining)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-stone-shaft-mining)
=>
(release-escrow food)
(research ri-stone-shaft-mining)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ius-teutonicum)
=>
(release-escrow food)
(release-escrow gold)
(research ius-teutonicum)
)

(defrule
(can-research ri-heavy-plow)
=>
(research ri-heavy-plow)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow ri-iron-casting)
=>
(release-escrow food)
(research ri-iron-casting)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow bo-iron-casting)
=>
(release-escrow food)
(research bo-iron-casting)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count archery-range > 0))
(can-research-with-escrow ri-bodkin-arrow)
=>
(release-escrow food)
(research ri-bodkin-arrow)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-pavises)
=>
(release-escrow gold)
(research ri-pavises)
)

(defrule
(unit-type-count 912 >= miniscule-pop)
(can-research-with-escrow ri-chain-barding)
=>
(release-escrow food)
(research ri-chain-barding)
)

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research-with-escrow ri-chain-mail)
=>
(release-escrow food)
(research ri-chain-mail)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-thumb-ring)
=>
(release-escrow food)
(research ri-thumb-ring))

(defrule
(can-research ri-ballistics)
=>
(research ri-ballistics)
)

(defrule
(unit-type-count-total religious-units >= 2)
(can-research ri-sanctity)
=>
(research ri-sanctity)
)

(defrule
(research-completed ri-ballistics)
(can-research-with-escrow ri-stonecutting)	;treadmill crane
=>
(release-escrow food)
(research ri-stonecutting)
)

(defrule
(research-completed ri-chain-mail)
(can-research ri-masonry)
=>
(research ri-masonry)
)

(defrule
(research-completed ri-ballistics)
(can-research-with-escrow to-treadmill-crane)
=>
(release-escrow food)
(research to-treadmill-crane)
)

(defrule
(building-type-count watch-tower >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-guard-tower)
=>
(research ri-guard-tower))

(defrule
(building-type-count stone-wall-line > 0)
(can-research-with-escrow ri-fortified-wall)
=>
(research ri-fortified-wall)
)

(defrule
(building-type-count stone-wall-line > 0)
(can-research-with-escrow to-fortified-wall)
=>
(research to-fortified-wall)
)

(defrule
(goal wall BUILD-WALL)
(building-type-count palisade-wall > 0)
(can-research ri-border-forts)
=>
(research ri-border-forts)
)

(defrule
(research-completed ri-chain-mail)
(player-in-game any-ally)
(can-research ri-caravan)
=>
(research ri-caravan)
)

(defrule
(or	(research-completed ri-bodkin-arrow)
	(building-type-count-total castle > 0))
(can-research ri-town-watch)
=>
(research ri-town-watch)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-tracking)
=>
(research ri-tracking)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research sc-tracking)
=>
(research sc-tracking)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-squires)
=>
(research ri-squires)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(not	(research-available ri-bloodlines))
(can-research ri-husbandry)
=>
(research ri-husbandry)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(not	(research-available ri-bloodlines))
(can-research sc-husbandry)
=>
(research sc-husbandry)
)

(defrule
(goal strategy-goal 1)
(can-research-with-escrow ri-heavy-camel)
=>
(release-escrow food)
(release-escrow gold)
(research ri-heavy-camel))

(defrule
(can-research-with-escrow ri-halberdier)
=>
(release-escrow food)
(release-escrow gold)
(research ri-halberdier))

(defrule
(can-research-with-escrow bo-halberd)
=>
(release-escrow food)
(release-escrow gold)
(research bo-halberd)
)

(defrule
(can-research-with-escrow en-billman)
=>
(release-escrow food)
(release-escrow gold)
(research en-billman))

(defrule
(can-research-with-escrow sc-hobelar)
=>
(release-escrow food)
(release-escrow gold)
(research sc-hobelar)
)

(defrule
(unit-type-count-total archer-line > 5)
(can-research-with-escrow ri-arbalest)
=>
(release-escrow food)
(release-escrow gold)
(research ri-arbalest)
)

(defrule
(unit-type-count-total archer-line > 5)
(can-research bo-arbalest)
=>
(release-escrow food)
(release-escrow gold)
(research bo-arbalest)
)

(defrule
(unit-type-count-total archer-line > 5)
(can-research ge-arbalest)
=>
(release-escrow food)
(release-escrow gold)
(research ge-arbalest)
)

(defrule
(can-research-with-escrow ri-conscription)
=>
(release-escrow food)
(release-escrow gold)
(research ri-conscription))

(defrule
(can-research-with-escrow ri-two-man-saw)
=>
(release-escrow food)
(research ri-two-man-saw))

(defrule
(can-research-with-escrow ri-capped-ram)
=>
(release-escrow food)
(research ri-capped-ram))

(defrule
(unit-type-count battering-ram-line >= miniscule-pop)
(can-research-with-escrow ri-siege-ram)
=>
(release-escrow food)
(research ri-siege-ram))

(defrule
(building-type-count guard-tower >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-keep)
=>
(release-escrow food)
(research ri-keep))

(defrule
(building-type-count keep >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-bombard-tower)
=>
(release-escrow food)
(research ri-bombard-tower))

(defrule
(can-research-with-escrow ri-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-onager))

(defrule
(can-research-with-escrow ri-siege-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-siege-onager))

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research-with-escrow ri-bracer)
=>
(release-escrow food)
(release-escrow gold)
(research ri-bracer)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research-with-escrow bo-bracer)
=>
(release-escrow food)
(release-escrow gold)
(research bo-bracer)
)

(defrule
(building-type-count-total barracks > 0)
(can-research-with-escrow ri-plate-mail)
=>
(release-escrow food)
(research ri-plate-mail)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow ri-blast-furnace)
=>
(release-escrow food)
(release-escrow gold)
(research ri-blast-furnace)
)

(defrule
(building-type-count-total stable > 0)
(can-research-with-escrow ri-plate-barding)
=>
(release-escrow food)
(release-escrow gold)
(research ri-plate-barding)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow sc-claidheim-biorach)
=>
(release-escrow food)
(release-escrow gold)
(research sc-claidheim-biorach)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow sc-auld-alliance)
=>
(release-escrow food)
(release-escrow gold)
(research sc-auld-alliance)
)

(defrule
(can-research-with-escrow ri-ring-archer-armor)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ring-archer-armor))

(defrule
(not	(research-available ri-blast-furnace))
(can-research-with-escrow fri-frisian-liberty)
=>
(release-escrow food)
(release-escrow gold)
(research fri-frisian-liberty)
)

(defrule
(can-research-with-escrow ri-siege-engineers)
=>
(release-escrow food)
(research ri-siege-engineers))

(defrule
(not	(research-available ri-blast-furnace))
(can-research-with-escrow ri-guilds)
=>
(release-escrow food)
(release-escrow gold)
(research ri-guilds))

(defrule
(not	(research-available ri-plate-mail))
(can-research ri-architecture)
=>
(research ri-architecture)
)

(defrule
(can-research 408)	;Spies
=>
(research 408)
)

(defrule
(research-completed au-hausmacht)
(unit-type-count-total chu-ko-nu-line > 0)
(can-research-with-escrow ri-parthian-tactics)
=>
(release-escrow food)
(research ri-parthian-tactics)
)

(defrule
(or	(research-completed ri-bracer)
	(or	(building-type-count-total watch-tower > high-tower-count)
		(building-type-count-total castle > 1)))
(current-age >= imperial-age)
(can-research ri-town-patrol)
=>
(research ri-town-patrol)
)

(defrule
(military-population >= 50)
(can-research-with-escrow ri-chemistry)
=>
(release-escrow food)
(release-escrow gold)
(research ri-chemistry)
)

(defrule
(military-population >= 50)
(not(town-under-attack))
(can-research-with-escrow to-alchemy)
=>
(release-escrow food)
(release-escrow gold)
(research to-alchemy)
)

(defrule
(not (goal water-map 0))
(can-research ri-likedeler)	;Saxon elite cannon galleon
=>
(research ri-likedeler)
)

(defrule
(or	(players-unit-type-count any-enemy religious-units >= 5)
	(civ-selected aztec))
(can-research ri-heresy)
=>
(research ri-heresy)
)

(defrule
(or	(players-unit-type-count any-enemy religious-units >= 10)
	(civ-selected aztec))
(can-research-with-escrow ri-faith)
=>
(release-escrow food)
(release-escrow gold)
(research ri-faith)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-atonement)
=>
(release-escrow gold)
(research ri-atonement)
)

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(unit-type-count religious-units >= 2)
(can-research-with-escrow ri-fervor)
=>
(release-escrow gold)
(research ri-fervor)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-redemption)
=>
(release-escrow gold)
(research ri-redemption)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-illumination)
=>
(research ri-illumination)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-block-printing)
=>
(release-escrow gold)
(research ri-block-printing)
)

(defrule
(civ-selected aztec)	;Denmark
(can-research ri-theocracy)
(unit-type-count religious-units >= 4)
(gold-amount > 800)
=>
(research ri-theocracy)
)

(defrule
(civ-selected aztec)	;Denmark
(can-research ri-herbal-medicine)
(unit-type-count religious-units >= 4)
(gold-amount > 800)
(current-age == imperial-age)
=>
(research ri-herbal-medicine)
)

;==========================<<<<<<<<<<Civilian Training>>>>>>>>>>===========================

;====Villagers

(defrule
(unit-type-count-total villager < dark-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training Dark Age Villager")
)

(defrule
(current-age == feudal-age)
(unit-type-count-total villager < feudal-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training 13 th Century Villager")
)

(defrule
(current-age >= castle-age)
(not(not (goal water-map 0)))
(unit-type-count-total villager < villager-pop)
(can-train villager)
=>
(train villager)
)

(defrule
(current-age >= castle-age)
(not (goal water-map 0))
(unit-type-count-total villager < villager-pop-watermap)
(can-train villager)
=>
(train villager)
)

(defrule				;The AI cannot handle more than 100 villagers
(unit-type-count villager > 100)	;The extra villagers will just stand idle.
=>
(delete-unit villager)
)

;====Sheep

;AIs cannot gather from trained sheep.

;====Priests

;EDIT! More selective priest training
(defrule
(goal priest-goal for-relics)
(unit-type-count-total monk < 2)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-healing)
(unit-type-count-total monk < 4)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count-total monk < 6)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

;====Trade Carts are in the bottom of the AI

;==========================<<<<<<<<<<Military Training>>>>>>>>>>===========================

(defrule
(goal army-type-goal 0)
(unit-type-count-total trebuchet < tiny-pop)
;(goal unit-upgrades-complete-goal 1)
(not	(town-under-attack))
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(current-age == feudal-age)
(can-train battering-ram-line)
(or	(unit-type-count-total battering-ram-line < 1)
	(and	(enemy-buildings-in-town)
		(unit-type-count battering-ram-line < miniscule-pop)))
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

(defrule
(current-age == castle-age)
(can-train battering-ram-line)
(unit-type-count-total battering-ram-line < tiny-pop)
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

;====Strategy 1:

;==12/13th Century training:

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total skirmisher-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 825)
(wood-amount >= 235)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total skirmisher-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < small-pop)))
(can-train skirmisher-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train skirmisher-line))

;13th century

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total skirmisher-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total skirmisher-line < miniscule-pop))
(can-train skirmisher-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(or	(and	(unit-type-count-total archer-line < large-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < medium-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-man-at-arms < large-pop)
(can-train new-man-at-arms)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-man-at-arms))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total foot-knight < large-pop)
(can-train foot-knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train foot-knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < medium-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;City Rights (only Arbalests change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(or	(and	(unit-type-count-total archer-line < half-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < large-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Councils (Militia and Lancers change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < large-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;Municipal Storehouses (only Knightly Infantry change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-man-at-arms < half-pop)
(can-train new-man-at-arms)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-man-at-arms))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total foot-knight < half-pop)
(can-train foot-knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train foot-knight))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < medium-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-man-at-arms < miniscule-pop)
(can-train new-man-at-arms)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-man-at-arms))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total foot-knight < miniscule-pop)
(can-train foot-knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train foot-knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total camel-line < miniscule-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;City Rights (only Pikemen and Light Cavalry change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;City Councils (only Militia change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;Municipal Storehouses (Pikemen and Light Cavalry change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;====Strategy 2:

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total skirmisher-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 825)
(wood-amount >= 235)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train spearman-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 200)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train spearman-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < tiny-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < miniscule-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < large-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < large-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train archer-line)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < medium-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < medium-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

;City Rights (only Reichsritters change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < half-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

;City Councils (only Ministeriales and Mounted Crossbowmen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < large-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

;Municipal Storehouses (only Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total reichsritter < miniscule-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train archer-line)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < miniscule-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

;City Rights (only Militia and Light Cavalry change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;City Councils (only Pikemen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;Municipal Storehouses (Pikemen and Light Cavalry change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;Other

;(defrule
;(unit-type-count-total mangonel-line < miniscule-pop)
;(can-train mangonel-line)
;;(goal unit-upgrades-complete-goal 1)
;=>
;(train mangonel-line))

;================================<<<<<<<<<<Escrow>>>>>>>>>>================================

;Escrow:

;turn escrow-goal on if escrow is desired
;use escrow for immediate researches (determined if the unit-upgrades-complete-goal is met)
;use a smaller escrow for advancing to the next age

;never use escrow for wood or stone:

(defrule
(true)
=>
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(disable-self)
)

;====Escrow Goal: 0

(defrule
(goal escrow-goal 0)
=>
(set-escrow-percentage food 0)
(set-escrow-percentage gold 0)
(release-escrow food)
(release-escrow gold)
)

;====Town Under Attack:

     ;never use escrow when under attack

(defrule
(town-under-attack)
(players-military-population any-enemy > 12)
(military-population < 15)
=>
(set-goal escrow-goal 0)
)

;====12th century:

     ;use escrow during advance to 13th century to prepare for 13th century researches

(defrule
(current-age == dark-age)
=>
(set-goal unit-upgrades-complete-goal 1)
(set-goal escrow-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == to-13-century)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====13th century:

     ;turn off escrow immediately if going for a flush
     ;turn off escrow when 13th century researches are met
     ;use escrow during advance to 14th century to prepare for 14th century researches

(defrule
(current-age == feudal-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-crossbow)
(research-completed ri-light-cavalry)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 2)
(research-completed ri-long-swordsman)
(research-completed ri-elite-skirmisher)
(research-completed ri-light-cavalry)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(current-age == feudal-age)
(goal unit-upgrades-complete-goal 1)
(goal aggressive-goal defensive)
(goal escrow-goal 0)
=>
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 4)
(set-escrow-percentage gold 3)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 13-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-14-century)
=>
(set-escrow-percentage food 7)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====14th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 14th century researches are met
     ;use escrow to save up resources for 15th century
     ;use escrow during advance to 15th century to prepare for 15th century researches

(defrule
(current-age == castle-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(current-age == castle-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 30)
=>
(set-escrow-percentage food 14)
(set-escrow-percentage gold 10)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-light-cavalry)
(research-completed ri-crossbow)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 2)
(research-completed ri-long-swordsman)
(research-completed ri-light-cavalry)
(research-completed ri-elite-skirmisher)
(research-completed ri-elite-mangudai)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(current-age == castle-age)
(goal unit-upgrades-complete-goal 1)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(chat-local-to-self "castle unit upgrades complete")
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 12)
(set-escrow-percentage gold 9)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 14-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-15-century)
(goal aggressive-goal defensive)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 8)
(set-goal escrow-goal 1)
(disable-self)
)

;====15th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 15th century researches are met

(defrule
(current-age == imperial-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == 15-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(current-age == imperial-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(set-escrow-percentage food 15)
(set-escrow-percentage gold 12)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 1)
(research-completed ri-halberdier)
(research-completed ri-elite-chu-ko-nu)
(research-completed my-unique-research)
(research-completed ri-heavy-camel)
(research-completed pc-bow-practise)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 2)
(research-completed ri-halberdier)
(research-completed ri-elite-mangudai)
(research-completed my-unique-research)
(research-completed ri-ordonnance-companies)
(research-completed pc-chivalric-order)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal escrow-goal 1)
(current-age == imperial-age)
(goal unit-upgrades-complete-goal 1)
=>
(chat-local-to-self "imperial unit upgrades complete")
(set-goal escrow-goal 0)
)

(defrule
(current-age >= feudal-age)
(goal escrow-goal 0)
=>
(chat-to-player my-player-number "escrow"))

;====Release Extra Escrow

(defrule
(current-age == feudal-age)
(or	(escrow-amount food > 800)
	(and	(and	(military-population < 30)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 200)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == feudal-age)
(or	(escrow-amount gold > 600)
	(and	(and	(military-population < 30)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 150)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == castle-age)
(or	(escrow-amount food > 1000)
	(and	(and	(military-population < 40)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 500)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == castle-age)
(or	(escrow-amount gold > 800)
	(and	(and	(military-population < 40)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 400)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == imperial-age)
(or	(escrow-amount food > 1500)
	(and	(and	(military-population < 50)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 800)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == imperial-age)
(or	(escrow-amount gold > 1200)
	(and	(and	(military-population < 50)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 600)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

;================================<<<<<<<<<<Walls>>>>>>>>>>================================


(defrule
(true)
=>
(set-goal wall BUILD-WALL)
(disable-self)
)

(defrule
(goal water-map 0)
(not (map-type fortress))
(not (map-type arena))
(not(map-size small))
(not(map-size tiny))
(unit-type-count gate == 0)
(game-time < 300)
=>
(enable-wall-placement 2)	
;(disable-self)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(game-time > 300)
(can-afford-complete-wall 2 stone-wall-line)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower > 0)
(military-population > 35)
=>
(build-wall 2 stone-wall-line)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(game-time > 300)
(goal wall BUILD-WALL)
(building-type-count-total gate < 8)
(can-build-gate 2)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower > 0)
(military-population > 35)
=>
(build-gate 2)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(town-under-attack)
=>
(set-goal wall DONT-BUILD-WALL)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall DONT-BUILD-WALL)
(not	(town-under-attack))
(military-population > 15)
=>
(set-goal wall BUILD-WALL)
)

;small
(defrule
(or(map-size small)
(map-size tiny))
(goal wall BUILD-WALL)
=>
(set-goal wall DONT-BUILD-WALL)
(disable-self)
)

#end-if
#end-if
#end-if
#end-if

#load-if-defined MONGOL-CIV

;==========================================================================================
;I                                                                                        I
;I                                  AUSTRIAN CIVILIZATION                                 I
;I                                                                                        I
;==========================================================================================

(defrule
(game-time > 15)
=>
(chat-local-to-self "Austrian civilization detected")
(disable-self))

;====<<<Starting Defconsts>>>====

;===========================<<<<<<<<<<Decide Strategy>>>>>>>>>>===========================

(defrule
(true)
=>
(set-goal strategy-goal 0)
(generate-random-number 100)
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 0)
(random-number <= 50)
=>
(set-goal strategy-goal 1) ;Hausmacht
(chat-to-player my-player-number "Strategy 1: Hausmacht")
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 50)
(random-number <= 100)
=>
(set-goal strategy-goal 2) ;Romzug
(chat-to-player my-player-number "Strategy 2: Romzug")
(disable-self)
)

;=============================<<<<<<<<<<Town Center>>>>>>>>>>==============================

;Building a town center is the most important action for an AI, especially if the AI does
;not have one.

(defrule
(building-type-count town-center < 1)
(unit-type-count villager > 2)
=>
(chat-to-player my-player-number "increase town size for town center")
(set-strategic-number sn-maximum-town-size 50)
(set-escrow-percentage wood 100)
(set-escrow-percentage stone 100)
)

(defrule
(building-type-count town-center < 1)
(can-build-with-escrow town-center)
=>
(release-escrow wood)
(release-escrow stone)
(build town-center)
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(chat-to-player every-ally "I'm rebuilding my town away from my base.")
(chat-to-player every-ally "Protect me!")
(set-strategic-number sn-maximum-food-drop-distance 25)
)

(defrule
(unit-type-count villager >= 25)
(building-type-count town-center < 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 42)
(building-type-count town-center < 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 50)
(building-type-count town-center < 4)
(building-type-count castle >= 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 55)
(building-type-count town-center < 5)
(building-type-count castle >= 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 65)
(building-type-count town-center < 7)
(building-type-count castle >= 4)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 75)
(building-type-count town-center < 10)
(building-type-count castle >= 5)
(can-build town-center)
=>
(build town-center)
)

;===============================<<<<<<<<<<Research>>>>>>>>>>===============================

;====Age Advancement

(defrule
(can-research feudal-age)
(or	(unit-type-count villager >= 38)
	(food-amount >= 1000))
(unit-type-count-total villager >= 10)
=>
(research feudal-age)
(set-strategic-number sn-current-age to-13-century)
)

(defrule
(can-research-with-escrow castle-age)
(or	(unit-type-count villager >= 55)
	(food-amount >= 1300))
(unit-type-count villager >= 35)
=>
(release-escrow food)
(release-escrow gold)
(research castle-age)
(set-strategic-number sn-current-age to-14-century)
)

(defrule
(can-research-with-escrow imperial-age)
(or	(unit-type-count-total villager > 75)
	(food-amount >= 1400))
(unit-type-count villager >= 60)
=>
(release-escrow food)
(release-escrow gold)
(research imperial-age)
(set-strategic-number sn-current-age to-15-century)
)

;====Policy decisions

;If Strategy 1

(defrule
(goal strategy-goal 1)
(current-age >= castle-age)
(can-research-with-escrow au-hausmacht)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research hausmacht")
(research au-hausmacht)
)

;If Strategy 2

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(can-research-with-escrow au-romzug)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research romzug")
(research au-romzug)
)

; -- end policy decisions --

;DARK AGE START and FEUDAL age START
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START

;Explore to find food at the beginning of the game

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 50); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 0)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 5)
(disable-self)
)

;Stop exploring when food is found

(defrule
(or	(resource-found food)
	(or	(not	(sheep-and-forage-too-far))
		(building-type-count-total mill > 0)))
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 0); to stop exploring
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 0)
(disable-self)
)

;- dark age agatherering--
(defrule
(unit-type-count villager < 8)
=>
(set-strategic-number sn-food-gatherer-percentage 100)
(set-strategic-number sn-wood-gatherer-percentage 0)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 8)
(unit-type-count villager < 10)
=>
(set-strategic-number sn-food-gatherer-percentage 90)
(set-strategic-number sn-wood-gatherer-percentage 10)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 10)
(unit-type-count villager < 15)
=>
(set-strategic-number sn-food-gatherer-percentage 70)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 15)
(unit-type-count villager < 20)
=>
(set-strategic-number sn-food-gatherer-percentage 65)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 20)
(unit-type-count villager < 25)
=>
(set-strategic-number sn-food-gatherer-percentage 52)
(set-strategic-number sn-wood-gatherer-percentage 48)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 25)
(unit-type-count villager < 30)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 4)
)

(defrule
(unit-type-count villager >= 30)
(unit-type-count villager < 35)
=>
(set-strategic-number sn-food-gatherer-percentage 41)
(set-strategic-number sn-wood-gatherer-percentage 52)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
(unit-type-count villager >= 35)
(unit-type-count villager < 43)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(food-amount < 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 48)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
(food-amount >= 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
(food-amount < 800)
(gold-amount >= 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(current-age == dark-age)
(strategic-number sn-current-age == to-13-century)
(building-type-count barracks > 0)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 32)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 19)
)

;- Feudal age agatherering--

(defrule
(civilian-population < 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population < 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 34)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

;------



(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)


(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 900))
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 46)
(set-strategic-number sn-wood-gatherer-percentage 37)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population >= 50)
(wood-amount > 1000)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 53)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 7)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(strategic-number sn-stone-gatherer-percentage == 7)
(can-build farm)
=>
(build farm)
(chat-local-to-self "build extra farms")
)

;==============================<<<<<<<<<<Buildings>>>>>>>>>>===============================

;EDIT! Only build a house right when it is needed by checking for a smaller headroom

(defrule
(current-age == dark-age)
(housing-headroom < 3)
(population-headroom > 3)
(can-build house)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age == dark-age)
(housing-headroom < 5)
(population-headroom > 3)
(can-build house)
(building-type-count barracks > 0)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age >= feudal-age)
(housing-headroom < 8)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
(building-type-count archery-range > 0)
=>
(build house)
)

;end EDIT

(defrule
;(not(death-match-game))
(or	(and	(dropsite-min-distance food > -1)
		(game-time > 90))
	(or	(unit-type-count male-forager > 0)
		(or	(unit-type-count female-forager > 0)
			(unit-type-count villager > 10))))	;EDIT! In case food isn't found
(building-type-count-total mill < 1)
(can-build mill)
=>
(build mill)
;(chat-local-to-self "build first mill")
)

;---dark buildings

(defrule
(building-type-count-total lumber-camp >= 1)
(dropsite-min-distance food > -1)
(or	(unit-type-count male-hunter >= 1)
	(or	(unit-type-count female-hunter >= 1)
		(dropsite-min-distance food > 5)))
(building-type-count-total mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(build mill)
)

#load-if-defined SCANDANAVIA-MAP

(defrule
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(chat-to-player my-player-number "build Scandinavia mill")
(build mill)
)

#end-if

(defrule
(game-time > 90)
(building-type-count-total lumber-camp < 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 4)
(can-build farm)
(dropsite-min-distance food > 5)
=>
(build farm)
)

(defrule
(building-type-count-total lumber-camp >= 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 8)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count mining-camp >= 1) ;EDIT - changed lumber-camp to mining-camp
(idle-farm-count < 3)
(unit-type-count villager >= 25)
(unit-type-count villager <= dark-villager-count)
(building-type-count farm < 20)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age == feudal-age)
(building-type-count-total farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age == feudal-age)
(building-type-count-total farm < 40)
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(or	(building-type-count farm < 15)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 18))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-horse-collar)
(or	(building-type-count farm < 20)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 25))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-heavy-plow)
(or	(building-type-count farm < 25)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 30))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-crop-rotation)
(or	(building-type-count farm < 40)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 50))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

;EDIT! Better lumber camp construction rules

(defrule
(or	(not	(death-match-game))
	(or	(game-time >= 300)
		(building-type-count-total mill > 0)))
(or	(unit-type-count villager >= 12)
	(wood-amount > 500))
(building-type-count lumber-camp < 1)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(building-type-count-total lumber-camp < 3)
(dropsite-min-distance wood > 5)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 5)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 8)
(strategic-number sn-camp-max-distance >= 50)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 12)
(strategic-number sn-camp-max-distance >= 70)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(strategic-number sn-camp-max-distance >= 255)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
(disable-self)
)

(defrule
(timer-triggered retreat-lumber-camp-timer)
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
)

;Better rules for mining camps:

(defrule
(or	(unit-type-count villager >= 25)
	(or	(gold-amount < 10)
		(current-age >= feudal-age)))
(building-type-count-total mining-camp < 1)
(can-build mining-camp)
(dropsite-min-distance gold > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(or	(unit-type-count villager >= 38)
	(and	(current-age >= feudal-age)
		(or	(building-type-count-total market > 0)
			(building-type-count-total siege-workshop > 0))))
(building-type-count mining-camp < 2)
(can-build mining-camp)
(dropsite-min-distance stone > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(current-age >= feudal-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 3)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

;end EDIT

(defrule
(can-build castle)
(or	(building-type-count-total town-center >= 3)
	(or	(and	(building-type-count-total town-center >= 2)
			(stone-amount >= 750))
		(current-age <= feudal-age)))
(building-type-count castle < 1)
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(or	(unit-type-count villager >= 25)
	(wood-amount > 275))
(can-build barracks)
(building-type-count-total barracks < 1)
(or	(building-type-count-total mining-camp > 0)
	(and	(wood-amount > 275)
		(building-type-count-total lumber-camp > 0)))
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build barracks)
(building-type-count-total barracks < 2)
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build barracks)
(building-type-count-total barracks < 4)
=>
(build barracks)
)

(defrule
(or	(unit-type-count villager >= 30)
	(and	(current-age >= feudal-age)
		(building-type-count barracks > 0)))
(can-build archery-range)
(building-type-count-total archery-range < 1)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build archery-range)
(building-type-count-total archery-range < 2)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build archery-range)
(building-type-count-total archery-range < 4)
=>
(build archery-range)
)

(defrule
(not(starting-age == post-imperial-age))
(wood-amount >= 210)
(building-type-count-total blacksmith < 1)
(can-build blacksmith)
=>
(build blacksmith)
)

(defrule
(can-build market)
(building-type-count-total market < 1)
(or	(building-type-count-total siege-workshop > 0)
	(goal aggressive-goal defensive))
=>
(build market)
(chat-local-to-self "build market")
)

(defrule
(or	(unit-type-count villager >= 40)
	(and	(building-type-count-total castle > 0)
		(unit-type-count villager > 30)))
(can-build stable)
(building-type-count-total stable < 1)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build stable)
(building-type-count-total stable < 2)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build stable)
(building-type-count-total stable < 4)
=>
(build stable)
)

(defrule
(or	(goal aggressive-goal aggressive)
	(or	(military-population >= 10)
		(wood-amount > 400)))
(building-type-count siege-workshop < 1)
(can-build siege-workshop)
=>
(build siege-workshop)
)

(defrule
(can-build watch-tower)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower < low-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= low-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
(building-type-count castle < 2)
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(can-build watch-tower)
(building-type-count castle > 1)
(building-type-count watch-tower < high-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= high-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(building-type-count castle >= 2)
(building-type-count bombard-tower < bombard-tower-count)
(can-build bombard-tower)
=>
(build bombard-tower))

(defrule
(building-type-count monastery < 1)
(can-build monastery)
=>
(build monastery)
)

(defrule
(not(starting-age == post-imperial-age))
(building-type-count university < 1)
(building-type-count town-center >= 2)
(building-type-count barracks >= 1)
(building-type-count market >= 1)
(building-type-count archery-range >= 1)
(can-build university)
=>
(build university)
)

#end-if
#end-if
#end-if

#load-if-not-defined DARK-AGE-START

;====Researches

(defrule
(unit-type-count villager >= 42)
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 46)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

;====Buildings

(defrule
(current-age >= feudal-age)
(housing-headroom < 6)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
=>
(build house)
)

(defrule
(wood-amount >= 500)
(building-type-count blacksmith >= 1)
(building-type-count barracks >= 1)
(current-age  >= feudal-age)
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 3)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 35)
(build mill)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age  >= feudal-age)
(building-type-count farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age >= feudal-age)
(building-type-count farm < 40)
(can-build farm)
=>
(build farm)
)

#end-if

;====Princely Court Technologies

(defrule
(can-research-with-escrow pc-bow-practise)
(goal strategy-goal 1)
=>
(release-escrow food)
(release-escrow gold)
(research pc-bow-practise)
)

(defrule
(can-research-with-escrow pc-chivalric-order)
(goal strategy-goal 2)
=>
(release-escrow food)
(release-escrow gold)
(research pc-chivalric-order)
)

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-court))

(defrule
(population >= three-quarters-pop)
(can-research-with-escrow city-councils-court)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-court))

(defrule
(population >= full-pop)
(can-research-with-escrow storehouses-court)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-court))

(defrule
(building-type-count-total castle > 0)
(can-research-with-escrow roman-law-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research roman-law-court))

(defrule
(building-type-count-total castle > 1)
(can-research-with-escrow representation-court)
=>
(release-escrow food)
(release-escrow gold)
(research representation-court))

(defrule
(building-type-count-total castle > 2)
(can-research-with-escrow fourth-estate-court)
=>
(release-escrow food)
(release-escrow gold)
(research fourth-estate-court))

(defrule
(unit-type-count religious-units > 2)
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(can-research-with-escrow pc-court-clergy)
=>
(release-escrow food)
(release-escrow gold)
(research pc-court-clergy))

; -- end princely court techs

;Expensive techs

(defrule
(can-research-with-escrow my-unique-unit-upgrade)
=>
(release-escrow food)
(release-escrow gold)
(research my-unique-unit-upgrade))

(defrule
(can-research-with-escrow ri-elite-chu-ko-nu)
=>
(release-escrow food)
(release-escrow gold)
(research ri-elite-chu-ko-nu))

(defrule
(can-research-with-escrow ri-champion)
(unit-type-count 880 > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-champion))

(defrule
(can-research-with-escrow my-unique-research)
=>
(release-escrow gold)
(research my-unique-research))

(defrule
(unit-type-count knight >= miniscule-pop)
(can-research-with-escrow ri-ordonnance-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ordonnance-companies))

;Normal techs

(defrule
(unit-type-count villager >= 4)	;EDIT! Villager production is more important than loom at the beginning of the game.
(can-research ri-loom)
(or	(food-amount < 20)
	(or	(unit-type-count villager >= dark-villager-count)
		(current-age >= feudal-age))) ;end EDIT
=>
(research ri-loom)
)

(defrule
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(building-type-count farm > 10)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

(defrule
(or	(unit-type-count-total militiaman-line >= miniscule-pop)
	(current-age >= feudal-age))
(can-research ri-man-at-arms)
(or	(unit-type-count-total villager >= 37)
	(building-type-count archery-range > 0))
=>
(research ri-man-at-arms)
)

(defrule
(unit-type-count villager >= 50)
(can-research ri-gold-mining)
=>
(research ri-gold-mining)
)

(defrule
(unit-type-count villager >= 60)
(can-research ri-stone-mining)
=>
(research ri-stone-mining)
)

(defrule
(can-research-with-escrow ri-long-swordsman)
=>
(release-escrow food)
(research ri-long-swordsman)
)

(defrule
(or	(unit-type-count-total spearman > 5)
	(goal army-type-goal late-game))
(can-research-with-escrow ri-pikeman)
=>
(release-escrow food)
(research ri-pikeman)
)

(defrule
(or	(unit-type-count-total archer-line > 5)
	(goal strategy-goal 1))
(can-research-with-escrow ri-crossbow)
=>
(release-escrow food)
(research ri-crossbow)
)

(defrule
(can-research-with-escrow ri-light-cavalry)
=>
(release-escrow food)
(research ri-light-cavalry)
)

(defrule
(or	(goal strategy-goal 2)
	(goal army-type-goal late-game))
(can-research-with-escrow ri-elite-skirmisher)
=>
(release-escrow gold)
(research ri-elite-skirmisher))

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-bloodlines)
=>
(research ri-bloodlines)
)

(defrule
(unit-type-count archer-line >= miniscule-pop)
(can-research-with-escrow ri-crossbow-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow-companies))

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research ri-fletching)
=>
(research ri-fletching)
)

(defrule
(or	(research-completed ri-scale-mail)
	(research-completed ri-scale-barding))
(can-research ri-forging)
=>
(research ri-forging)
)

(defrule
(research-completed ri-fletching)
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
)

(defrule
(research-completed ri-forging)
(player-in-game any-ally)
(can-research ri-cartography)
=>
(research ri-cartography)
)

(defrule
(building-type-count-total castle >= 1)
(can-research-with-escrow ri-murder-holes)
=>
(release-escrow food)
(research ri-murder-holes)
)

(defrule
(civilian-population >= 60)
(can-research-with-escrow ri-hand-cart)
=>
(release-escrow food)
(research ri-hand-cart)
)

(defrule
(civilian-population >= 60)
(can-research ri-bow-saw)
=>
(research ri-bow-saw)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-gold-shaft-mining)
=>
(release-escrow food)
(research ri-gold-shaft-mining)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-stone-shaft-mining)
=>
(release-escrow food)
(research ri-stone-shaft-mining)
)

(defrule
(can-research ri-heavy-plow)
=>
(research ri-heavy-plow)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow ri-iron-casting)
=>
(release-escrow food)
(research ri-iron-casting)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count archery-range > 0))
(can-research-with-escrow ri-bodkin-arrow)
=>
(release-escrow food)
(research ri-bodkin-arrow)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
)

(defrule
(unit-type-count 912 >= miniscule-pop)
(can-research-with-escrow ri-chain-barding)
=>
(release-escrow food)
(research ri-chain-barding)
)

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research-with-escrow ri-chain-mail)
=>
(release-escrow food)
(research ri-chain-mail)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow ri-mercenaries)
=>
(release-escrow food)
(research ri-mercenaries)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-thumb-ring)
=>
(release-escrow food)
(research ri-thumb-ring))

(defrule
(can-research ri-ballistics)
=>
(research ri-ballistics)
)

(defrule
(unit-type-count religious-units >= 2)
(can-research ri-sanctity)
=>
(research ri-sanctity)
)

(defrule
(building-type-count watch-tower >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-guard-tower)
=>
(research ri-guard-tower))

(defrule
(research-completed ri-chain-mail)
(player-in-game any-ally)
(can-research ri-caravan)
=>
(research ri-caravan)
)

(defrule
(or	(research-completed ri-bodkin-arrow)
	(building-type-count-total castle > 0))
(can-research ri-town-watch)
=>
(research ri-town-watch)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-tracking)
=>
(research ri-tracking)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-squires)
=>
(research ri-squires)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(not	(research-available ri-bloodlines))
(can-research ri-husbandry)
=>
(research ri-husbandry)
)

(defrule
(goal strategy-goal 1)
(can-research-with-escrow ri-heavy-camel)
=>
(release-escrow food)
(release-escrow gold)
(research ri-heavy-camel))

(defrule
(can-research-with-escrow ri-halberdier)
=>
(release-escrow food)
(release-escrow gold)
(research ri-halberdier))

(defrule
(can-research-with-escrow ri-conscription)
=>
(release-escrow food)
(release-escrow gold)
(research ri-conscription))

(defrule
(can-research-with-escrow ri-two-man-saw)
=>
(release-escrow food)
(research ri-two-man-saw))

(defrule
(can-research-with-escrow ri-capped-ram)
=>
(release-escrow food)
(research ri-capped-ram))

(defrule
(unit-type-count battering-ram-line >= miniscule-pop)
(can-research-with-escrow ri-siege-ram)
=>
(release-escrow food)
(research ri-siege-ram))

(defrule
(building-type-count guard-tower >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-keep)
=>
(release-escrow food)
(research ri-keep))

(defrule
(building-type-count keep >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-bombard-tower)
=>
(release-escrow food)
(research ri-bombard-tower))

(defrule
(can-research-with-escrow ri-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-onager))

(defrule
(can-research-with-escrow ri-siege-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-siege-onager))

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research-with-escrow ri-bracer)
=>
(release-escrow food)
(release-escrow gold)
(research ri-bracer)
)

(defrule
(building-type-count-total barracks > 0)
(can-research-with-escrow ri-plate-mail)
=>
(release-escrow food)
(research ri-plate-mail)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow ri-blast-furnace)
=>
(release-escrow food)
(release-escrow gold)
(research ri-blast-furnace)
)

(defrule
(can-research-with-escrow ri-ring-archer-armor)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ring-archer-armor))

(defrule
(can-research-with-escrow ri-siege-engineers)
=>
(release-escrow food)
(research ri-siege-engineers))

(defrule
(not	(research-available ri-blast-furnace))
(can-research-with-escrow ri-guilds)
=>
(release-escrow food)
(release-escrow gold)
(research ri-guilds))

(defrule
(research-completed au-hausmacht)
(unit-type-count-total chu-ko-nu-line > 0)
(can-research-with-escrow ri-parthian-tactics)
=>
(release-escrow food)
(research ri-parthian-tactics)
)

(defrule
(or	(research-completed ri-bracer)
	(or	(building-type-count-total watch-tower > high-tower-count)
		(building-type-count-total castle > 1)))
(current-age >= imperial-age)
(can-research ri-town-patrol)
=>
(research ri-town-patrol)
)

(defrule
(military-population >= 50)
(can-research-with-escrow ri-chemistry)
=>
(release-escrow food)
(release-escrow gold)
(research ri-chemistry)
)

(defrule
(players-unit-type-count any-enemy religious-units >= 5)
(can-research ri-heresy)
=>
(research ri-heresy)
)

(defrule
(players-unit-type-count any-enemy religious-units >= 10)
(can-research-with-escrow ri-faith)
=>
(release-escrow food)
(release-escrow gold)
(research ri-faith)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-atonement)
=>
(release-escrow gold)
(research ri-atonement)
)

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(unit-type-count religious-units >= 2)
(can-research-with-escrow ri-fervor)
=>
(release-escrow gold)
(research ri-fervor)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-redemption)
=>
(release-escrow gold)
(research ri-redemption)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-illumination)
=>
(research ri-illumination)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-block-printing)
=>
(release-escrow gold)
(research ri-block-printing)
)

;==========================<<<<<<<<<<Civilian Training>>>>>>>>>>===========================

;====Villagers

(defrule
(unit-type-count-total villager < dark-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training Dark Age Villager")
)

(defrule
(current-age == feudal-age)
(unit-type-count-total villager < feudal-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training 13 th Century Villager")
)

(defrule
(current-age >= castle-age)
(not(not (goal water-map 0)))
(unit-type-count-total villager < villager-pop)
(can-train villager)
=>
(train villager)
)

(defrule
(current-age >= castle-age)
(not (goal water-map 0))
(unit-type-count-total villager < villager-pop-watermap)
(can-train villager)
=>
(train villager)
)

(defrule				;The AI cannot handle more than 100 villagers
(unit-type-count villager > 100)	;The extra villagers will just stand idle.
=>
(delete-unit villager)
)

;====Sheep

;AIs cannot gather from trained sheep.

;====Priests

;EDIT! More selective priest training
(defrule
(goal priest-goal for-relics)
(unit-type-count-total monk < 2)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
;(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count-total monk < 4)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(or	(players-unit-type-count every-enemy scout-cavalry-line < 10)
	(unit-type-count monk < 2))
=>
(train monk)
)

;====Trade Carts are in the bottom of the AI

;==========================<<<<<<<<<<Military Training>>>>>>>>>>===========================

(defrule
(goal army-type-goal 0)
(unit-type-count-total trebuchet < tiny-pop)
;(goal unit-upgrades-complete-goal 1)
(not	(town-under-attack))
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(current-age == feudal-age)
(can-train battering-ram-line)
(or	(unit-type-count-total battering-ram-line < 1)
	(and	(enemy-buildings-in-town)
		(unit-type-count battering-ram-line < miniscule-pop)))
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

(defrule
(current-age == castle-age)
(can-train battering-ram-line)
(unit-type-count-total battering-ram-line < tiny-pop)
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

;====Strategy 1:

;==12/13th Century training:

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

;13th century

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total scout-cavalry-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total scout-cavalry-line < tiny-pop))
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < miniscule-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total mangudai-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total mangudai-line < miniscule-pop))
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

;==14/15th Century

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total chu-ko-nu-line < half-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train chu-ko-nu-line)
=>
(train chu-ko-nu-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total mangudai < medium-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < small-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < small-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;City Rights (Cuman Auxilaries, Light Cavalry, and Gefolgsmanner don't change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < medium-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;City Councils (Cuman Auxilaries, Lancers, and Militia don't change from City Rights)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total mangudai < large-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

;Municipal Storehouses (Cuman Auxilaries, Light Cavalry, and Gefolgsmanner don't change from City Councils)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < large-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < large-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < medium-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total chu-ko-nu-line < tiny-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train chu-ko-nu-line)
=>
(train chu-ko-nu-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total mangudai < miniscule-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total camel-line < miniscule-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;City Rights (Militia and Pikemen change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;City Councils (Skirmishers change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

;Municipal Storehouses (Militia and Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;====Strategy 2:

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total skirmisher-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 825)
(wood-amount >= 235)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total skirmisher-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < small-pop)))
(can-train skirmisher-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train skirmisher-line))

;13th century

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total skirmisher-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total skirmisher-line < small-pop))
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total scout-cavalry-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total scout-cavalry-line < tiny-pop))
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < miniscule-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total mangudai-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total mangudai-line < miniscule-pop))
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

;==14/15th Century

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total mangudai < large-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < large-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed ri-elite-mangudai)
=>
(train mangudai-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < large-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;City Rights (only Ministeriales change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < half-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

;City Councils (only Light Cavalry and Militia change from City Rights)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;Municipal Storehouses (only Gefolgsmanner change from City Councils)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total mangudai < half-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < half-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed ri-elite-mangudai)
=>
(train mangudai-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < large-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < medium-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total mangudai < miniscule-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train mangudai-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total reichsritter < miniscule-pop)
(can-train mangudai-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed ri-elite-mangudai)
=>
(train mangudai-line))

;City Rights (Militia and Pikemen change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;City Councils (Skirmishers change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

;Municipal Storehouses (Militia and Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;Other

;(defrule
;(unit-type-count-total mangonel-line < miniscule-pop)
;(can-train mangonel-line)
;;(goal unit-upgrades-complete-goal 1)
;=>
;(train mangonel-line))

;================================<<<<<<<<<<Escrow>>>>>>>>>>================================

;Escrow:

;turn escrow-goal on if escrow is desired
;use escrow for immediate researches (determined if the unit-upgrades-complete-goal is met)
;use a smaller escrow for advancing to the next age

;never use escrow for wood or stone:

(defrule
(true)
=>
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(disable-self)
)

;====Escrow Goal: 0

(defrule
(goal escrow-goal 0)
=>
(set-escrow-percentage food 0)
(set-escrow-percentage gold 0)
(release-escrow food)
(release-escrow gold)
)

;====Town Under Attack:

     ;never use escrow when under attack

(defrule
(town-under-attack)
(players-military-population any-enemy > 12)
(military-population < 15)
=>
(set-goal escrow-goal 0)
)

;====12th century:

     ;use escrow during advance to 13th century to prepare for 13th century researches

(defrule
(current-age == dark-age)
=>
(set-goal unit-upgrades-complete-goal 1)
(set-goal escrow-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == to-13-century)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====13th century:

     ;turn off escrow immediately if going for a flush
     ;turn off escrow when 13th century researches are met
     ;use escrow during advance to 14th century to prepare for 14th century researches

(defrule
(current-age == feudal-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-crossbow)
(research-completed ri-light-cavalry)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 2)
(research-completed ri-long-swordsman)
(research-completed ri-elite-skirmisher)
(research-completed ri-light-cavalry)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(current-age == feudal-age)
(goal unit-upgrades-complete-goal 1)
(goal aggressive-goal defensive)
(goal escrow-goal 0)
=>
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 4)
(set-escrow-percentage gold 3)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 13-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-14-century)
=>
(set-escrow-percentage food 7)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====14th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 14th century researches are met
     ;use escrow to save up resources for 15th century
     ;use escrow during advance to 15th century to prepare for 15th century researches

(defrule
(current-age == castle-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(current-age == castle-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 30)
=>
(set-escrow-percentage food 11)
(set-escrow-percentage gold 8)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-light-cavalry)
(research-completed ri-crossbow)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 2)
(research-completed ri-long-swordsman)
(research-completed ri-light-cavalry)
(research-completed ri-elite-skirmisher)
(research-completed ri-elite-mangudai)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(current-age == castle-age)
(goal unit-upgrades-complete-goal 1)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(chat-local-to-self "castle unit upgrades complete")
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 8)
(set-escrow-percentage gold 6)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 14-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-15-century)
(goal aggressive-goal defensive)
=>
(set-escrow-percentage food 8)
(set-escrow-percentage gold 6)
(set-goal escrow-goal 1)
(disable-self)
)

;====15th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 15th century researches are met

(defrule
(current-age == imperial-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == 15-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(current-age == imperial-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(set-escrow-percentage food 14)
(set-escrow-percentage gold 8)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 1)
(research-completed ri-halberdier)
(research-completed ri-elite-chu-ko-nu)
(research-completed my-unique-research)
(research-completed ri-heavy-camel)
(research-completed pc-bow-practise)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 2)
(research-completed ri-halberdier)
(research-completed ri-elite-mangudai)
(research-completed my-unique-research)
(research-completed ri-ordonnance-companies)
(research-completed pc-chivalric-order)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal escrow-goal 1)
(current-age == imperial-age)
(goal unit-upgrades-complete-goal 1)
=>
(chat-local-to-self "imperial unit upgrades complete")
(set-goal escrow-goal 0)
)

(defrule
(current-age >= feudal-age)
(goal escrow-goal 0)
=>
(chat-to-player my-player-number "escrow"))

;====Release Extra Escrow

(defrule
(current-age == feudal-age)
(escrow-amount food > 200)
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == feudal-age)
(escrow-amount gold > 150)
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == castle-age)
(escrow-amount food > 500)
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == castle-age)
(escrow-amount gold > 400)
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == imperial-age)
(escrow-amount food > 800)
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == imperial-age)
(escrow-amount gold > 600)
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

;================================<<<<<<<<<<Walls>>>>>>>>>>================================


(defrule
(true)
=>
(set-goal wall BUILD-WALL)
(disable-self)
)

(defrule
(goal water-map 0)
(not (map-type fortress))
(not (map-type arena))
(not(map-size small))
(not(map-size tiny))
(unit-type-count gate == 0)
(game-time < 300)
=>
(enable-wall-placement 2)	
;(disable-self)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(game-time > 300)
(can-afford-complete-wall 2 stone-wall-line)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower > 0)
(military-population > 35)
=>
(build-wall 2 stone-wall-line)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(game-time > 300)
(goal wall BUILD-WALL)
(building-type-count-total gate < 8)
(can-build-gate 2)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower > 0)
(military-population > 35)
=>
(build-gate 2)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(town-under-attack)
=>
(set-goal wall DONT-BUILD-WALL)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall DONT-BUILD-WALL)
(not	(town-under-attack))
(military-population > 15)
=>
(set-goal wall BUILD-WALL)
)

;small
(defrule
(or(map-size small)
(map-size tiny))
(goal wall BUILD-WALL)
=>
(set-goal wall DONT-BUILD-WALL)
(disable-self)
)

#end-if

;Bavarians

#load-if-defined CHINESE-CIV

;==========================================================================================
;I                                                                                        I
;I                                  BAVARIAN CIVILIZATION                                 I
;I                                                                                        I
;==========================================================================================

(defrule
(game-time > 15)
=>
(chat-local-to-self "Bavarian civilization detected")
(disable-self))

;===========================<<<<<<<<<<Decide Strategy>>>>>>>>>>===========================

(defrule
(true)
=>
(set-goal strategy-goal 0)
(generate-random-number 100)
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 0)
(random-number <= 50)
=>
(set-goal strategy-goal 1) ;Hausmacht
(chat-to-player my-player-number "Strategy 1: Hausmacht")
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 50)
(random-number <= 100)
=>
(set-goal strategy-goal 2) ;Romzug
(chat-to-player my-player-number "Strategy 2: Romzug")
(disable-self)
)

;=============================<<<<<<<<<<Town Center>>>>>>>>>>==============================

;Building a town center is the most important action for an AI, especially if the AI does
;not have one.

(defrule
(building-type-count town-center < 1)
(unit-type-count villager > 2)
=>
(chat-to-player my-player-number "increase town size for town center")
(set-strategic-number sn-maximum-town-size 50)
(set-escrow-percentage wood 100)
(set-escrow-percentage stone 100)
)

(defrule
(building-type-count town-center < 1)
(can-build-with-escrow town-center)
=>
(release-escrow wood)
(release-escrow stone)
(build town-center)
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(chat-to-player every-ally "I'm rebuilding my town away from my base.")
(chat-to-player every-ally "Protect me!")
(set-strategic-number sn-maximum-food-drop-distance 25)
)

(defrule
(unit-type-count villager >= 25)
(building-type-count town-center < 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 42)
(building-type-count town-center < 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 50)
(building-type-count town-center < 4)
(building-type-count castle >= 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 55)
(building-type-count town-center < 5)
(building-type-count castle >= 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 65)
(building-type-count town-center < 7)
(building-type-count castle >= 4)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 75)
(building-type-count town-center < 10)
(building-type-count castle >= 5)
(can-build town-center)
=>
(build town-center)
)

;===============================<<<<<<<<<<Research>>>>>>>>>>===============================

;====Age Advancement

(defrule
(can-research feudal-age)
(or	(unit-type-count villager >= 38)
	(food-amount >= 1000))
(unit-type-count-total villager >= 10)
=>
(research feudal-age)
(set-strategic-number sn-current-age to-13-century)
)

(defrule
(can-research-with-escrow castle-age)
(or	(unit-type-count villager >= 55)
	(food-amount >= 1300))
(unit-type-count villager >= 35)
=>
(release-escrow food)
(release-escrow gold)
(research castle-age)
(set-strategic-number sn-current-age to-14-century)
)

(defrule
(can-research-with-escrow imperial-age)
(or	(unit-type-count-total villager > 75)
	(food-amount >= 1400))
(unit-type-count villager >= 60)
=>
(release-escrow food)
(release-escrow gold)
(research imperial-age)
(set-strategic-number sn-current-age to-15-century)
)

;====Policy decisions

;If Strategy 1

(defrule
(goal strategy-goal 1)
(current-age >= castle-age)
(can-research-with-escrow ba-hausmacht)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research hausmacht")
(research ba-hausmacht)
)

;If Strategy 2

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(can-research-with-escrow ba-romzug)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research romzug")
(research ba-romzug)
)

; -- end policy decisions --

;DARK AGE START and FEUDAL age START
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START

;Explore to find food at the beginning of the game

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 50); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 0)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 5)
(disable-self)
)

;Stop exploring when food is found

(defrule
(or	(resource-found food)
	(or	(not	(sheep-and-forage-too-far))
		(building-type-count-total mill > 0)))
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 0); to stop exploring
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 0)
(disable-self)
)

;- dark age agatherering--
(defrule
(unit-type-count villager < 8)
=>
(set-strategic-number sn-food-gatherer-percentage 100)
(set-strategic-number sn-wood-gatherer-percentage 0)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 8)
(unit-type-count villager < 10)
=>
(set-strategic-number sn-food-gatherer-percentage 90)
(set-strategic-number sn-wood-gatherer-percentage 10)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 10)
(unit-type-count villager < 15)
=>
(set-strategic-number sn-food-gatherer-percentage 70)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 15)
(unit-type-count villager < 20)
=>
(set-strategic-number sn-food-gatherer-percentage 65)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 20)
(unit-type-count villager < 25)
=>
(set-strategic-number sn-food-gatherer-percentage 52)
(set-strategic-number sn-wood-gatherer-percentage 48)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 25)
(unit-type-count villager < 30)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 4)
)

(defrule
(unit-type-count villager >= 30)
(unit-type-count villager < 35)
=>
(set-strategic-number sn-food-gatherer-percentage 41)
(set-strategic-number sn-wood-gatherer-percentage 52)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
(unit-type-count villager >= 35)
(unit-type-count villager < 43)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(food-amount < 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 48)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
(food-amount >= 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
(food-amount < 800)
(gold-amount >= 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(current-age == dark-age)
(strategic-number sn-current-age == to-13-century)
(building-type-count barracks > 0)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 32)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 19)
)

;- Feudal age agatherering--

(defrule
(civilian-population < 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 39)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 13)
)

(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 41)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 13)
)

(defrule
(civilian-population < 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 34)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

;------



(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)


(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 900))
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 46)
(set-strategic-number sn-wood-gatherer-percentage 37)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population >= 50)
(wood-amount > 1000)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 53)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 7)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(strategic-number sn-stone-gatherer-percentage == 7)
(can-build farm)
=>
(build farm)
(chat-local-to-self "build extra farms")
)

;==============================<<<<<<<<<<Buildings>>>>>>>>>>===============================

;EDIT! Only build a house right when it is needed by checking for a smaller headroom

(defrule
(current-age == dark-age)
(housing-headroom < 3)
(population-headroom > 3)
(can-build house)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age == dark-age)
(housing-headroom < 5)
(population-headroom > 3)
(can-build house)
(building-type-count barracks > 0)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age >= feudal-age)
(housing-headroom < 8)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
(building-type-count archery-range > 0)
=>
(build house)
)

;end EDIT

(defrule
;(not(death-match-game))
(or	(and	(dropsite-min-distance food > -1)
		(game-time > 90))
	(or	(unit-type-count male-forager > 0)
		(or	(unit-type-count female-forager > 0)
			(unit-type-count villager > 10))))	;EDIT! In case food isn't found
(building-type-count-total mill < 1)
(can-build mill)
=>
(build mill)
;(chat-local-to-self "build first mill")
)

;---dark buildings

(defrule
(building-type-count-total lumber-camp >= 1)
(dropsite-min-distance food > -1)
(or	(unit-type-count male-hunter >= 1)
	(or	(unit-type-count female-hunter >= 1)
		(dropsite-min-distance food > 5)))
(building-type-count-total mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(build mill)
)

#load-if-defined SCANDANAVIA-MAP

(defrule
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(chat-to-player my-player-number "build Scandinavia mill")
(build mill)
)

#end-if

(defrule
(game-time > 90)
(building-type-count-total lumber-camp < 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 4)
(can-build farm)
(dropsite-min-distance food > 5)
=>
(build farm)
)

(defrule
(building-type-count-total lumber-camp >= 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 8)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count mining-camp >= 1) ;EDIT - changed lumber-camp to mining-camp
(idle-farm-count < 3)
(unit-type-count villager >= 25)
(unit-type-count villager <= dark-villager-count)
(building-type-count farm < 20)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age == feudal-age)
(building-type-count-total farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age == feudal-age)
(building-type-count-total farm < 40)
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(or	(building-type-count farm < 15)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 18))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-horse-collar)
(or	(building-type-count farm < 20)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 25))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-heavy-plow)
(or	(building-type-count farm < 25)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 30))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-crop-rotation)
(or	(building-type-count farm < 40)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 50))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

;EDIT! Better lumber camp construction rules

(defrule
(or	(not	(death-match-game))
	(or	(game-time >= 300)
		(building-type-count-total mill > 0)))
(or	(unit-type-count villager >= 12)
	(wood-amount > 500))
(building-type-count lumber-camp < 1)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(building-type-count-total lumber-camp < 3)
(dropsite-min-distance wood > 5)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 5)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 8)
(strategic-number sn-camp-max-distance >= 50)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 12)
(strategic-number sn-camp-max-distance >= 70)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(strategic-number sn-camp-max-distance >= 255)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
(disable-self)
)

(defrule
(timer-triggered retreat-lumber-camp-timer)
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
)

;Better rules for mining camps:

(defrule
(or	(unit-type-count villager >= 25)
	(or	(gold-amount < 10)
		(current-age >= feudal-age)))
(building-type-count-total mining-camp < 1)
(can-build mining-camp)
(dropsite-min-distance gold > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(or	(unit-type-count villager >= 38)
	(and	(current-age >= feudal-age)
		(or	(building-type-count-total market > 0)
			(building-type-count-total siege-workshop > 0))))
(building-type-count mining-camp < 2)
(can-build mining-camp)
(dropsite-min-distance stone > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(current-age >= feudal-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 3)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

;end EDIT

(defrule
(can-build castle)
(or	(building-type-count-total town-center >= 3)
	(or	(and	(building-type-count-total town-center >= 2)
			(stone-amount >= 750))
		(current-age <= feudal-age)))
(building-type-count castle < 1)
=>
(build castle)
)

(defrule
(or	(unit-type-count villager >= 25)
	(wood-amount > 275))
(can-build barracks)
(building-type-count-total barracks < 1)
(or	(building-type-count-total mining-camp > 0)
	(and	(wood-amount > 275)
		(building-type-count-total lumber-camp > 0)))
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build barracks)
(building-type-count-total barracks < 2)
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build barracks)
(building-type-count-total barracks < 4)
=>
(build barracks)
)

(defrule
(or	(unit-type-count villager >= 30)
	(and	(current-age >= feudal-age)
		(building-type-count barracks > 0)))
(can-build archery-range)
(building-type-count-total archery-range < 1)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build archery-range)
(building-type-count-total archery-range < 2)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build archery-range)
(building-type-count-total archery-range < 4)
=>
(build archery-range)
)

(defrule
(not(starting-age == post-imperial-age))
(wood-amount >= 210)
(building-type-count-total blacksmith < 1)
(can-build blacksmith)
=>
(build blacksmith)
)

(defrule
(can-build market)
(building-type-count-total market < 1)
(or	(building-type-count-total siege-workshop > 0)
	(goal aggressive-goal defensive))
=>
(build market)
(chat-local-to-self "build market")
)

(defrule
(or	(unit-type-count villager >= 40)
	(and	(building-type-count-total castle > 0)
		(unit-type-count villager > 30)))
(can-build stable)
(building-type-count-total stable < 1)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build stable)
(building-type-count-total stable < 2)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build stable)
(building-type-count-total stable < 4)
=>
(build stable)
)

(defrule
(or	(goal aggressive-goal aggressive)
	(or	(military-population >= 10)
		(wood-amount > 400)))
(building-type-count siege-workshop < 1)
(can-build siege-workshop)
=>
(build siege-workshop)
)

(defrule
(can-build watch-tower)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower < low-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= low-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
(building-type-count castle < 2)
=>
(build castle)
)

(defrule
(can-build watch-tower)
(building-type-count castle > 1)
(building-type-count watch-tower < high-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= high-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(building-type-count castle >= 2)
(building-type-count bombard-tower < bombard-tower-count)
(can-build bombard-tower)
=>
(build bombard-tower))

(defrule
(building-type-count monastery < 1)
(can-build monastery)
=>
(build monastery)
)

(defrule
(not(starting-age == post-imperial-age))
(building-type-count university < 1)
(building-type-count town-center >= 2)
(building-type-count barracks >= 1)
(building-type-count market >= 1)
(building-type-count archery-range >= 1)
(can-build university)
=>
(build university)
)

#end-if
#end-if
#end-if

#load-if-not-defined DARK-AGE-START

;====Researches

(defrule
(unit-type-count villager >= 42)
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 46)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

;====Buildings

(defrule
(current-age >= feudal-age)
(housing-headroom < 6)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
=>
(build house)
)

(defrule
(wood-amount >= 500)
(building-type-count blacksmith >= 1)
(building-type-count barracks >= 1)
(current-age  >= feudal-age)
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 3)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 35)
(build mill)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age  >= feudal-age)
(building-type-count farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age >= feudal-age)
(building-type-count farm < 40)
(can-build farm)
=>
(build farm)
)

#end-if

;====Guild Hall Technologies

(defrule
(can-research-with-escrow ba-militia-guilds)
(goal strategy-goal 1)
=>
(release-escrow food)
(research ba-militia-guilds)
)

(defrule
(can-research-with-escrow ba-bow-practise)
(goal strategy-goal 2)
=>
(release-escrow food)
(research ba-bow-practise)
)

(defrule
(can-research-with-escrow popular-assembly)
=>
(release-escrow food)
(research popular-assembly)
)

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-hall)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-hall))

(defrule
(population >= three-quarters-pop)
(can-research-with-escrow city-councils-hall)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-hall))

(defrule
(population >= full-pop)
(can-research-with-escrow storehouses-hall)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-hall))

(defrule
(building-type-count-total castle > 0)
(can-research-with-escrow roman-law-hall)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research roman-law-hall)
)

(defrule
(building-type-count-total castle > 1)
(can-research-with-escrow representation-hall)
=>
(release-escrow food)
(release-escrow gold)
(research representation-hall)
)

(defrule
(can-research-with-escrow fourth-estate-hall)
=>
(release-escrow food)
(release-escrow gold)
(research fourth-estate-hall)
)

; -- end guild hall techs

;Expensive techs

(defrule
(or	(goal strategy-goal 1)
	(unit-type-count militiaman-line > 4))
(can-research-with-escrow ri-halberdier)
=>
(release-escrow food)
(release-escrow gold)
(research ri-halberdier))

(defrule
(goal strategy-goal 2)
(can-research-with-escrow ri-heavy-cavalry-archer)
=>
(release-escrow food)
(release-escrow gold)
(research ri-heavy-cavalry-archer))

(defrule
(can-research-with-escrow ri-champion)
(unit-type-count new-man-at-arms > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-champion)
)

(defrule
(can-research-with-escrow my-unique-research)
(unit-type-count-total militiaman-line > 4)
=>
(release-escrow gold)
(research my-unique-research))

;Normal techs

(defrule
(unit-type-count villager >= 4)	;EDIT! Villager production is more important than loom at the beginning of the game.
(can-research ri-loom)
(or	(food-amount < 20)
	(or	(unit-type-count villager >= dark-villager-count)
		(current-age >= feudal-age))) ;end EDIT
=>
(research ri-loom)
)

(defrule
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(building-type-count farm > 10)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

(defrule
(or	(unit-type-count-total militiaman-line >= miniscule-pop)
	(current-age >= feudal-age))
(can-research ri-man-at-arms)
(or	(unit-type-count-total villager >= 37)
	(building-type-count archery-range > 0))
=>
(research ri-man-at-arms)
)

(defrule
(unit-type-count villager >= 50)
(can-research ri-gold-mining)
=>
(research ri-gold-mining)
)

(defrule
(unit-type-count villager >= 60)
(can-research ri-stone-mining)
=>
(research ri-stone-mining)
)

(defrule
(or	(goal army-type-goal late-game)
	(unit-type-count-total skirmisher-line > 5))
(can-research-with-escrow ri-elite-skirmisher)
=>
(release-escrow gold)
(research ri-elite-skirmisher)
)

(defrule
(can-research-with-escrow ri-long-swordsman)
=>
(release-escrow food)
(research ri-long-swordsman)
)

(defrule
(or	(unit-type-count-total spearman > 5)
	(or	(goal strategy-goal 2)
		(goal army-type-goal late-game)))
(can-research-with-escrow ri-pikeman)
=>
(release-escrow food)
(research ri-pikeman)
)

(defrule
(can-research-with-escrow ri-crossbow)
=>
(release-escrow food)
(research ri-crossbow)
)

(defrule
(or	(unit-type-count-total scout-cavalry-line > 5)
	(goal army-type-goal late-game))
(can-research-with-escrow ri-light-cavalry)
=>
(release-escrow food)
(research ri-light-cavalry)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-bloodlines)
=>
(research ri-bloodlines)
)

(defrule
(unit-type-count archer-line >= miniscule-pop)
(can-research-with-escrow ri-crossbow-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow-companies))

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
)

(defrule
(research-completed ri-scale-mail)
(can-research-with-escrow ri-mercenaries)
=>
(release-escrow food)
(research ri-mercenaries))

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research ri-fletching)
=>
(research ri-fletching)
)

(defrule
(or	(research-completed ri-scale-mail)
	(research-completed ri-scale-barding))
(can-research ri-forging)
=>
(research ri-forging)
)

(defrule
(research-completed ri-fletching)
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
)

(defrule
(research-completed ri-forging)
(player-in-game any-ally)
(can-research ri-cartography)
=>
(research ri-cartography)
)

(defrule
(building-type-count-total castle >= 1)
(can-research-with-escrow ri-murder-holes)
=>
(release-escrow food)
(research ri-murder-holes)
)

(defrule
(civilian-population >= 60)
(can-research-with-escrow ri-hand-cart)
=>
(release-escrow food)
(research ri-hand-cart)
)

(defrule
(civilian-population >= 60)
(can-research ri-bow-saw)
=>
(research ri-bow-saw)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-gold-shaft-mining)
=>
(release-escrow food)
(research ri-gold-shaft-mining)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-stone-shaft-mining)
=>
(release-escrow food)
(research ri-stone-shaft-mining)
)

(defrule
(can-research ri-heavy-plow)
=>
(research ri-heavy-plow)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow ri-iron-casting)
=>
(release-escrow food)
(research ri-iron-casting)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow bo-iron-casting)
=>
(release-escrow food)
(research bo-iron-casting)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count archery-range > 0))
(can-research-with-escrow ri-bodkin-arrow)
=>
(release-escrow food)
(research ri-bodkin-arrow)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
)

(defrule
(unit-type-count 912 >= miniscule-pop)
(can-research-with-escrow ri-chain-barding)
=>
(release-escrow food)
(research ri-chain-barding)
)

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research-with-escrow ri-chain-mail)
=>
(release-escrow food)
(research ri-chain-mail)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-thumb-ring)
=>
(release-escrow food)
(research ri-thumb-ring))

(defrule
(can-research ri-ballistics)
=>
(research ri-ballistics)
)

(defrule
(unit-type-count religious-units >= 2)
(can-research ri-sanctity)
=>
(research ri-sanctity)
)

(defrule
(research-completed ri-ballistics)
(can-research-with-escrow ri-stonecutting)	;treadmill crane
=>
(release-escrow food)
(research ri-stonecutting)
)

(defrule
(building-type-count watch-tower >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-guard-tower)
=>
(research ri-guard-tower))

(defrule
(building-type-count stone-wall-line > 0)
(can-research-with-escrow ri-fortified-wall)
=>
(research ri-fortified-wall)
)

(defrule
(research-completed ri-chain-mail)
(player-in-game any-ally)
(can-research ri-caravan)
=>
(research ri-caravan)
)

(defrule
(or	(research-completed ri-bodkin-arrow)
	(building-type-count-total castle > 0))
(can-research ri-town-watch)
=>
(research ri-town-watch)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-tracking)
=>
(research ri-tracking)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-squires)
=>
(research ri-squires)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(not	(research-available ri-bloodlines))
(can-research ri-husbandry)
=>
(research ri-husbandry)
)

(defrule
(goal strategy-goal 1)
(can-research-with-escrow ri-heavy-camel)
=>
(release-escrow food)
(release-escrow gold)
(research ri-heavy-camel))

(defrule
(can-research-with-escrow ri-arbalest)
=>
(release-escrow food)
(release-escrow gold)
(research ri-arbalest)
)

(defrule
(can-research-with-escrow ri-conscription)
=>
(release-escrow food)
(release-escrow gold)
(research ri-conscription))

(defrule
(can-research-with-escrow ri-two-man-saw)
=>
(release-escrow food)
(research ri-two-man-saw))

(defrule
(can-research-with-escrow ri-capped-ram)
=>
(release-escrow food)
(research ri-capped-ram))

(defrule
(unit-type-count battering-ram-line >= miniscule-pop)
(can-research-with-escrow ri-siege-ram)
=>
(release-escrow food)
(research ri-siege-ram))

(defrule
(building-type-count guard-tower >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-keep)
=>
(release-escrow food)
(research ri-keep))

(defrule
(building-type-count keep >= low-tower-count)
(building-type-count castle > 0)
(can-research-with-escrow ri-bombard-tower)
=>
(release-escrow food)
(research ri-bombard-tower))

(defrule
(can-research-with-escrow ri-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-onager))

(defrule
(can-research-with-escrow ri-siege-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-siege-onager))

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research-with-escrow ri-bracer)
=>
(release-escrow food)
(release-escrow gold)
(research ri-bracer)
)

(defrule
(building-type-count-total barracks > 0)
(can-research-with-escrow ri-plate-mail)
=>
(release-escrow food)
(research ri-plate-mail)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow ri-blast-furnace)
=>
(release-escrow food)
(release-escrow gold)
(research ri-blast-furnace)
)

(defrule
(can-research-with-escrow ri-ring-archer-armor)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ring-archer-armor))

(defrule
(can-research-with-escrow ri-siege-engineers)
=>
(release-escrow food)
(research ri-siege-engineers))

(defrule
(not	(research-available ri-blast-furnace))
(can-research-with-escrow ri-guilds)
=>
(release-escrow food)
(release-escrow gold)
(research ri-guilds))

(defrule
(goal strategy-goal 2)
(unit-type-count-total cavalry-archer-line > 0)
(can-research-with-escrow ri-parthian-tactics)
=>
(release-escrow food)
(research ri-parthian-tactics)
)

(defrule
(or	(research-completed ri-bracer)
	(or	(building-type-count-total watch-tower-line > high-tower-count)
		(building-type-count-total castle > 1)))
(current-age >= imperial-age)
(can-research ri-town-patrol)
=>
(research ri-town-patrol)
)

(defrule
(military-population >= 50)
(can-research-with-escrow ri-chemistry)
=>
(release-escrow food)
(release-escrow gold)
(research ri-chemistry)
)

(defrule
(players-unit-type-count any-enemy religious-units >= 5)
(can-research ri-heresy)
=>
(research ri-heresy)
)

(defrule
(players-unit-type-count any-enemy religious-units >= 10)
(can-research-with-escrow ri-faith)
=>
(release-escrow food)
(release-escrow gold)
(research ri-faith)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-atonement)
=>
(release-escrow gold)
(research ri-atonement)
)

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(unit-type-count religious-units >= 2)
(can-research-with-escrow ri-fervor)
=>
(release-escrow gold)
(research ri-fervor)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-redemption)
=>
(release-escrow gold)
(research ri-redemption)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-illumination)
=>
(research ri-illumination)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-block-printing)
=>
(release-escrow gold)
(research ri-block-printing)
)

;==========================<<<<<<<<<<Civilian Training>>>>>>>>>>===========================

;====Villagers

(defrule
(unit-type-count-total villager < dark-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training Dark Age Villager")
)

(defrule
(current-age == feudal-age)
(unit-type-count-total villager < feudal-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training 13 th Century Villager")
)

(defrule
(current-age >= castle-age)
(not(not (goal water-map 0)))
(unit-type-count-total villager < villager-pop)
(can-train villager)
=>
(train villager)
)

(defrule
(current-age >= castle-age)
(not (goal water-map 0))
(unit-type-count-total villager < villager-pop-watermap)
(can-train villager)
=>
(train villager)
)

(defrule				;The AI cannot handle more than 100 villagers
(unit-type-count villager > 100)	;The extra villagers will just stand idle.
=>
(delete-unit villager)
)

;====Sheep

;AIs cannot gather from trained sheep.

;====Priests

;EDIT! More selective priest training
(defrule
(goal priest-goal for-relics)
(unit-type-count-total monk < 2)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
;(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-healing)
(unit-type-count-total monk < 4)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(or	(players-unit-type-count every-enemy scout-cavalry-line < 10)
	(unit-type-count monk < 2))
=>
(train monk)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count-total monk < 6)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(or	(players-unit-type-count every-enemy scout-cavalry-line < 10)
	(unit-type-count monk < 3))
=>
(train monk)
)

;====Trade Carts are in the bottom of the AI

;==========================<<<<<<<<<<Military Training>>>>>>>>>>===========================

(defrule
(goal army-type-goal 0)
(unit-type-count-total trebuchet < tiny-pop)
;(goal unit-upgrades-complete-goal 1)
(not	(town-under-attack))
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(current-age == feudal-age)
(can-train battering-ram-line)
(or	(unit-type-count-total battering-ram-line < 1)
	(and	(enemy-buildings-in-town)
		(unit-type-count battering-ram-line < miniscule-pop)))
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

(defrule
(current-age == castle-age)
(can-train battering-ram-line)
(unit-type-count-total battering-ram-line < tiny-pop)
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

;====Strategy 1:

;==12/13th Century training:

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total skirmisher-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 825)
(wood-amount >= 235)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total skirmisher-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < small-pop)))
(can-train skirmisher-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train skirmisher-line))

;13th century

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total skirmisher-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total skirmisher-line < miniscule-pop))
(can-train skirmisher-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(or	(and	(unit-type-count-total archer-line < large-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < medium-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-man-at-arms < large-pop)
(can-train new-man-at-arms)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-man-at-arms))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total foot-knight < large-pop)
(can-train foot-knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train foot-knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < medium-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;City Rights (only Arbalests change)

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(or	(and	(unit-type-count-total archer-line < half-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < large-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Councils (Militia and Lancers change)

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total camel-line < large-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;Municipal Storehouses (only Knightly Infantry change)

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-man-at-arms < half-pop)
(can-train new-man-at-arms)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-man-at-arms))

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total foot-knight < half-pop)
(can-train foot-knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train foot-knight))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < medium-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-man-at-arms < miniscule-pop)
(can-train new-man-at-arms)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-man-at-arms))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total foot-knight < miniscule-pop)
(can-train foot-knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train foot-knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total camel-line < miniscule-pop)
(can-train camel-line)
(or	(food-amount > 85)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train camel-line))

;City Rights (only Pikemen and Light Cavalry change)

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;City Councils (only Militia change)

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

;Municipal Storehouses (Pikemen and Light Cavalry change)

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;====Strategy 2:

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total skirmisher-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total skirmisher-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 825)
(wood-amount >= 235)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train spearman-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 200)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train spearman-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < tiny-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < miniscule-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < large-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < large-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train archer-line)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < medium-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < medium-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

;City Rights (only Reichsritters change)

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < half-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

;City Councils (only Ministeriales and Mounted Crossbowmen change)

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < large-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

;Municipal Storehouses (only Pikemen change)

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total reichsritter < miniscule-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train archer-line)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < miniscule-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

;City Rights (only Militia and Light Cavalry change)

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed city-rights-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;City Councils (only Pikemen change)

(defrule
(research-completed city-councils-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;Municipal Storehouses (Pikemen and Light Cavalry change)

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed au-hausmacht)
(research-completed ri-halberdier)
=>
(train militiaman-line))

(defrule
(research-completed storehouses-hall)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;Other

;(defrule
;(unit-type-count-total mangonel-line < miniscule-pop)
;(can-train mangonel-line)
;;(goal unit-upgrades-complete-goal 1)
;=>
;(train mangonel-line))

;================================<<<<<<<<<<Escrow>>>>>>>>>>================================

;Escrow:

;turn escrow-goal on if escrow is desired
;use escrow for immediate researches (determined if the unit-upgrades-complete-goal is met)
;use a smaller escrow for advancing to the next age

;never use escrow for wood or stone:

(defrule
(true)
=>
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(disable-self)
)

;====Escrow Goal: 0

(defrule
(goal escrow-goal 0)
=>
(set-escrow-percentage food 0)
(set-escrow-percentage gold 0)
(release-escrow food)
(release-escrow gold)
)

;====Town Under Attack:

     ;never use escrow when under attack

(defrule
(town-under-attack)
(players-military-population any-enemy > 12)
(military-population < 15)
=>
(set-goal escrow-goal 0)
)

;====12th century:

     ;use escrow during advance to 13th century to prepare for 13th century researches

(defrule
(current-age == dark-age)
=>
(set-goal unit-upgrades-complete-goal 1)
(set-goal escrow-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == to-13-century)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====13th century:

     ;turn off escrow immediately if going for a flush
     ;turn off escrow when 13th century researches are met
     ;use escrow during advance to 14th century to prepare for 14th century researches

(defrule
(current-age == feudal-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-crossbow)
(research-completed ri-elite-skirmisher)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 2)
(research-completed ri-long-swordsman)
(research-completed ri-crossbow)
(research-completed ri-pikeman)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(current-age == feudal-age)
(goal unit-upgrades-complete-goal 1)
(goal aggressive-goal defensive)
(goal escrow-goal 0)
=>
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 4)
(set-escrow-percentage gold 3)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 13-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-14-century)
=>
(set-escrow-percentage food 7)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====14th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 14th century researches are met
     ;use escrow to save up resources for 15th century
     ;use escrow during advance to 15th century to prepare for 15th century researches

(defrule
(current-age == castle-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(current-age == castle-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 30)
=>
(set-escrow-percentage food 11)
(set-escrow-percentage gold 8)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-arbalest)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 2)
(research-completed ri-pikeman)
(research-completed ri-arbalest)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(current-age == castle-age)
(goal unit-upgrades-complete-goal 1)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(chat-local-to-self "castle unit upgrades complete")
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 8)
(set-escrow-percentage gold 6)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 14-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-15-century)
(goal aggressive-goal defensive)
=>
(set-escrow-percentage food 8)
(set-escrow-percentage gold 6)
(set-goal escrow-goal 1)
(disable-self)
)

;====15th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 15th century researches are met

(defrule
(current-age == imperial-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == 15-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(current-age == imperial-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(set-escrow-percentage food 14)
(set-escrow-percentage gold 8)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 1)
(research-completed ri-halberdier)
(research-completed ri-champion)
(research-completed my-unique-research)
(research-completed ri-heavy-camel)
(research-completed ba-militia-guilds)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 2)
(research-completed ri-heavy-cavalry-archer)
(research-completed ba-bow-practise)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal escrow-goal 1)
(current-age == imperial-age)
(goal unit-upgrades-complete-goal 1)
=>
(chat-local-to-self "imperial unit upgrades complete")
(set-goal escrow-goal 0)
)

(defrule
(current-age >= feudal-age)
(goal escrow-goal 0)
=>
(chat-to-player my-player-number "escrow"))

;====Release Extra Escrow

(defrule
(current-age == feudal-age)
(escrow-amount food > 200)
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == feudal-age)
(escrow-amount gold > 150)
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == castle-age)
(escrow-amount food > 500)
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == castle-age)
(escrow-amount gold > 400)
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == imperial-age)
(escrow-amount food > 800)
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == imperial-age)
(escrow-amount gold > 600)
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

;================================<<<<<<<<<<Walls>>>>>>>>>>================================


(defrule
(true)
=>
(set-goal wall BUILD-WALL)
(disable-self)
)

(defrule
(goal water-map 0)
(not (map-type fortress))
(not (map-type arena))
(not(map-size small))
(not(map-size tiny))
(unit-type-count gate == 0)
(game-time < 300)
=>
(enable-wall-placement 2)	
;(disable-self)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(game-time > 300)
(can-afford-complete-wall 2 stone-wall-line)
(building-type-count-total castle > 0)
(or	(building-type-count-total watch-tower > 0)
	(or	(building-type-count-total guard-tower > 0)
		(building-type-count-total keep > 0)))
(military-population > 35)
=>
(build-wall 2 stone-wall-line)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(game-time > 300)
(goal wall BUILD-WALL)
(building-type-count-total gate < 8)
(can-build-gate 2)
(building-type-count-total castle > 0)
(or	(building-type-count-total watch-tower > 0)
	(or	(building-type-count-total guard-tower > 0)
		(building-type-count-total keep > 0)))
(military-population > 35)
=>
(build-gate 2)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(town-under-attack)
=>
(set-goal wall DONT-BUILD-WALL)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall DONT-BUILD-WALL)
(not	(town-under-attack))
(military-population > 15)
=>
(set-goal wall BUILD-WALL)
)

;small
(defrule
(or(map-size small)
(map-size tiny))
(goal wall BUILD-WALL)
=>
(set-goal wall DONT-BUILD-WALL)
(disable-self)
)

#end-if

;Bohemians

#load-if-defined KOREAN-CIV

;==========================================================================================
;I                                                                                        I
;I                                  BOMEHIAN CIVILIZATION                                 I
;I                                                                                        I
;==========================================================================================

(defrule
(game-time > 15)
=>
(chat-local-to-self "Bohemian civilization detected")
(disable-self))

;===========================<<<<<<<<<<Decide Strategy>>>>>>>>>>===========================

(defrule
(true)
=>
(set-goal strategy-goal 0)
(generate-random-number 100)
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 0)
(random-number <= 40)
=>
(set-goal strategy-goal 1) ;Luxembourg Dynasty
(chat-to-player my-player-number "Strategy 1: Luxembourg Dynasty")
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 40)
(random-number <= 70)
=>
(set-goal strategy-goal 2) ;Hussite Beliefs => Utraquist Sect
(chat-to-player my-player-number "Strategy 2: Hussite Beliefs => Utraquist Sect")
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 70)
(random-number <= 100)
=>
(set-goal strategy-goal 3) ;Hussite Beliefs => Taborite Sect
(chat-to-player my-player-number "Strategy 3: Hussite Beliefs => Taborite Sect")
(disable-self)
)

;=============================<<<<<<<<<<Town Center>>>>>>>>>>==============================

;Building a town center is the most important action for an AI, especially if the AI does
;not have one.

(defrule
(building-type-count town-center < 1)
(unit-type-count villager > 2)
=>
(chat-to-player my-player-number "increase town size for town center")
(set-strategic-number sn-maximum-town-size 50)
(set-escrow-percentage wood 100)
(set-escrow-percentage stone 100)
)

(defrule
(building-type-count town-center < 1)
(can-build-with-escrow town-center)
=>
(release-escrow wood)
(release-escrow stone)
(build town-center)
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(chat-to-player every-ally "I'm rebuilding my town away from my base.")
(chat-to-player every-ally "Protect me!")
(set-strategic-number sn-maximum-food-drop-distance 25)
)

(defrule
(unit-type-count villager >= 25)
(building-type-count town-center < 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 42)
(building-type-count town-center < 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 50)
(building-type-count town-center < 4)
(building-type-count castle >= 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 55)
(building-type-count town-center < 5)
(building-type-count castle >= 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 65)
(building-type-count town-center < 7)
(building-type-count castle >= 4)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 75)
(building-type-count town-center < 10)
(building-type-count castle >= 5)
(can-build town-center)
=>
(build town-center)
)

;===============================<<<<<<<<<<Research>>>>>>>>>>===============================

;====Age Advancement

(defrule
(can-research feudal-age)
(or	(unit-type-count villager >= 38)
	(food-amount >= 1000))
(unit-type-count-total villager >= 10)
=>
(research feudal-age)
(set-strategic-number sn-current-age to-13-century)
)

(defrule
(can-research-with-escrow castle-age)
(or	(unit-type-count villager >= 55)
	(food-amount >= 1300))
(unit-type-count villager >= 35)
=>
(release-escrow food)
(release-escrow gold)
(research castle-age)
(set-strategic-number sn-current-age to-14-century)
)

(defrule
(can-research-with-escrow imperial-age)
(or	(unit-type-count-total villager > 75)
	(food-amount >= 1400))
(unit-type-count villager >= 60)
=>
(release-escrow food)
(release-escrow gold)
(research imperial-age)
(set-strategic-number sn-current-age to-15-century)
)

;====Policy decisions

;If Strategy 1

(defrule
(goal strategy-goal 1)
(current-age >= castle-age)
(can-research-with-escrow bo-luxembourg-dynasty)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research luxembourg dynasty")
(research bo-luxembourg-dynasty)
)

;If Strategy 2 or 3

(defrule
(or	(goal strategy-goal 2)
	(goal strategy-goal 3))
(current-age >= castle-age)
(can-research-with-escrow bo-hussite-beliefs)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research hussite beliefs")
(research bo-hussite-beliefs)
)

;If Strategy 2

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(can-research-with-escrow bo-utraquist-sect)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research utraquist sect")
(research bo-utraquist-sect)
)

;If Strategy 3

(defrule
(goal strategy-goal 3)
(current-age >= castle-age)
(can-research-with-escrow bo-taborite-sect)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research taborite sect")
(research bo-taborite-sect)
)

; -- end policy decisions --

;DARK AGE START and FEUDAL age START
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START

;Explore to find food at the beginning of the game

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 50); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 0)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 5)
(disable-self)
)

;Stop exploring when food is found

(defrule
(or	(resource-found food)
	(or	(not	(sheep-and-forage-too-far))
		(building-type-count-total mill > 0)))
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 0); to stop exploring
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 0)
(disable-self)
)

;- dark age agatherering--
(defrule
(unit-type-count villager < 8)
=>
(set-strategic-number sn-food-gatherer-percentage 100)
(set-strategic-number sn-wood-gatherer-percentage 0)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 8)
(unit-type-count villager < 10)
=>
(set-strategic-number sn-food-gatherer-percentage 90)
(set-strategic-number sn-wood-gatherer-percentage 10)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 10)
(unit-type-count villager < 15)
=>
(set-strategic-number sn-food-gatherer-percentage 70)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 15)
(unit-type-count villager < 20)
=>
(set-strategic-number sn-food-gatherer-percentage 65)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 20)
(unit-type-count villager < 25)
=>
(set-strategic-number sn-food-gatherer-percentage 52)
(set-strategic-number sn-wood-gatherer-percentage 48)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 25)
(unit-type-count villager < 30)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 4)
)

(defrule
(unit-type-count villager >= 30)
(unit-type-count villager < 35)
=>
(set-strategic-number sn-food-gatherer-percentage 41)
(set-strategic-number sn-wood-gatherer-percentage 52)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
(unit-type-count villager >= 35)
(unit-type-count villager < 43)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(food-amount < 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 48)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
(food-amount >= 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
(food-amount < 800)
(gold-amount >= 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(current-age == dark-age)
(strategic-number sn-current-age == to-13-century)
(building-type-count barracks > 0)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 32)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 19)
)

;- Feudal age agatherering--

(defrule
(civilian-population < 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population < 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 34)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

;------



(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)


(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 900))
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 46)
(set-strategic-number sn-wood-gatherer-percentage 37)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population >= 50)
(wood-amount > 1000)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 53)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 7)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(strategic-number sn-stone-gatherer-percentage == 7)
(can-build farm)
=>
(build farm)
(chat-local-to-self "build extra farms")
)

;==============================<<<<<<<<<<Buildings>>>>>>>>>>===============================

;EDIT! Only build a house right when it is needed by checking for a smaller headroom

(defrule
(current-age == dark-age)
(housing-headroom < 3)
(population-headroom > 3)
(can-build house)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age == dark-age)
(housing-headroom < 5)
(population-headroom > 3)
(can-build house)
(building-type-count barracks > 0)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age >= feudal-age)
(housing-headroom < 8)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
(building-type-count archery-range > 0)
=>
(build house)
)

;end EDIT

(defrule
;(not(death-match-game))
(or	(and	(dropsite-min-distance food > -1)
		(game-time > 90))
	(or	(unit-type-count male-forager > 0)
		(or	(unit-type-count female-forager > 0)
			(unit-type-count villager > 10))))	;EDIT! In case food isn't found
(building-type-count-total mill < 1)
(can-build mill)
=>
(build mill)
;(chat-local-to-self "build first mill")
)

;---dark buildings

(defrule
(building-type-count-total lumber-camp >= 1)
(dropsite-min-distance food > -1)
(or	(unit-type-count male-hunter >= 1)
	(or	(unit-type-count female-hunter >= 1)
		(dropsite-min-distance food > 5)))
(building-type-count-total mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(build mill)
)

#load-if-defined SCANDANAVIA-MAP

(defrule
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(chat-to-player my-player-number "build Scandinavia mill")
(build mill)
)

#end-if

(defrule
(game-time > 90)
(building-type-count-total lumber-camp < 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 4)
(can-build farm)
(dropsite-min-distance food > 5)
=>
(build farm)
)

(defrule
(building-type-count-total lumber-camp >= 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 8)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count mining-camp >= 1) ;EDIT - changed lumber-camp to mining-camp
(idle-farm-count < 3)
(unit-type-count villager >= 25)
(unit-type-count villager <= dark-villager-count)
(building-type-count farm < 20)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age == feudal-age)
(building-type-count-total farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age == feudal-age)
(building-type-count-total farm < 40)
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(or	(building-type-count farm < 15)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 18))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-horse-collar)
(or	(building-type-count farm < 20)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 25))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-heavy-plow)
(or	(building-type-count farm < 25)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 30))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-crop-rotation)
(or	(building-type-count farm < 40)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 50))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

;EDIT! Better lumber camp construction rules

(defrule
(or	(not	(death-match-game))
	(or	(game-time >= 300)
		(building-type-count-total mill > 0)))
(or	(unit-type-count villager >= 12)
	(wood-amount > 500))
(building-type-count lumber-camp < 1)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(building-type-count-total lumber-camp < 3)
(dropsite-min-distance wood > 5)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 4)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 6)
(strategic-number sn-camp-max-distance >= 50)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 8)
(strategic-number sn-camp-max-distance >= 70)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 10)
(strategic-number sn-camp-max-distance >= 90)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 12)
(strategic-number sn-camp-max-distance >= 120)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 15)
(strategic-number sn-camp-max-distance >= 160)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(strategic-number sn-camp-max-distance >= 255)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
(disable-self)
)

(defrule
(timer-triggered retreat-lumber-camp-timer)
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
)

;Better rules for mining camps:

(defrule
(or	(unit-type-count villager >= 25)
	(or	(gold-amount < 10)
		(current-age >= feudal-age)))
(building-type-count-total mining-camp < 1)
(can-build mining-camp)
(dropsite-min-distance gold > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(or	(unit-type-count villager >= 38)
	(and	(current-age >= feudal-age)
		(or	(building-type-count-total market > 0)
			(building-type-count-total siege-workshop > 0))))
(building-type-count mining-camp < 2)
(can-build mining-camp)
(dropsite-min-distance stone > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(current-age >= feudal-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 3)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

;end EDIT

(defrule
(can-build castle)
(or	(building-type-count-total town-center >= 3)
	(or	(and	(building-type-count-total town-center >= 2)
			(stone-amount >= 750))
		(current-age <= feudal-age)))
(building-type-count castle < 1)
=>
(build castle)
)

(defrule
(or	(unit-type-count villager >= 25)
	(wood-amount > 275))
(can-build barracks)
(building-type-count-total barracks < 1)
(or	(building-type-count-total mining-camp > 0)
	(and	(wood-amount > 275)
		(building-type-count-total lumber-camp > 0)))
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build barracks)
(building-type-count-total barracks < 2)
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build barracks)
(building-type-count-total barracks < 4)
=>
(build barracks)
)

(defrule
(or	(unit-type-count villager >= 30)
	(and	(current-age >= feudal-age)
		(building-type-count barracks > 0)))
(can-build archery-range)
(building-type-count-total archery-range < 1)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build archery-range)
(building-type-count-total archery-range < 2)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build archery-range)
(building-type-count-total archery-range < 4)
=>
(build archery-range)
)

(defrule
(not(starting-age == post-imperial-age))
(wood-amount >= 210)
(building-type-count-total blacksmith < 1)
(can-build blacksmith)
=>
(build blacksmith)
)

(defrule
(can-build market)
(building-type-count-total market < 1)
(or	(building-type-count-total siege-workshop > 0)
	(goal aggressive-goal defensive))
=>
(build market)
(chat-local-to-self "build market")
)

(defrule
(or	(unit-type-count villager >= 40)
	(and	(building-type-count-total castle > 0)
		(unit-type-count villager > 30)))
(can-build stable)
(building-type-count-total stable < 1)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build stable)
(building-type-count-total stable < 2)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build stable)
(building-type-count-total stable < 4)
=>
(build stable)
)

(defrule
(or	(goal aggressive-goal aggressive)
	(or	(military-population >= 10)
		(wood-amount > 400)))
(building-type-count siege-workshop < 1)
(can-build siege-workshop)
=>
(build siege-workshop)
)

(defrule
(can-build watch-tower)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower < low-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= low-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
(building-type-count castle < 2)
=>
(build castle)
)

(defrule
(can-build watch-tower)
(building-type-count castle > 1)
(building-type-count watch-tower < high-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= high-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(building-type-count castle >= 2)
(building-type-count bombard-tower < bombard-tower-count)
(can-build bombard-tower)
=>
(build bombard-tower))

(defrule
(building-type-count monastery < 1)
(can-build monastery)
=>
(build monastery)
)

(defrule
(or	(current-age == imperial-age)
	(wood-amount > 500))
(building-type-count monastery < 2)
(goal priest-goal for-converting)
(can-build monastery)
=>
(build monastery)
)

(defrule
(not(starting-age == post-imperial-age))
(building-type-count university < 1)
(building-type-count town-center >= 2)
(building-type-count barracks >= 1)
(building-type-count market >= 1)
(building-type-count archery-range >= 1)
(can-build university)
=>
(build university)
)

#end-if
#end-if
#end-if

#load-if-not-defined DARK-AGE-START

;====Researches

(defrule
(unit-type-count villager >= 42)
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 46)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

;====Buildings

(defrule
(current-age >= feudal-age)
(housing-headroom < 6)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
=>
(build house)
)

(defrule
(wood-amount >= 500)
(building-type-count blacksmith >= 1)
(building-type-count barracks >= 1)
(current-age  >= feudal-age)
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 3)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 35)
(build mill)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age  >= feudal-age)
(building-type-count farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age >= feudal-age)
(building-type-count farm < 40)
(can-build farm)
=>
(build farm)
)

#end-if

;====Princely Court Technologies

(defrule
(can-research-with-escrow pc-chivalric-order)
(goal strategy-goal 1)
=>
(release-escrow food)
(release-escrow gold)
(research pc-chivalric-order)
)

(defrule
(can-research-with-escrow pc-close-order-drill)
(goal strategy-goal 2)
=>
(release-escrow food)
(research pc-close-order-drill)
)

(defrule
(can-research-with-escrow pc-bow-practise)
(goal strategy-goal 3)
=>
(release-escrow gold)
(research pc-bow-practise)
)

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-court))

(defrule
(population >= three-quarters-pop)
(can-research-with-escrow city-councils-court)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-court))

(defrule
(population >= full-pop)
(can-research-with-escrow storehouses-court)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-court))

(defrule
(building-type-count-total castle > 0)
(can-research-with-escrow roman-law-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research roman-law-court))

(defrule
(building-type-count-total castle > 1)
(can-research-with-escrow representation-court)
=>
(release-escrow food)
(release-escrow gold)
(research representation-court))

(defrule
(building-type-count-total castle > 2)
(can-research-with-escrow fourth-estate-court)
=>
(release-escrow food)
(release-escrow gold)
(research fourth-estate-court))

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(can-research-with-escrow pc-court-clergy)
=>
(release-escrow food)
(release-escrow gold)
(research pc-court-clergy))

; -- end princely court techs

;Expensive techs

(defrule
(not	(goal strategy-goal 3))
(can-research-with-escrow bo-slechtic)
=>
(release-escrow food)
(release-escrow gold)
(research bo-slechtic))

(defrule
(not	(goal strategy-goal 1))
(can-research-with-escrow my-unique-unit-upgrade)
=>
(release-escrow food)
(release-escrow gold)
(research my-unique-unit-upgrade))

(defrule
(can-research-with-escrow my-unique-research)
=>
(release-escrow food)
(release-escrow gold)
(research my-unique-research))

;Normal techs

(defrule
(unit-type-count villager >= 4)	;EDIT! Villager production is more important than loom at the beginning of the game.
(can-research ri-loom)
(or	(food-amount < 20)
	(or	(unit-type-count villager >= dark-villager-count)
		(current-age >= feudal-age))) ;end EDIT
=>
(research ri-loom)
)

(defrule
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(building-type-count farm > 10)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

(defrule
(or	(unit-type-count-total militiaman-line >= miniscule-pop)
	(current-age >= feudal-age))
(can-research ri-man-at-arms)
(or	(unit-type-count-total villager >= 37)
	(building-type-count archery-range > 0))
=>
(research ri-man-at-arms)
)

(defrule
(unit-type-count villager >= 50)
(can-research ri-gold-mining)
=>
(research ri-gold-mining)
)

(defrule
(unit-type-count villager >= 60)
(can-research ri-stone-mining)
=>
(research ri-stone-mining)
)

(defrule
(or	(goal army-type-goal late-game)
	(unit-type-count-total skirmisher-line > 5))
(can-research-with-escrow ri-elite-skirmisher)
=>
(release-escrow gold)
(research ri-elite-skirmisher)
)

(defrule
(can-research-with-escrow ri-crossbow)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow)
)

(defrule
(can-research-with-escrow ri-pikeman)
=>
(release-escrow food)
(research ri-pikeman)
)

(defrule
(can-research-with-escrow ri-long-swordsman)
=>
(release-escrow food)
(research ri-long-swordsman)
)

(defrule
(or	(not	(goal strategy-goal 1))
	(unit-type-count-total pikeman > 5))
(can-research-with-escrow bo-pike-drill)
=>
(release-escrow food)
(release-escrow gold)
(research bo-pike-drill)
)

(defrule
(goal strategy-goal 3)
(or	(current-age >= castle-age)
	(unit-type-count-total scout-cavalry-line > 2))
(can-research-with-escrow ri-light-cavalry)
=>
(release-escrow food)
(research ri-light-cavalry)
)

(defrule
(goal army-type-goal late-game)
(can-research-with-escrow ri-light-cavalry)
=>
(release-escrow food)
(research ri-light-cavalry)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research bo-bloodlines)
=>
(research bo-bloodlines)
)

(defrule
(unit-type-count archer-line >= miniscule-pop)
(can-research-with-escrow ri-crossbow-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow-companies))

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
)

(defrule
(research-completed ri-scale-mail)
(can-research-with-escrow ri-mercenaries)
=>
(release-escrow food)
(research ri-mercenaries)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research ri-fletching)
=>
(research ri-fletching)
)

(defrule
(or	(research-completed ri-scale-mail)
	(research-completed ri-scale-barding))
(can-research ri-forging)
=>
(research ri-forging)
)

(defrule
(research-completed ri-fletching)
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
)

(defrule
(research-completed ri-forging)
(player-in-game any-ally)
(can-research ri-cartography)
=>
(research ri-cartography)
)

(defrule
(building-type-count-total castle >= 1)
(can-research-with-escrow ri-murder-holes)
=>
(release-escrow food)
(research ri-murder-holes)
)

(defrule
(civilian-population >= 60)
(can-research-with-escrow ri-hand-cart)
=>
(release-escrow food)
(research ri-hand-cart)
)

(defrule
(civilian-population >= 60)
(can-research ri-bow-saw)
=>
(research ri-bow-saw)
)

(defrule
(or	(unit-type-count-total archer-line > 5)
	(not	(goal strategy-goal 1)))
(can-research bo-arbalest)
=>
(release-escrow food)
(release-escrow gold)
(research bo-arbalest)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-gold-shaft-mining)
=>
(release-escrow food)
(research ri-gold-shaft-mining)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-stone-shaft-mining)
=>
(release-escrow food)
(research ri-stone-shaft-mining)
)

(defrule
(can-research ri-heavy-plow)
=>
(research ri-heavy-plow)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow bo-iron-casting)
=>
(release-escrow food)
(research bo-iron-casting)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count archery-range > 0))
(can-research-with-escrow ri-bodkin-arrow)
=>
(release-escrow food)
(research ri-bodkin-arrow)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-pavises)
(unit-type-count-total archer-line > 5)
=>
(release-escrow gold)
(research ri-pavises)
)

(defrule
(unit-type-count 912 >= miniscule-pop)
(can-research-with-escrow ri-chain-barding)
=>
(release-escrow food)
(research ri-chain-barding)
)

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research-with-escrow ri-chain-mail)
=>
(release-escrow food)
(research ri-chain-mail)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-thumb-ring)
=>
(release-escrow food)
(research ri-thumb-ring))

(defrule
(can-research ri-ballistics)
=>
(research ri-ballistics)
)

(defrule
(unit-type-count-total religious-units >= 2)
(can-research ri-sanctity)
=>
(research ri-sanctity)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-atonement)
=>
(release-escrow gold)
(research ri-atonement)
)

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(unit-type-count religious-units >= 2)
(can-research-with-escrow ri-fervor)
=>
(release-escrow gold)
(research ri-fervor)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-redemption)
=>
(release-escrow gold)
(research ri-redemption)
)

(defrule
(research-completed ri-ballistics)
(can-research-with-escrow ri-stonecutting)	;treadmill crane
=>
(release-escrow food)
(research ri-stonecutting)
)

(defrule
(building-type-count stone-wall-line > 0)
(can-research-with-escrow ri-fortified-wall)
=>
(research ri-fortified-wall)
)

(defrule
(unit-type-count trade-cart > 5)
(player-in-game any-ally)
(can-research ri-caravan)
=>
(research ri-caravan)
)

(defrule
(or	(research-completed ri-bodkin-arrow)
	(building-type-count-total castle > 0))
(can-research ri-town-watch)
=>
(research ri-town-watch)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-tracking)
=>
(research ri-tracking)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-squires)
=>
(research ri-squires)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(not	(research-available bo-bloodlines))
(can-research ri-husbandry)
=>
(research ri-husbandry)
)

(defrule
(unit-type-count militiaman-line > 5)
(can-research-with-escrow bo-halberd)
=>
(release-escrow food)
(release-escrow gold)
(research bo-halberd)
)

(defrule
(can-research-with-escrow ri-conscription)
=>
(release-escrow food)
(release-escrow gold)
(research ri-conscription))

(defrule
(can-research-with-escrow ri-two-man-saw)
=>
(release-escrow food)
(research ri-two-man-saw))

(defrule
(can-research-with-escrow ri-capped-ram)
=>
(release-escrow food)
(research ri-capped-ram))

(defrule
(unit-type-count battering-ram-line >= miniscule-pop)
(can-research-with-escrow ri-siege-ram)
=>
(release-escrow food)
(research ri-siege-ram))

(defrule
(can-research-with-escrow ri-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-onager))

(defrule
(can-research-with-escrow ri-siege-onager)
(unit-type-count-total mangonel-line > 0)
=>
(release-escrow food)
(release-escrow gold)
(research ri-siege-onager))

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research-with-escrow bo-bracer)
=>
(release-escrow food)
(release-escrow gold)
(research bo-bracer)
)

(defrule
(building-type-count-total barracks > 0)
(can-research-with-escrow ri-plate-mail)
=>
(release-escrow food)
(research ri-plate-mail)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow ri-blast-furnace)
=>
(release-escrow food)
(release-escrow gold)
(research ri-blast-furnace)
)

(defrule
(can-research-with-escrow ri-ring-archer-armor)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ring-archer-armor))

(defrule
(can-research-with-escrow ri-siege-engineers)
=>
(release-escrow food)
(research ri-siege-engineers))

(defrule
(not	(research-available ri-blast-furnace))
(can-research-with-escrow ri-guilds)
=>
(release-escrow food)
(release-escrow gold)
(research ri-guilds))

(defrule
(or	(research-completed ri-bracer)
	(or	(building-type-count-total watch-tower > high-tower-count)
		(building-type-count-total castle > 1)))
(current-age >= imperial-age)
(can-research ri-town-patrol)
=>
(research ri-town-patrol)
)

(defrule
(military-population >= 50)
(can-research-with-escrow ri-chemistry)
=>
(release-escrow food)
(release-escrow gold)
(research ri-chemistry)
)

(defrule
(players-unit-type-count any-enemy religious-units >= 5)
(can-research ri-heresy)
=>
(research ri-heresy)
)

(defrule
(players-unit-type-count any-enemy religious-units >= 10)
(can-research-with-escrow ri-faith)
=>
(release-escrow food)
(release-escrow gold)
(research ri-faith)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-illumination)
=>
(research ri-illumination)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-block-printing)
=>
(release-escrow gold)
(research ri-block-printing)
)

(defrule
(civ-selected aztec)	;Denmark
(can-research ri-theocracy)
(unit-type-count religious-units >= 4)
(gold-amount > 800)
=>
(research ri-theocracy)
)

(defrule
(civ-selected aztec)	;Denmark
(can-research ri-herbal-medicine)
(unit-type-count religious-units >= 4)
(gold-amount > 800)
(current-age == imperial-age)
=>
(research ri-herbal-medicine)
)

;==========================<<<<<<<<<<Civilian Training>>>>>>>>>>===========================

;====Villagers

(defrule
(unit-type-count-total villager < dark-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training Dark Age Villager")
)

(defrule
(current-age == feudal-age)
(unit-type-count-total villager < feudal-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training 13 th Century Villager")
)

(defrule
(current-age >= castle-age)
(not(not (goal water-map 0)))
(unit-type-count-total villager < villager-pop)
(can-train villager)
=>
(train villager)
)

(defrule
(current-age >= castle-age)
(not (goal water-map 0))
(unit-type-count-total villager < villager-pop-watermap)
(can-train villager)
=>
(train villager)
)

(defrule				;The AI cannot handle more than 100 villagers
(unit-type-count villager > 100)	;The extra villagers will just stand idle.
=>
(delete-unit villager)
)

;====Sheep

;AIs cannot gather from trained sheep.

;====Priests

;EDIT! More selective priest training
(defrule
(goal priest-goal for-relics)
(unit-type-count-total monk < 2)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
;(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-healing)
(unit-type-count-total monk < 7)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(or	(players-unit-type-count every-enemy scout-cavalry-line < 10)
	(unit-type-count monk < 4))
=>
(train monk)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count-total monk < 10)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(or	(players-unit-type-count every-enemy scout-cavalry-line < 10)
	(unit-type-count monk < 5))
=>
(train monk)
)

;====Trade Carts are in the bottom of the AI

;==========================<<<<<<<<<<Military Training>>>>>>>>>>===========================

(defrule
(unit-type-count-total bombard-cannon < tiny-pop)
;(goal unit-upgrades-complete-goal 1)
(not	(town-under-attack))
(can-train bombard-cannon)
=>
(train bombard-cannon))

(defrule
(current-age == feudal-age)
(can-train battering-ram-line)
(or	(unit-type-count-total battering-ram-line < 1)
	(and	(enemy-buildings-in-town)
		(unit-type-count battering-ram-line < miniscule-pop)))
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

(defrule
(current-age == castle-age)
(can-train battering-ram-line)
(unit-type-count-total battering-ram-line < tiny-pop)
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

;====Strategy 1:

;==12/13th Century training:

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train spearman-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train spearman-line)
(food-amount >= 500)
(wood-amount >= 400)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < miniscule-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < large-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train archer-line)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-paladin < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total reichsritter < medium-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < small-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total handgunner < small-pop)
(can-train handgunner)
(or	(food-amount > 105)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train handgunner))

;City Rights (only Archers change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < large-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Councils (only Militia and Ministeriales change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < medium-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

;Municipal Storehouses (only Slechtics change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-paladin < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train archer-line)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < miniscule-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-paladin < miniscule-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total reichsritter < miniscule-pop)
(can-train reichsritter)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train reichsritter))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total handgunner < miniscule-pop)
(can-train handgunner)
(or	(food-amount > 105)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train handgunner))

;City Rights (only Militia and Light Cavalry change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

;City Councils (only Pikemen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;Municipal Storehouses (only Slechtics change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

;====Strategy 2:

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train spearman-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train spearman-line)
(food-amount >= 500)
(wood-amount >= 400)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < miniscule-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < large-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total war-wagon-line < medium-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train war-wagon-line)
=>
(train war-wagon-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < medium-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-paladin < medium-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total handgunner < small-pop)
(can-train handgunner)
(or	(food-amount > 105)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train handgunner))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(research-completed bo-hussite-beliefs)
(current-age >= castle-age)
(unit-type-count-total scorpion-line < tiny-pop)
(can-train scorpion-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train scorpion-line))

;City Rights (only Spearmen change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;City Councils (only War Wagon and Slechtic change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total war-wagon-line < large-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train war-wagon-line)
=>
(train war-wagon-line))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-paladin < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;Municipal Storehouses (only Crossbowmen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < half-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed bo-halberd)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total war-wagon-line < miniscule-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train war-wagon-line)
=>
(train war-wagon-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < miniscule-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-paladin < miniscule-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total handgunner < miniscule-pop)
(can-train handgunner)
(or	(food-amount > 105)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train handgunner))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(research-completed bo-hussite-beliefs)
(current-age >= castle-age)
(unit-type-count-total scorpion-line < miniscule-pop)
(can-train scorpion-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train scorpion-line))

;City Rights (only Militia and Light Cavalry change)

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(research-completed city-rights-court)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(research-completed city-rights-court)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed bo-halberd)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(research-completed city-rights-court)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;City Councils (only Pikemen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;Municipal Storehouses (only Slechtics change)

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(research-completed storehouses-court)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(research-completed storehouses-court)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed bo-halberd)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(research-completed storehouses-court)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;====Strategy 3:

(defrule
(goal strategy-goal 3)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < tiny-pop)))
(can-train militiaman-line)
(or	(food-amount > 60)
	(unit-type-count villager >= dark-villager-count))
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(current-age == dark-age)
(or	(unit-type-count-total militiaman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < medium-pop)))
(can-train militiaman-line)
(food-amount >= 860)
(gold-amount >= 220)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 3)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train spearman-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

(defrule
(goal strategy-goal 3)
(current-age <= feudal-age)
(unit-type-count-total militiaman-line < small-pop)
(can-train militiaman-line)
(town-under-attack)
(research-completed ri-man-at-arms)
=>
(train militiaman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 3)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total militiaman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total militiaman-line < small-pop)))
(can-train militiaman-line)
(food-amount >= 500)
(gold-amount >= 200)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 3)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train spearman-line)
(food-amount >= 500)
(wood-amount >= 400)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 3)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 3)
(current-age == feudal-age)
(or	(and	(unit-type-count-total militiaman-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total militiaman-line < tiny-pop))
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < tiny-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 3)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < miniscule-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 3)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < large-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total war-wagon-line < medium-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train war-wagon-line)
=>
(train war-wagon-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total handgunner < small-pop)
(can-train handgunner)
(or	(food-amount > 105)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train handgunner))

(defrule
(goal strategy-goal 3)
(goal army-type-goal 0)
(research-completed bo-hussite-beliefs)
(current-age >= castle-age)
(unit-type-count-total scorpion-line < tiny-pop)
(can-train scorpion-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train scorpion-line))

;City Rights (only Crossbowmen change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total archer-line < half-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Councils (only Ministeriales and Light Cavalry)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;Municipal Storehouses (only Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 3)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total halberdier < medium-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed bo-halberd)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total archer-line < miniscule-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total war-wagon-line < miniscule-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train war-wagon-line)
=>
(train war-wagon-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total handgunner < miniscule-pop)
(can-train handgunner)
(or	(food-amount > 105)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train handgunner))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(research-completed bo-hussite-beliefs)
(current-age >= castle-age)
(unit-type-count-total scorpion-line < miniscule-pop)
(can-train scorpion-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train scorpion-line))

;City Rights (only Militia and Light Cavalry change)

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(research-completed city-rights-court)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(research-completed city-rights-court)
(current-age >= castle-age)
(unit-type-count-total halberdier < large-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed bo-halberd)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(research-completed city-rights-court)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;City Councils (only Pikemen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 3)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;Municipal Storehouses (only Slechtics change)

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(research-completed storehouses-court)
(current-age >= castle-age)
(unit-type-count-total militiaman-line < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(research-completed storehouses-court)
(current-age >= castle-age)
(unit-type-count-total halberdier < half-pop)
(can-train militiaman-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
(research-completed bo-halberd)
=>
(train militiaman-line))

(defrule
(goal strategy-goal 3)
(goal army-type-goal late-game)
(research-completed storehouses-court)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < half-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;Other

;(defrule
;(unit-type-count-total mangonel-line < miniscule-pop)
;(can-train mangonel-line)
;;(goal unit-upgrades-complete-goal 1)
;=>
;(train mangonel-line))

;================================<<<<<<<<<<Escrow>>>>>>>>>>================================

;Escrow:

;turn escrow-goal on if escrow is desired
;use escrow for immediate researches (determined if the unit-upgrades-complete-goal is met)
;use a smaller escrow for advancing to the next age

;never use escrow for wood or stone:

(defrule
(true)
=>
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(disable-self)
)

;====Escrow Goal: 0

(defrule
(goal escrow-goal 0)
=>
(set-escrow-percentage food 0)
(set-escrow-percentage gold 0)
(release-escrow food)
(release-escrow gold)
)

;====Town Under Attack:

     ;never use escrow when under attack

(defrule
(town-under-attack)
(players-military-population any-enemy > 12)
(military-population < 15)
=>
(set-goal escrow-goal 0)
)

;====12th century:

     ;use escrow during advance to 13th century to prepare for 13th century researches

(defrule
(current-age == dark-age)
=>
(set-goal unit-upgrades-complete-goal 1)
(set-goal escrow-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == to-13-century)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====13th century:

     ;turn off escrow immediately if going for a flush
     ;turn off escrow when 13th century researches are met
     ;use escrow during advance to 14th century to prepare for 14th century researches

(defrule
(current-age == feudal-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(research-completed ri-long-swordsman)
(research-completed ri-crossbow)
(research-completed ri-pikeman)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(current-age == feudal-age)
(goal unit-upgrades-complete-goal 1)
(goal aggressive-goal defensive)
(goal escrow-goal 0)
=>
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 4)
(set-escrow-percentage gold 3)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 13-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-14-century)
=>
(set-escrow-percentage food 7)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====14th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 14th century researches are met
     ;use escrow to save up resources for 15th century
     ;use escrow during advance to 15th century to prepare for 15th century researches

(defrule
(current-age == castle-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(current-age == castle-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 30)
=>
(set-escrow-percentage food 14)
(set-escrow-percentage gold 10)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 1)
(research-completed ri-long-swordsman)
(research-completed ri-crossbow)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 2)
(research-completed ri-pikeman)
(research-completed ri-arbalest)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 3)
(research-completed ri-pikeman)
(research-completed ri-arbalest)
(research-completed ri-light-cavalry)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(current-age == castle-age)
(goal unit-upgrades-complete-goal 1)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(chat-local-to-self "castle unit upgrades complete")
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 15)
(set-escrow-percentage gold 15)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 14-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-15-century)
(goal aggressive-goal defensive)
=>
(set-escrow-percentage food 12)
(set-escrow-percentage gold 9)
(set-goal escrow-goal 1)
(disable-self)
)

;====15th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 15th century researches are met

(defrule
(current-age == imperial-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == 15-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(current-age == imperial-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(set-escrow-percentage food 15)
(set-escrow-percentage gold 12)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 1)
(research-completed ri-paladin)
(research-completed my-unique-research)
(research-completed pc-chivalric-order)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 2)
(research-completed ri-paladin)
(research-completed ri-elite-war-wagon)
(research-completed my-unique-research)
(research-completed pc-close-order-drill)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 2)
(research-completed ri-elite-war-wagon)
(research-completed my-unique-research)
(research-completed pc-bow-practise)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal escrow-goal 1)
(current-age == imperial-age)
(goal unit-upgrades-complete-goal 1)
=>
(chat-local-to-self "imperial unit upgrades complete")
(set-goal escrow-goal 0)
)

(defrule
(current-age >= feudal-age)
(goal escrow-goal 0)
=>
(chat-to-player my-player-number "escrow"))

;====Release Extra Escrow

(defrule
(current-age == feudal-age)
(or	(escrow-amount food > 800)
	(and	(and	(military-population < 30)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 200)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == feudal-age)
(or	(escrow-amount gold > 600)
	(and	(and	(military-population < 30)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 150)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == castle-age)
(or	(escrow-amount food > 1000)
	(and	(and	(military-population < 40)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 500)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == castle-age)
(or	(escrow-amount gold > 800)
	(and	(and	(military-population < 40)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 400)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == imperial-age)
(or	(escrow-amount food > 1500)
	(and	(and	(military-population < 50)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 800)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == imperial-age)
(or	(escrow-amount gold > 1200)
	(and	(and	(military-population < 50)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 600)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

;================================<<<<<<<<<<Walls>>>>>>>>>>================================


(defrule
(true)
=>
(set-goal wall BUILD-WALL)
(disable-self)
)

(defrule
(goal water-map 0)
(not (map-type fortress))
(not (map-type arena))
(not(map-size small))
(not(map-size tiny))
(unit-type-count gate == 0)
(game-time < 300)
=>
(enable-wall-placement 2)	
;(disable-self)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(game-time > 300)
(can-afford-complete-wall 2 stone-wall-line)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower > 0)
(military-population > 35)
=>
(build-wall 2 stone-wall-line)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(game-time > 300)
(goal wall BUILD-WALL)
(building-type-count-total gate < 8)
(can-build-gate 2)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower > 0)
(military-population > 35)
=>
(build-gate 2)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall BUILD-WALL)
(town-under-attack)
=>
(set-goal wall DONT-BUILD-WALL)
)

(defrule
(not(map-size small))
(not(map-size tiny))
(goal wall DONT-BUILD-WALL)
(not	(town-under-attack))
(military-population > 15)
=>
(set-goal wall BUILD-WALL)
)

;small
(defrule
(or(map-size small)
(map-size tiny))
(goal wall BUILD-WALL)
=>
(set-goal wall DONT-BUILD-WALL)
(disable-self)
)

#end-if

;Brittany

#load-if-defined HUN-CIV

;==========================================================================================
;I                                                                                        I
;I                                   BRETON CIVILIZATION                                  I
;I                                                                                        I
;==========================================================================================

(defrule
(game-time > 15)
=>
(chat-local-to-self "Breton civilization detected")
(disable-self))

(defrule
(true)
=>
(set-goal strategy-goal 0)
(generate-random-number 100)
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 0)
(random-number <= 50)
=>
(set-goal strategy-goal 1) ;English Alliance
(chat-to-player my-player-number "Strategy 1: English Alliance")
(disable-self)
)

(defrule
(goal strategy-goal 0)
(random-number > 50)
(random-number <= 100)
=>
(set-goal strategy-goal 2) ;Francisation
(chat-to-player my-player-number "Strategy 2: Francisation")
(disable-self)
)

;=============================<<<<<<<<<<Town Center>>>>>>>>>>==============================

;Building a town center is the most important action for an AI, especially if the AI does
;not have one.

(defrule
(building-type-count town-center < 1)
(unit-type-count villager > 2)
=>
(chat-to-player my-player-number "increase town size for town center")
(set-strategic-number sn-maximum-town-size 50)
(set-escrow-percentage wood 100)
(set-escrow-percentage stone 100)
)

(defrule
(building-type-count town-center < 1)
(can-build-with-escrow town-center)
=>
(release-escrow wood)
(release-escrow stone)
(build town-center)
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(chat-to-player every-ally "I'm rebuilding my town away from my base.")
(chat-to-player every-ally "Protect me!")
(set-strategic-number sn-maximum-food-drop-distance 25)
)

(defrule
(unit-type-count villager >= 25)
(building-type-count town-center < 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 42)
(building-type-count town-center < 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 50)
(building-type-count town-center < 4)
(building-type-count castle >= 2)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 55)
(building-type-count town-center < 5)
(building-type-count castle >= 3)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 65)
(building-type-count town-center < 7)
(building-type-count castle >= 4)
(can-build town-center)
=>
(build town-center)
)

(defrule
(unit-type-count villager >= 75)
(building-type-count town-center < 10)
(building-type-count castle >= 5)
(can-build town-center)
=>
(build town-center)
)

;===============================<<<<<<<<<<Research>>>>>>>>>>===============================

;====Age Advancement

(defrule
(can-research feudal-age)
(or	(unit-type-count villager >= 38)
	(food-amount >= 1000))
(unit-type-count-total villager >= 10)
=>
(research feudal-age)
(set-strategic-number sn-current-age to-13-century)
)

(defrule
(can-research-with-escrow castle-age)
(or	(unit-type-count villager >= 55)
	(food-amount >= 1300))
(unit-type-count villager >= 35)
=>
(release-escrow food)
(release-escrow gold)
(research castle-age)
(set-strategic-number sn-current-age to-14-century)
)

(defrule
(can-research-with-escrow imperial-age)
(or	(unit-type-count-total villager > 75)
	(food-amount >= 1400))
(unit-type-count villager >= 60)
=>
(release-escrow food)
(release-escrow gold)
(research imperial-age)
(set-strategic-number sn-current-age to-15-century)
)

;====Policy decisions

;If Strategy 1

(defrule
(goal strategy-goal 1)
(current-age >= castle-age)
(can-research-with-escrow br-english-alliance)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research english alliance")
(research br-english-alliance)
)

;If Strategy 2

(defrule
(goal strategy-goal 2)
(current-age >= castle-age)
(can-research-with-escrow br-francisation)
=>
(release-escrow food)
(release-escrow gold)
(chat-to-player my-player-number "research francisation")
(research br-francisation)
)

; -- end policy decisions --

;DARK AGE START and FEUDAL age START
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START

;Explore to find food at the beginning of the game

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 50); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 0)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 5)
(disable-self)
)

;Stop exploring when food is found

(defrule
(or	(resource-found food)
	(or	(not	(sheep-and-forage-too-far))
		(building-type-count-total mill > 0)))
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 0); to stop exploring
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 0)
(disable-self)
)

;- dark age agatherering--
(defrule
(unit-type-count villager < 8)
=>
(set-strategic-number sn-food-gatherer-percentage 100)
(set-strategic-number sn-wood-gatherer-percentage 0)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 8)
(unit-type-count villager < 10)
=>
(set-strategic-number sn-food-gatherer-percentage 90)
(set-strategic-number sn-wood-gatherer-percentage 10)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 10)
(unit-type-count villager < 15)
=>
(set-strategic-number sn-food-gatherer-percentage 70)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 15)
(unit-type-count villager < 20)
=>
(set-strategic-number sn-food-gatherer-percentage 65)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 20)
(unit-type-count villager < 25)
=>
(set-strategic-number sn-food-gatherer-percentage 52)
(set-strategic-number sn-wood-gatherer-percentage 48)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 25)
(unit-type-count villager < 30)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 4)
)

(defrule
(unit-type-count villager >= 30)
(unit-type-count villager < 35)
=>
(set-strategic-number sn-food-gatherer-percentage 41)
(set-strategic-number sn-wood-gatherer-percentage 52)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 7)
)

(defrule
(unit-type-count villager >= 35)
(unit-type-count villager < 43)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 45)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(food-amount < 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 48)
(set-strategic-number sn-wood-gatherer-percentage 38)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

(defrule
(food-amount >= 800)
(gold-amount < 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 18)
)

(defrule
(food-amount < 800)
(gold-amount >= 200)
(current-age == dark-age)
(wood-amount > 500)
=>
(set-strategic-number sn-food-gatherer-percentage 51)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(current-age == dark-age)
(strategic-number sn-current-age == to-13-century)
(building-type-count barracks > 0)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 32)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 19)
)

;- Feudal age agatherering--

(defrule
(civilian-population < 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 11)
)

(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population < 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 43)
(set-strategic-number sn-wood-gatherer-percentage 34)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 1000))
(gold-amount < 800)
(current-age >= feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 33)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 14)
)

;------



(defrule
(civilian-population >= 50)
(wood-amount < 400)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 42)
(set-strategic-number sn-wood-gatherer-percentage 41)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)


(defrule
(civilian-population >= 50)
(and(wood-amount > 400)(wood-amount < 900))
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 46)
(set-strategic-number sn-wood-gatherer-percentage 37)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 9)
)

(defrule
(civilian-population >= 50)
(wood-amount > 1000)
(gold-amount > 800)
(current-age == feudal-age)
=>
(set-strategic-number sn-food-gatherer-percentage 53)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 7)
(set-strategic-number sn-gold-gatherer-percentage 10)
)

(defrule
(strategic-number sn-stone-gatherer-percentage == 7)
(can-build farm)
=>
(build farm)
(chat-local-to-self "build extra farms")
)

;==============================<<<<<<<<<<Buildings>>>>>>>>>>===============================

;EDIT! Only build a house right when it is needed by checking for a smaller headroom

(defrule
(current-age == dark-age)
(housing-headroom < 3)
(population-headroom > 3)
(can-build house)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age == dark-age)
(housing-headroom < 5)
(population-headroom > 3)
(can-build house)
(building-type-count barracks > 0)
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(current-age >= feudal-age)
(housing-headroom < 8)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
(building-type-count archery-range > 0)
=>
(build house)
)

;end EDIT

(defrule
;(not(death-match-game))
(or	(and	(dropsite-min-distance food > -1)
		(game-time > 90))
	(or	(unit-type-count male-forager > 0)
		(or	(unit-type-count female-forager > 0)
			(unit-type-count villager > 10))))	;EDIT! In case food isn't found
(building-type-count-total mill < 1)
(can-build mill)
=>
(build mill)
;(chat-local-to-self "build first mill")
)

;---dark buildings

(defrule
(building-type-count-total lumber-camp >= 1)
(dropsite-min-distance food > -1)
(or	(unit-type-count male-hunter >= 1)
	(or	(unit-type-count female-hunter >= 1)
		(dropsite-min-distance food > 5)))
(building-type-count-total mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(build mill)
)

#load-if-defined SCANDANAVIA-MAP

(defrule
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 2)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 25)
(chat-to-player my-player-number "build Scandinavia mill")
(build mill)
)

#end-if

(defrule
(game-time > 90)
(building-type-count-total lumber-camp < 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 4)
(can-build farm)
(dropsite-min-distance food > 5)
=>
(build farm)
)

(defrule
(building-type-count-total lumber-camp >= 1)
(or	(unit-type-count villager >= 15)
	(sheep-and-forage-too-far))
(unit-type-count villager < 25)
(building-type-count farm < 8)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count mining-camp >= 1) ;EDIT - changed lumber-camp to mining-camp
(idle-farm-count < 3)
(unit-type-count villager >= 25)
(unit-type-count villager <= dark-villager-count)
(building-type-count farm < 20)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age == feudal-age)
(building-type-count-total farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age == feudal-age)
(building-type-count-total farm < 40)
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(or	(building-type-count farm < 15)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 18))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-horse-collar)
(or	(building-type-count farm < 20)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 25))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-heavy-plow)
(or	(building-type-count farm < 25)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 30))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

(defrule
(current-age >= castle-age)
(research-completed ri-crop-rotation)
(or	(building-type-count farm < 40)
	(or	(and	(wood-amount > 800)
			(building-type-count-total farm < 50))
		(idle-farm-count == 0)))
(can-build farm)
=>
(build farm)
)

;EDIT! Better lumber camp construction rules

(defrule
(or	(not	(death-match-game))
	(or	(game-time >= 300)
		(building-type-count-total mill > 0)))
(or	(unit-type-count villager >= 12)
	(wood-amount > 500))
(building-type-count lumber-camp < 1)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(building-type-count-total lumber-camp < 3)
(dropsite-min-distance wood > 5)
(can-build lumber-camp)
(dropsite-min-distance wood > -1)
(game-time > 180)
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 5)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 8)
(strategic-number sn-camp-max-distance >= 50)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(building-type-count lumber-camp < 12)
(strategic-number sn-camp-max-distance >= 70)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp >= 1)
(current-age >= castle-age)
(dropsite-min-distance wood > 4)
(can-build lumber-camp)
(strategic-number sn-camp-max-distance >= 255)
(cc-players-unit-type-count 0 915 > 10) ;915 = forest tree
=>
(build lumber-camp)
)

(defrule
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
(disable-self)
)

(defrule
(timer-triggered retreat-lumber-camp-timer)
(building-type-count lumber-camp > 0)
(current-age >= feudal-age)
(or	(unit-type-count dead-male-lumberjack > 1)
	(unit-type-count dead-female-lumberjack > 1))	;build a new camp if the enemy is
(can-build lumber-camp)					;attacking our lumberjacks
=>
(build lumber-camp)
(disable-timer retreat-lumber-camp-timer)
(enable-timer retreat-lumber-camp-timer 60)
)

;Better rules for mining camps:

(defrule
(or	(unit-type-count villager >= 25)
	(or	(gold-amount < 10)
		(current-age >= feudal-age)))
(building-type-count-total mining-camp < 1)
(can-build mining-camp)
(dropsite-min-distance gold > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(or	(unit-type-count villager >= 38)
	(and	(current-age >= feudal-age)
		(or	(building-type-count-total market > 0)
			(building-type-count-total siege-workshop > 0))))
(building-type-count mining-camp < 2)
(can-build mining-camp)
(dropsite-min-distance stone > -1)
=>
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Build mining camp. Camp distance 25.")
(build mining-camp)
)

(defrule
(current-age >= feudal-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 3)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 66 > 0)
(dropsite-min-distance gold > 3)
(dropsite-min-distance gold < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

(defrule
(current-age >= castle-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 5)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 8)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 12)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 70)
=>
(build mining-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone > -1)
(building-type-count mining-camp < 16)
(cc-players-unit-type-count 0 102 > 0)
(dropsite-min-distance stone > 3)
(dropsite-min-distance stone < 255)
(can-build mining-camp)
(strategic-number sn-camp-max-distance >= 255)
=>
(build mining-camp)
)

;end EDIT

(defrule
(can-build castle)
(or	(building-type-count-total town-center >= 3)
	(or	(and	(building-type-count-total town-center >= 2)
			(stone-amount >= 750))
		(current-age <= feudal-age)))
(building-type-count castle < 1)
=>
(build castle)
)

(defrule
(or	(unit-type-count villager >= 25)
	(wood-amount > 275))
(can-build barracks)
(building-type-count-total barracks < 1)
(or	(building-type-count-total mining-camp > 0)
	(and	(wood-amount > 275)
		(building-type-count-total lumber-camp > 0)))
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build barracks)
(building-type-count-total barracks < 2)
=>
(build barracks)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build barracks)
(building-type-count-total barracks < 4)
=>
(build barracks)
)

(defrule
(or	(unit-type-count villager >= 30)
	(and	(current-age >= feudal-age)
		(building-type-count barracks > 0)))
(can-build archery-range)
(building-type-count-total archery-range < 1)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build archery-range)
(building-type-count-total archery-range < 2)
=>
(build archery-range)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build archery-range)
(building-type-count-total archery-range < 4)
=>
(build archery-range)
)

(defrule
(not(starting-age == post-imperial-age))
(wood-amount >= 210)
(building-type-count-total blacksmith < 1)
(can-build blacksmith)
=>
(build blacksmith)
)

(defrule
(can-build market)
(building-type-count-total market < 1)
(or	(building-type-count-total siege-workshop > 0)
	(goal aggressive-goal defensive))
=>
(build market)
(chat-local-to-self "build market")
)

(defrule
(or	(unit-type-count villager >= 40)
	(and	(building-type-count-total castle > 0)
		(unit-type-count villager > 30)))
(can-build stable)
(building-type-count-total stable < 1)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 400)
(can-build stable)
(building-type-count-total stable < 2)
=>
(build stable)
)

(defrule
(current-age >= castle-age)
(wood-amount >= 600)
(food-amount >= 1200)
(gold-amount >= 1000)
(can-build stable)
(building-type-count-total stable < 4)
=>
(build stable)
)

(defrule
(or	(goal aggressive-goal aggressive)
	(or	(military-population >= 10)
		(wood-amount > 400)))
(building-type-count siege-workshop < 1)
(can-build siege-workshop)
=>
(build siege-workshop)
)

(defrule
(can-build watch-tower)
(building-type-count-total castle > 0)
(building-type-count-total watch-tower < low-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= low-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
(building-type-count castle < 2)
=>
(build castle)
)

(defrule
(can-build watch-tower)
(building-type-count castle > 1)
(building-type-count watch-tower < high-tower-count)
=>
(build watch-tower)
)

(defrule
(can-build castle)
(building-type-count watch-tower >= high-tower-count)
(or	(building-type-count-total town-center >= 3)
	(and	(building-type-count-total town-center >= 2)
		(stone-amount >= 750)))
=>
(build castle)
)

(defrule
(or	(building-type-count castle < 2)
	(building-type-count town-center < 3))
(current-age >= feudal-age)
(cc-players-unit-type-count 0 102 < 10)
(gold-amount > 600)
(stone-amount < 650)
(can-buy-commodity stone)
=>
(buy-commodity stone)
)

(defrule
(building-type-count castle >= 2)
(building-type-count bombard-tower < bombard-tower-count)
(can-build bombard-tower)
=>
(build bombard-tower))

(defrule
(building-type-count monastery < 1)
(can-build monastery)
=>
(build monastery)
)

(defrule
(not(starting-age == post-imperial-age))
(building-type-count university < 1)
(building-type-count town-center >= 2)
(building-type-count barracks >= 1)
(building-type-count market >= 1)
(building-type-count archery-range >= 1)
(can-build university)
=>
(build university)
)

#end-if
#end-if
#end-if

#load-if-not-defined DARK-AGE-START

;====Researches

(defrule
(unit-type-count villager >= 42)
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 46)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

;====Buildings

(defrule
(current-age >= feudal-age)
(housing-headroom < 6)
(population-headroom > 3) ;EDIT! I don't like to check for the number of houses because there
(can-build house)	  ;may be times where you'll need another house
=>
(build house)
)

(defrule
(wood-amount >= 500)
(building-type-count blacksmith >= 1)
(building-type-count barracks >= 1)
(current-age  >= feudal-age)
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 3)
(can-build mill)
=>
(set-strategic-number sn-mill-max-distance 35)
(build mill)
)

(defrule
;(wood-amount >= 200)
(idle-farm-count < 3)
(current-age  >= feudal-age)
(building-type-count farm < 30)
(can-build farm)
=>
(build farm)
)

(defrule
;(wood-amount >= 300)
(idle-farm-count < 2)
(civilian-population >= 42)
(current-age >= feudal-age)
(building-type-count farm < 40)
(can-build farm)
=>
(build farm)
)

#end-if

;====Princely Court Technologies

(defrule
(can-research-with-escrow pc-bow-practise)
(goal strategy-goal 1)
=>
(release-escrow food)
(release-escrow gold)
(research pc-bow-practise)
)

(defrule
(can-research-with-escrow pc-chivalric-order)
(goal strategy-goal 2)
=>
(release-escrow food)
(release-escrow gold)
(research pc-chivalric-order)
)

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-court))

(defrule
(population >= three-quarters-pop)
(can-research-with-escrow city-councils-court)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-court))

(defrule
(population >= full-pop)
(can-research-with-escrow storehouses-court)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-court))

(defrule
(population >= half-pop)
(can-research-with-escrow city-rights-hall)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research city-rights-hall)
)

(defrule
(can-research-with-escrow city-councils-hall)
=>
(release-escrow food)
(release-escrow gold)
(research city-councils-hall)
)

(defrule
(can-research-with-escrow storehouses-hall)
=>
(release-escrow food)
(release-escrow gold)
(research storehouses-hall)
)

(defrule
(building-type-count-total castle > 0)
(can-research-with-escrow roman-law-court)
(current-age >= castle-age)
=>
(release-escrow food)
(release-escrow gold)
(research roman-law-court))

(defrule
(building-type-count-total castle > 1)
(can-research-with-escrow representation-court)
=>
(release-escrow food)
(release-escrow gold)
(research representation-court))

(defrule
(building-type-count-total castle > 2)
(can-research-with-escrow fourth-estate-court)
=>
(release-escrow food)
(release-escrow gold)
(research fourth-estate-court))

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(can-research-with-escrow pc-court-clergy)
=>
(release-escrow food)
(release-escrow gold)
(research pc-court-clergy))

; -- end princely court techs

;Expensive techs

(defrule
(can-research-with-escrow my-unique-unit-upgrade)
=>
(release-escrow food)
(release-escrow gold)
(research my-unique-unit-upgrade))

(defrule
(can-research-with-escrow ri-heavy-cavalry-archer)
=>
(release-escrow food)
(release-escrow gold)
(research ri-heavy-cavalry-archer))

(defrule
(goal strategy-goal 2)
(can-research-with-escrow ri-paladin)
=>
(release-escrow food)
(release-escrow gold)
(research ri-paladin))

(defrule
(unit-type-count 912 >= miniscule-pop)
(can-research-with-escrow ri-ordonnance-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ordonnance-companies))

(defrule
(goal army-type-goal late-game)
(can-research-with-escrow ri-hussar)
=>
(release-escrow food)
(release-escrow gold)
(research ri-hussar))

;Normal techs

(defrule
(unit-type-count villager >= 4)	;EDIT! Villager production is more important than loom at the beginning of the game.
(can-research ri-loom)
(or	(food-amount < 20)
	(or	(unit-type-count villager >= dark-villager-count)
		(current-age >= feudal-age))) ;end EDIT
=>
(research ri-loom)
)

(defrule
(can-research-with-escrow ri-wheel-barrow)
=>
(release-escrow food)
(research ri-wheel-barrow)
)

(defrule
(building-type-count farm > 10)
(can-research ri-horse-collar)
=>
(research ri-horse-collar)
)

(defrule
(unit-type-count villager >= 42)
(can-research ri-double-bit-axe)
=>
(research ri-double-bit-axe)
)

(defrule
(unit-type-count villager >= 50)
(can-research ri-gold-mining)
=>
(research ri-gold-mining)
)

(defrule
(unit-type-count villager >= 60)
(can-research ri-stone-mining)
=>
(research ri-stone-mining)
)

(defrule
(can-research-with-escrow ri-pikeman)
=>
(release-escrow food)
(research ri-pikeman)
)

(defrule
(can-research-with-escrow ri-crossbow)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow)
)

(defrule
(or	(goal strategy-goal 2)
	(or	(goal army-type-goal late-game)
		(unit-type-count-total scout-cavalry-line > 5)))
(can-research-with-escrow ri-light-cavalry)
=>
(release-escrow food)
(research ri-light-cavalry)
)

(defrule
(or	(goal army-type-goal late-game)
	(unit-type-count-total skirmisher-line > 5))
(can-research-with-escrow ri-elite-skirmisher)
=>
(release-escrow gold)
(research ri-elite-skirmisher)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-bloodlines)
=>
(research ri-bloodlines)
)

(defrule
(unit-type-count archer-line >= miniscule-pop)
(can-research-with-escrow ri-crossbow-companies)
=>
(release-escrow food)
(release-escrow gold)
(research ri-crossbow-companies))

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
)

(defrule
(research-completed ri-scale-mail)
(can-research-with-escrow ri-mercenaries)
=>
(release-escrow food)
(research ri-mercenaries)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research ri-fletching)
=>
(research ri-fletching)
)

(defrule
(or	(research-completed ri-scale-mail)
	(research-completed ri-scale-barding))
(can-research ri-forging)
=>
(research ri-forging)
)

(defrule
(research-completed ri-fletching)
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
)

(defrule
(research-completed ri-forging)
(player-in-game any-ally)
(can-research ri-cartography)
=>
(research ri-cartography)
)

(defrule
(building-type-count-total castle >= 1)
(can-research-with-escrow ri-murder-holes)
=>
(release-escrow food)
(research ri-murder-holes)
)

(defrule
(civilian-population >= 60)
(can-research-with-escrow ri-hand-cart)
=>
(release-escrow food)
(research ri-hand-cart)
)

(defrule
(civilian-population >= 60)
(can-research ri-bow-saw)
=>
(research ri-bow-saw)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-gold-shaft-mining)
=>
(release-escrow food)
(research ri-gold-shaft-mining)
)

(defrule
(civilian-population >= 80)
(can-research-with-escrow ri-stone-shaft-mining)
=>
(release-escrow food)
(research ri-stone-shaft-mining)
)

(defrule
(can-research ri-heavy-plow)
=>
(research ri-heavy-plow)
)

(defrule
(research-completed ri-chain-mail)
(can-research-with-escrow ri-iron-casting)
=>
(release-escrow food)
(research ri-iron-casting)
)

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count archery-range > 0))
(can-research-with-escrow ri-bodkin-arrow)
=>
(release-escrow food)
(research ri-bodkin-arrow)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
)

(defrule
(unit-type-count 912 >= miniscule-pop)
(can-research-with-escrow ri-chain-barding)
=>
(release-escrow food)
(research ri-chain-barding)
)

(defrule
(or	(unit-type-count 906 >= miniscule-pop)
	(building-type-count-total barracks > 0))
(can-research-with-escrow ri-chain-mail)
=>
(release-escrow food)
(research ri-chain-mail)
)

(defrule
(research-completed ri-bodkin-arrow)
(can-research-with-escrow ri-thumb-ring)
=>
(release-escrow food)
(research ri-thumb-ring))

(defrule
(can-research ri-ballistics)
=>
(research ri-ballistics)
)

(defrule
(unit-type-count-total religious-units >= 2)
(can-research ri-sanctity)
=>
(research ri-sanctity)
)

(defrule
(research-completed ri-ballistics)
(can-research-with-escrow ri-stonecutting)	;treadmill crane
=>
(release-escrow food)
(research ri-stonecutting)
)

(defrule
(research-completed ri-chain-mail)
(can-research ri-masonry)
=>
(research ri-masonry)
)

(defrule
(research-completed ri-chain-mail)
(player-in-game any-ally)
(can-research ri-caravan)
=>
(research ri-caravan)
)

(defrule
(or	(research-completed ri-bodkin-arrow)
	(building-type-count-total castle > 0))
(can-research ri-town-watch)
=>
(research ri-town-watch)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-tracking)
=>
(research ri-tracking)
)

(defrule
(current-age >= castle-age)
(unit-type-count 906 >= miniscule-pop)
(food-amount >= 400)
(can-research ri-squires)
=>
(research ri-squires)
)

(defrule
(or	(unit-type-count 912 >= miniscule-pop)
	(current-age >= castle-age))
(not	(research-available ri-bloodlines))
(can-research ri-husbandry)
=>
(research ri-husbandry)
)

(defrule
(unit-type-count-total archer-line > 5)
(can-research-with-escrow ri-arbalest)
=>
(release-escrow food)
(release-escrow gold)
(research ri-arbalest)
)

(defrule
(can-research-with-escrow ri-conscription)
=>
(release-escrow food)
(release-escrow gold)
(research ri-conscription))

(defrule
(can-research-with-escrow ri-two-man-saw)
=>
(release-escrow food)
(research ri-two-man-saw))

(defrule
(can-research-with-escrow ri-capped-ram)
=>
(release-escrow food)
(research ri-capped-ram))

(defrule
(unit-type-count battering-ram-line >= miniscule-pop)
(can-research-with-escrow ri-siege-ram)
=>
(release-escrow food)
(research ri-siege-ram))

(defrule
(or	(unit-type-count 900 >= miniscule-pop)
	(building-type-count-total archery-range > 0))
(can-research-with-escrow ri-bracer)
=>
(release-escrow food)
(release-escrow gold)
(research ri-bracer)
)

(defrule
(building-type-count-total barracks > 0)
(can-research-with-escrow ri-plate-mail)
=>
(release-escrow food)
(research ri-plate-mail)
)

(defrule
(not	(research-available ri-plate-mail))
(can-research-with-escrow ri-blast-furnace)
=>
(release-escrow food)
(release-escrow gold)
(research ri-blast-furnace)
)

(defrule
(can-research-with-escrow ri-ring-archer-armor)
=>
(release-escrow food)
(release-escrow gold)
(research ri-ring-archer-armor))

(defrule
(not	(research-available ri-blast-furnace))
(can-research-with-escrow ri-guilds)
=>
(release-escrow food)
(release-escrow gold)
(research ri-guilds))

(defrule
(can-research 408)	;Spies
=>
(research 408)
)

(defrule
(unit-type-count-total cavalry-archer-line > 0)
(can-research-with-escrow ri-parthian-tactics)
=>
(release-escrow food)
(research ri-parthian-tactics)
)

(defrule
(or	(research-completed ri-bracer)
	(or	(building-type-count-total watch-tower > high-tower-count)
		(building-type-count-total castle > 1)))
(current-age >= imperial-age)
(can-research ri-town-patrol)
=>
(research ri-town-patrol)
)

(defrule
(military-population >= 50)
(can-research-with-escrow ri-chemistry)
=>
(release-escrow food)
(release-escrow gold)
(research ri-chemistry)
)

(defrule
(or	(players-unit-type-count any-enemy religious-units >= 5)
	(civ-selected aztec))
(can-research ri-heresy)
=>
(research ri-heresy)
)

(defrule
(or	(players-unit-type-count any-enemy religious-units >= 10)
	(civ-selected aztec))
(can-research-with-escrow ri-faith)
=>
(release-escrow food)
(release-escrow gold)
(research ri-faith)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-atonement)
=>
(release-escrow gold)
(research ri-atonement)
)

(defrule
(or	(goal priest-goal for-healing)
	(goal priest-goal for-converting))
(unit-type-count religious-units >= 2)
(can-research-with-escrow ri-fervor)
=>
(release-escrow gold)
(research ri-fervor)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-redemption)
=>
(release-escrow gold)
(research ri-redemption)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-illumination)
=>
(research ri-illumination)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count religious-units >= 4)
(can-research-with-escrow ri-block-printing)
=>
(release-escrow gold)
(research ri-block-printing)
)

(defrule
(civ-selected aztec)	;Denmark
(can-research ri-theocracy)
(unit-type-count religious-units >= 4)
(gold-amount > 800)
=>
(research ri-theocracy)
)

(defrule
(civ-selected aztec)	;Denmark
(can-research ri-herbal-medicine)
(unit-type-count religious-units >= 4)
(gold-amount > 800)
(current-age == imperial-age)
=>
(research ri-herbal-medicine)
)

;==========================<<<<<<<<<<Civilian Training>>>>>>>>>>===========================

;====Villagers

(defrule
(unit-type-count-total villager < dark-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training Dark Age Villager")
)

(defrule
(current-age == feudal-age)
(unit-type-count-total villager < feudal-villager-count)
(can-train villager)
=>
(train villager)
;(chat-local-to-self "Training 13 th Century Villager")
)

(defrule
(current-age >= castle-age)
(not(not (goal water-map 0)))
(unit-type-count-total villager < villager-pop)
(can-train villager)
=>
(train villager)
)

(defrule
(current-age >= castle-age)
(not (goal water-map 0))
(unit-type-count-total villager < villager-pop-watermap)
(can-train villager)
=>
(train villager)
)

(defrule				;The AI cannot handle more than 100 villagers
(unit-type-count villager > 100)	;The extra villagers will just stand idle.
=>
(delete-unit villager)
)

;====Sheep

;AIs cannot gather from trained sheep.

;====Priests

;EDIT! More selective priest training
(defrule
(goal priest-goal for-relics)
(unit-type-count-total monk < 2)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-healing)
(unit-type-count-total monk < 4)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

(defrule
(goal priest-goal for-converting)
(unit-type-count-total monk < 6)
(can-train monk)
(not	(town-under-attack))
(unit-type-count dead-monk == 0)
(players-unit-type-count every-enemy scout-cavalry-line < 10)
=>
(train monk)
)

;====Trade Carts are in the bottom of the AI

;==========================<<<<<<<<<<Military Training>>>>>>>>>>===========================

(defrule
(goal army-type-goal 0)
(unit-type-count-total trebuchet < tiny-pop)
;(goal unit-upgrades-complete-goal 1)
(not	(town-under-attack))
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(current-age == feudal-age)
(can-train battering-ram-line)
(or	(unit-type-count-total battering-ram-line < 1)
	(and	(enemy-buildings-in-town)
		(unit-type-count battering-ram-line < miniscule-pop)))
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

(defrule
(current-age == castle-age)
(can-train battering-ram-line)
(unit-type-count-total battering-ram-line < tiny-pop)
(not	(town-under-attack))
;(goal unit-upgrades-complete-goal 1)
=>
(train battering-ram-line))

;====Strategy 1:

;==12/13th Century training:

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < tiny-pop)))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= dark-villager-count))
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train skirmisher-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < small-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < tiny-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total tarkan-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total tarkan-line < tiny-pop))
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total knight-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total knight-line < miniscule-pop))
(can-train knight)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(current-age == feudal-age)
(or	(and	(unit-type-count-total eagle-warrior-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train eagle-warrior-line)
(or	(food-amount > 55)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train eagle-warrior-line))

;==14/15th Century

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total tarkan-line < large-pop)
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(or	(and	(unit-type-count-total cavalry-archer-line < large-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total cavalry-archer-line < medium-pop))
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < medium-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age == imperial-age)
(or	(and	(unit-type-count-total mercenary-longbow < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total mercenary-longbow < small-pop))
(can-train mercenary-longbow)
;(goal unit-upgrades-complete-goal 1)
=>
(train mercenary-longbow))

(defrule
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age == castle-age)
(or	(and	(unit-type-count-total archer-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < small-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Rights (only Herwrs change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total tarkan-line < half-pop)
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

;City Councils (Coustiliers, Mercenary longbowmen, and crossbowmen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total knight < large-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age == imperial-age)
(or	(and	(unit-type-count-total mercenary-longbow < large-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total mercenary-longbow < medium-pop))
(can-train mercenary-longbow)
;(goal unit-upgrades-complete-goal 1)
=>
(train mercenary-longbow))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age == castle-age)
(or	(and	(unit-type-count-total archer-line < large-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < medium-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;Municipal Storehouses (only Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total tarkan-line < miniscule-pop)
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < miniscule-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total knight < miniscule-pop)
(can-train knight)
;(goal unit-upgrades-complete-goal 1)
=>
(train knight))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age == imperial-age)
(unit-type-count-total mercenary-longbow < miniscule-pop)
(can-train mercenary-longbow)
;(goal unit-upgrades-complete-goal 1)
=>
(train mercenary-longbow))

(defrule
(goal strategy-goal 1)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age == castle-age)
(unit-type-count-total archer-line < miniscule-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Rights (Light Cavalry change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;Municipal Storehouses (Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 1)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;====Strategy 2:

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < miniscule-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < tiny-pop)))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= dark-villager-count))
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total archer-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < medium-pop)))
(can-train archer-line)
(gold-amount >= 240)
(wood-amount >= 225)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(current-age == dark-age)
(or	(unit-type-count-total spearman-line < small-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < medium-pop)))
(can-train skirmisher-line)
(food-amount >= 835)
(wood-amount >= 225)
=>
(train spearman-line))

;Advancing to 13th century

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total archer-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total archer-line < small-pop)))
(can-train archer-line)
(wood-amount >= 400)
(gold-amount >= 220)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(strategic-number sn-current-age == to-13-century)
(or	(unit-type-count-total spearman-line < tiny-pop)
	(and	(town-under-attack)
		(unit-type-count-total spearman-line < small-pop)))
(can-train skirmisher-line)
(wood-amount >= 400)
(food-amount >= 500)
=>
(train spearman-line))

;13th century

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total spearman-line < medium-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total spearman-line < small-pop))
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total archer-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total archer-line < tiny-pop))
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total tarkan-line < small-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total tarkan-line < tiny-pop))
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total scout-cavalry-line < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total tarkan-line < miniscule-pop))
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(current-age == feudal-age)
(or	(and	(unit-type-count-total new-cavalier < tiny-pop)
		(goal aggressive-goal aggressive))
	(unit-type-count-total new-cavalier < miniscule-pop))
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= feudal-villager-count))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

;==14/15th Century

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total tarkan-line < large-pop)
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < large-pop)
;(goal unit-upgrades-complete-goal 1)
(can-train cavalry-archer-line)
=>
(train cavalry-archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < medium-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age == imperial-age)
(unit-type-count-total hand-cannoneer < medium-pop)	;Genoese Crossbowman
(can-train hand-cannoneer)
;(goal unit-upgrades-complete-goal 1)
=>
(train hand-cannoneer))

(defrule
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age == castle-age)
(unit-type-count-total archer-line < medium-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Rights (only Pikemen change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;City Councils (only Chevaliers, Genoese Crossbowmen, and Crossbowmen change)

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < large-pop)
(can-train new-cavalier)
(or	(food-amount > 100)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age == imperial-age)
(unit-type-count-total hand-cannoneer < large-pop)	;Genoese Crossbowman
(can-train hand-cannoneer)
;(goal unit-upgrades-complete-goal 1)
=>
(train hand-cannoneer))

(defrule
(research-completed city-councils-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age == castle-age)
(unit-type-count-total archer-line < large-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;Municipal Storehouses (only Herwrs change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal 0)
(current-age >= castle-age)
(unit-type-count-total tarkan-line < half-pop)
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

;==Late Game (little gold left)

;No Pop researches

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total skirmisher-line < half-pop)
(can-train skirmisher-line)
(or	(food-amount > 55)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train skirmisher-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < large-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total tarkan-line < miniscule-pop)
(can-train tarkan-line)
(or	(food-amount > 90)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train tarkan-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total cavalry-archer-line < miniscule-pop)
(can-train cavalry-archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train cavalry-archer-line))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age >= castle-age)
(unit-type-count-total new-cavalier < miniscule-pop)
(can-train new-cavalier)
;(goal unit-upgrades-complete-goal 1)
=>
(train new-cavalier))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age == imperial-age)
(unit-type-count-total hand-cannoneer < miniscule-pop)
(can-train hand-cannoneer)
;(goal unit-upgrades-complete-goal 1)
=>
(train hand-cannoneer))

(defrule
(goal strategy-goal 2)
(goal army-type-goal late-game)
(unit-type-count trade-cart > 8)
(current-age == castle-age)
(unit-type-count-total archer-line < miniscule-pop)
(can-train archer-line)
;(goal unit-upgrades-complete-goal 1)
=>
(train archer-line))

;City Rights (Light Cavalry change)

(defrule
(research-completed city-rights-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total scout-cavalry-line < large-pop)
(can-train scout-cavalry-line)
(or	(food-amount > 110)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train scout-cavalry-line))

;Municipal Storehouses (Pikemen change)

(defrule
(research-completed storehouses-court)
(goal strategy-goal 2)
(goal army-type-goal late-game)
(current-age >= castle-age)
(unit-type-count-total spearman-line < half-pop)
(can-train spearman-line)
(or	(food-amount > 65)
	(unit-type-count villager >= villager-pop))
;(goal unit-upgrades-complete-goal 1)
=>
(train spearman-line))

;Other

;(defrule
;(unit-type-count-total mangonel-line < miniscule-pop)
;(can-train mangonel-line)
;;(goal unit-upgrades-complete-goal 1)
;=>
;(train mangonel-line))

;================================<<<<<<<<<<Escrow>>>>>>>>>>================================

;Escrow:

;turn escrow-goal on if escrow is desired
;use escrow for immediate researches (determined if the unit-upgrades-complete-goal is met)
;use a smaller escrow for advancing to the next age

;never use escrow for wood or stone:

(defrule
(true)
=>
(set-escrow-percentage wood 0)
(set-escrow-percentage stone 0)
(disable-self)
)

;====Escrow Goal: 0

(defrule
(goal escrow-goal 0)
=>
(set-escrow-percentage food 0)
(set-escrow-percentage gold 0)
(release-escrow food)
(release-escrow gold)
)

;====Town Under Attack:

     ;never use escrow when under attack

(defrule
(town-under-attack)
(players-military-population any-enemy > 12)
(military-population < 15)
=>
(set-goal escrow-goal 0)
)

;====12th century:

     ;use escrow during advance to 13th century to prepare for 13th century researches

(defrule
(current-age == dark-age)
=>
(set-goal unit-upgrades-complete-goal 1)
(set-goal escrow-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == to-13-century)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====13th century:

     ;turn off escrow immediately if going for a flush
     ;turn off escrow when 13th century researches are met
     ;use escrow during advance to 14th century to prepare for 14th century researches

(defrule
(current-age == feudal-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 1)
(research-completed ri-pikeman)
(research-completed ri-crossbow)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == feudal-age)
(goal strategy-goal 2)
(research-completed ri-pikeman)
(research-completed ri-crossbow)
(research-completed ri-light-cavalry)
=>
(set-goal unit-upgrades-complete-goal 1)
(chat-local-to-self "13th century unit upgrades complete")
)

(defrule
(current-age == feudal-age)
(goal unit-upgrades-complete-goal 1)
(goal aggressive-goal defensive)
(goal escrow-goal 0)
=>
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 4)
(set-escrow-percentage gold 3)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 13-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-14-century)
=>
(set-escrow-percentage food 7)
(set-escrow-percentage gold 7)
(set-goal escrow-goal 1)
(disable-self)
)

;====14th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 14th century researches are met
     ;use escrow to save up resources for 15th century
     ;use escrow during advance to 15th century to prepare for 15th century researches

(defrule
(current-age == castle-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(current-age == castle-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 30)
=>
(set-escrow-percentage food 14)
(set-escrow-percentage gold 10)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 1)
(research-completed ri-pikeman)
(research-completed ri-crossbow)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age == castle-age)
(goal strategy-goal 2)
(research-completed ri-pikeman)
(research-completed ri-light-cavalry)
(research-completed ri-crossbow)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(current-age == castle-age)
(goal unit-upgrades-complete-goal 1)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(chat-local-to-self "castle unit upgrades complete")
(release-escrow food)
(release-escrow gold)
(set-escrow-percentage food 12)
(set-escrow-percentage gold 9)
(set-goal escrow-goal 1)
)

(defrule
(strategic-number sn-current-age == 14-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(strategic-number sn-current-age == to-15-century)
(goal aggressive-goal defensive)
=>
(set-escrow-percentage food 10)
(set-escrow-percentage gold 8)
(set-goal escrow-goal 1)
(disable-self)
)

;====15th century:

     ;turn off escrow immediately if training an army to attack
     ;turn off escrow when 15th century researches are met

(defrule
(current-age == imperial-age)
=>
(set-goal unit-upgrades-complete-goal 0)
(disable-self)
)

(defrule
(strategic-number sn-current-age == 15-century)
;(goal aggressive-goal aggressive)
(or	(strategic-number military-superiority == -2)
	(military-population < 20))
(goal escrow-goal 1)
=>
(set-goal escrow-goal 0)
;(set-goal unit-upgrades-complete-goal 0)
)

(defrule
(current-age == imperial-age)
;(goal aggressive-goal defensive)
(goal escrow-goal 0)
(goal unit-upgrades-complete-goal 0)
(strategic-number military-superiority > -2)
(military-population >= 20)
=>
(set-escrow-percentage food 15)
(set-escrow-percentage gold 12)
(set-goal escrow-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 1)
(research-completed ri-elite-tarkan)
(research-completed ri-heavy-cavalry-archer)
(research-completed ri-ordonnance-companies)
(research-completed pc-bow-practise)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal unit-upgrades-complete-goal 0)
(current-age >= imperial-age)
(goal strategy-goal 2)
(research-completed ri-elite-tarkan)
(research-completed ri-heavy-cavalry-archer)
(research-completed ri-paladin)
(research-completed ri-ordonnance-companies)
(research-completed pc-chivalric-order)
=>
(set-goal unit-upgrades-complete-goal 1)
)

(defrule
(goal escrow-goal 1)
(current-age == imperial-age)
(goal unit-upgrades-complete-goal 1)
=>
(chat-local-to-self "imperial unit upgrades complete")
(set-goal escrow-goal 0)
)

(defrule
(current-age >= feudal-age)
(goal escrow-goal 0)
=>
(chat-to-player my-player-number "escrow"))

;====Release Extra Escrow

(defrule
(current-age == feudal-age)
(or	(escrow-amount food > 800)
	(and	(and	(military-population < 30)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 200)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == feudal-age)
(or	(escrow-amount gold > 600)
	(and	(and	(military-population < 30)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 150)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == castle-age)
(or	(escrow-amount food > 1000)
	(and	(and	(military-population < 40)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 500)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == castle-age)
(or	(escrow-amount gold > 800)
	(and	(and	(military-population < 40)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 400)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

(defrule
(current-age == imperial-age)
(or	(escrow-amount food > 1500)
	(and	(and	(military-population < 50)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount food > 800)))
(goal escrow-goal 1)
=>
(release-escrow food)
(chat-to-player my-player-number "releasing food")
)

(defrule
(current-age == imperial-age)
(or	(escrow-amount gold > 1200)
	(and	(and	(military-population < 50)
			(strategic-number sn-score-superiority < 0))
		(escrow-amount gold > 600)))
(goal escrow-goal 1)
=>
(release-escrow gold)
(chat-to-player my-player-number "releasing gold")
)

#end-if

;Burgundians

#load-if-defined TEUTONIC-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Burgundian civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research bu-english-alliance)
(can-research bu-flemish-relations)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research bu-english-alliance)
(can-research bu-flemish-relations)
=>
(research bu-english-alliance)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research bu-english-alliance)
(can-research bu-flemish-relations)
=>
(research bu-flemish-relations)
)

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)
(can-research ri-halberdier)
=>
(research ri-halberdier)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)
(can-research ri-chain-mail)
=>
(research ri-chain-mail)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)
(can-research ri-iron-casting)
=>
(research ri-iron-casting)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)
(can-research ri-forging)
=>
(research ri-forging)
(disable-self))

(defrule
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

; UNITS

(defrule
(not(research-completed my-unique-unit-upgrade))
(unit-type-count my-unique-unit-line < small-pop)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(not(research-completed my-unique-unit-upgrade))
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(not(research-completed my-unique-unit-upgrade))
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count knight-line < small-pop)
(can-train knight-line)
=>
(train knight-line))

(defrule
(unit-type-count italian-infantry < small-pop)
(can-train italian-infantry)
=>
(train italian-infantry))

(defrule
(unit-type-count mangonel-line < tiny-pop)
(can-train mangonel-line)
=>
(train mangonel-line))

(defrule
(unit-type-count scorpion-line < tiny-pop)
(can-train scorpion-line)
=>
(train scorpion-line))

(defrule
(unit-type-count skirmisher-line < small-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Danish
#load-if-defined AZTEC-CIV

; RESEARCHES *****************

(defrule
(current-age == castle-age)
(can-research de-baltic-crusades)
(can-research de-kalmar-union)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research de-baltic-crusades)
(can-research de-kalmar-union)
=>
(research de-baltic-crusades)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research de-baltic-crusades)
(can-research de-kalmar-union)
=>
(research de-kalmar-union)
)

(defrule
(can-research ri-man-at-arms)
=>
(research ri-man-at-arms)
(disable-self))

(defrule
(can-research ri-long-swordsman)
=>
(research ri-long-swordsman)
(disable-self))

(defrule
(can-research ri-champion)
=>
(research ri-champion)
(disable-self))

(defrule
(can-research ri-crossbow)
=>
(research ri-crossbow)
(disable-self))

(defrule
(can-research ri-arbalest)
=>
(research ri-arbalest)
(disable-self))

(defrule
(can-research ri-fletching)
=>
(research ri-fletching)
(disable-self))

(defrule
(can-research ri-bodkin-arrow)
=>
(research ri-bodkin-arrow)
(disable-self))

(defrule
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

(defrule
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
(disable-self))

;MILITARY **************************

(defrule
(can-train spearman-line)
(not(research-completed ri-arbalest))
(unit-type-count spearman-line < small-pop)
=>
(train spearman-line))

(defrule
(can-train skirmisher-line)
(not(research-completed ri-arbalest))
(unit-type-count skirmisher-line < small-pop)
=>
(train skirmisher-line))

(defrule
(can-train militiaman-line)
(not(research-completed ri-arbalest))
(unit-type-count militiaman-line < medium-pop)
=>
(train militiaman-line))

(defrule
(can-train militiaman-line)
(research-completed ri-arbalest)
(unit-type-count militiaman-line < medium-pop)
=>
(train militiaman-line))

(defrule
(can-train my-unique-unit)
(research-completed ri-arbalest)
(unit-type-count my-unique-unit < medium-pop)
=>
(train my-unique-unit))

(defrule
(can-train archer-line)
(research-completed ri-arbalest)
(unit-type-count archer-line < small-pop)
=>
(train archer-line))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

(defrule
(research-completed ri-long-swordsman)
(research-completed ri-arbalest)
(can-train trebuchet)
(research-completed ri-crossbow)
(unit-type-count trebuchet < 3)
=>
(train trebuchet))

#end-if

;English

#load-if-defined SPANISH-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "English civilization detected")
(disable-self))

; BUILDINGS

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research en-nobility)
(can-research en-combined-arms)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research en-nobility)
(can-research en-combined-arms)
=>
(research en-nobility)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research en-combined-arms)
(can-research en-nobility)
=>
(research en-combined-arms)
)

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

(defrule
(can-research ri-light-cavalry)
=>
(research ri-light-cavalry)
(disable-self))

(defrule
(can-research ri-hussar)
=>
(research ri-hussar)
(disable-self))

(defrule
(can-research ri-husbandry)
=>
(research ri-husbandry)
(disable-self))

(defrule
(can-research ri-forging)
=>
(research ri-forging)
(disable-self))

(defrule
(can-research ri-iron-casting)
=>
(research ri-iron-casting)
(disable-self))

(defrule
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
(disable-self))

(defrule
(can-research ri-chain-barding)
=>
(research ri-chain-barding)
(disable-self))

(defrule
(can-research ri-bloodlines)
=>
(research ri-bloodlines)
(disable-self))

; UNITS

(defrule
(unit-type-count my-unique-unit-line < 12)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(research-completed ri-hussar)
(unit-type-count scout-cavalry-line < 15)
(can-train scout-cavalry-line)
=>
(train scout-cavalry-line))

(defrule
(unit-type-count spearman-line < 12)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count scorpion-line < 15)
(can-train scorpion-line)
=>
(train scorpion-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Flanders

#load-if-defined GOTHIC-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Flemish civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research fl-chamber-of-the-council)
(can-research fl-three-members-of-flanders)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research fl-chamber-of-the-council)
(can-research fl-three-members-of-flanders)
=>
(research fl-chamber-of-the-council)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research fl-chamber-of-the-council)
(can-research fl-three-members-of-flanders)
=>
(research fl-three-members-of-flanders)
)

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

(defrule

(can-research ri-elite-skirmisher)
=>
(research ri-elite-skirmisher)
(disable-self))

(defrule
(can-research ri-man-at-arms)
=>
(research ri-man-at-arms)
(disable-self))

(defrule
(can-research ri-long-swordsman)
=>
(research ri-long-swordsman)
(disable-self))

(defrule
(can-research ri-fletching)
=>
(research ri-fletching)
(disable-self))

(defrule
(can-research ri-bodkin-arrow)
=>
(research ri-bodkin-arrow)
(disable-self))

(defrule
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

; UNITS

(defrule
(unit-type-count trebuchet < 3)
(not(unit-type-count trebuchet >= 4))
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(unit-type-count crossbowman < 10)
(can-train crossbowman)
=>
(train crossbowman))

(defrule
(unit-type-count pikeman < 10)
(can-train pikeman)
=>
(train pikeman))

(defrule
(unit-type-count my-unique-unit-line < 10)
(can-train my-unique-unit-line)
=>
(train pikeman))

(defrule
(unit-type-count elite-skirmisher < 10)
(can-train elite-skirmisher)
=>
(train elite-skirmisher))

(defrule
(unit-type-count militiaman-line < 20)
(can-train militiaman-line)
=>
(train militiaman-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(unit-type-count beguine < tiny-pop)
(can-train beguine)
=>
(train beguine))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;French

#load-if-defined FRANKISH-CIV

;BUILDINGS ************************************

(defrule
(game-time > 14)
=>
(chat-local-to-self "French Civilization detected")
(disable-self))

;Researches
(defrule
(current-age == castle-age)
(can-research fra-papal-protector)
(can-research fra-communes)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research fra-papal-protector)
(can-research fra-communes)
=>
(research fra-papal-protector)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research fra-papal-protector)
(can-research fra-communes)
=>
(research fra-communes)
)

(defrule
(research-completed ri-paladin)
(can-research ri-scale-barding)
=>
(research ri-scale-barding)
(disable-self))

(defrule
(research-completed ri-paladin)
(can-research ri-chain-barding)
=>
(research ri-chain-barding)
(disable-self))

(defrule
(can-research ri-paladin)
=>
(research ri-paladin)
(disable-self))

; UNITS

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count skirmisher-line < small-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(can-train knight-line)
(unit-type-count knight-line < medium-pop)
=>
(train knight-line))

(defrule
(can-train cavalier)
(unit-type-count cavalier < small-pop)
=>
(train cavalier))

(defrule
(can-train scots-guard)
(unit-type-count scots-guard < small-pop)
=>
(train scots-guard))

(defrule
(can-train swiss-pike)
(unit-type-count swiss-pike < small-pop)
=>
(train swiss-pike))

(defrule
(research-completed ri-paladin)
(can-train knight-line)
(unit-type-count skirmisher-line < medium-pop)
=>
(train skirmisher-line))

(defrule
(can-train trebuchet)
(unit-type-count trebuchet < tiny-pop)
=>
(train trebuchet))

(defrule
(can-train bombard-cannon)
(unit-type-count bombard-cannon < tiny-pop)
=>
(train bombard-cannon))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if 

;Friesland

#load-if-defined VIKING-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Frisian civilization detected")
(disable-self))

; BUILDINGS

(defrule
(building-type-count house < 2)
(building-type-count assembly-hall < 2)
(can-build assembly-hall)
=>
(build assembly-hall))

;RESEARCHES
(defrule
(current-age == castle-age)
(can-research fri-schieringers)
(can-research fri-vetkopers)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research fri-schieringers)
(can-research fri-vetkopers)
=>
(research fri-schieringers)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research fri-schieringers)
(can-research fri-vetkopers)
=>
(research fri-vetkopers)
)

(defrule
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

(defrule
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

(defrule
(can-research ri-chain-mail)
=>
(research ri-chain-mail)
(disable-self))

(defrule
(can-research ri-plate-mail)
=>
(research ri-plate-mail)
(disable-self))

(defrule
(can-research ri-forging)
=>
(research ri-forging)
(disable-self))

(defrule
(can-research ri-iron-casting)
=>
(research ri-iron-casting)
(disable-self))

(defrule
(can-research ri-blast-furnace)
=>
(research ri-blast-furnace)
(disable-self))

(defrule
(can-research ri-elite-skirmisher)
=>
(research ri-elite-skirmisher)
(disable-self))

(defrule
(can-research ri-elite-huskarl)
=>
(research ri-elite-huskarl)
(disable-self))

(defrule
(can-research ri-elite-janissary)
=>
(research ri-elite-janissary)
(disable-self))

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

; UNITS

(defrule
(unit-type-count spearman-line < 5)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count spearman-line < 10)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count skirmisher-line < 10)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(unit-type-count my-unique-unit-line < 6)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(unit-type-count my-unique-unit-line < 50)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(unit-type-count scorpion-line < 10)
(can-train scorpion-line)
=>
(train scorpion-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Genoese

#load-if-defined TURKISH-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Genoese civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research ge-guelfi)
(can-research ge-ghibellini)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research ge-guelfi)
(can-research ge-ghibellini)
=>
(research ge-guelfi)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research ge-guelfi)
(can-research ge-ghibellini)
=>
(research ge-ghibellini)
)

(defrule
(research-completed my-unique-research)
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
(disable-self))

(defrule
(research-completed my-unique-research)
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
(disable-self))

(defrule
(can-research ri-bombard-tower)
=>
(research ri-bombard-tower)
(disable-self))

(defrule
(can-research my-unique-research)
=>
(research my-unique-research)
(disable-self))

(defrule
(research-completed my-unique-research)
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

(defrule
(research-completed my-unique-research)
(research-completed my-unique-unit-upgrade)
(can-research ri-heavy-scorpion)
=>
(research ri-heavy-scorpion)
(disable-self))

; UNITS

(defrule
(research-completed my-unique-research)
(research-completed ri-bombard-tower)
(unit-type-count my-unique-unit-line < 60)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(unit-type-count skirmisher-line < medium-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(unit-type-count hand-cannoneer < small-pop)
(can-train hand-cannoneer)
=>
(train hand-cannoneer))

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count militiaman-line < small-pop)
(can-train militiaman-line)
=>
(train militiaman-line))

(defrule
(not(research-completed ri-bombard-tower))
(unit-type-count bombard-cannon < 4)
(can-train bombard-cannon)
=>
(train bombard-cannon))

(defrule
(research-completed my-unique-research)
(unit-type-count bombard-cannon < 10)
(can-train bombard-cannon)
=>
(train bombard-cannon))

(defrule
(research-completed ri-heavy-scorpion)
(unit-type-count scorpion-line < 15)
(can-train scorpion-line)
=>
(train scorpion-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(unit-type-count carroccio < tiny-pop)
(can-train carroccio)
=>
(train carroccio))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Guelders

#load-if-defined BYZANTINE-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Guelder civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research gu-baltic-crusades)
(can-research gu-rhenish-league)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research gu-baltic-crusades)
(can-research gu-rhenish-league)
=>
(research gu-baltic-crusades)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research gu-baltic-crusades)
(can-research gu-rhenish-league)
=>
(research gu-rhenish-league)
)

; UNITS

(defrule
(unit-type-count skirmisher-line < medium-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(unit-type-count hand-cannoneer < medium-pop)
(can-train hand-cannoneer)
=>
(train hand-cannoneer))

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count militiaman-line < small-pop)
(can-train militiaman-line)
=>
(train militiaman-line))

(defrule
(unit-type-count my-unique-unit-line < medium-pop)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Helvetians

#load-if-defined MAYAN-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Helvetian civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research he-communal-democracy)
(can-research he-noble-rule)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research he-communal-democracy)
(can-research he-noble-rule)
=>
(research he-communal-democracy)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research he-communal-democracy)
(can-research he-noble-rule)
=>
(research he-noble-rule)
)

(defrule
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)
(can-research ri-elite-eagle-warrior)
=>
(research ri-elite-eagle-warrior)
(disable-self))

(defrule
(can-research ri-fletching)
=>
(research ri-fletching)
(disable-self))

(defrule
(can-research ri-bodkin-arrow)
=>
(research ri-bodkin-arrow)
(disable-self))

(defrule
(can-research ri-bracer)
=>
(research ri-bracer)
(disable-self))

(defrule
(can-research ri-ballistics)
=>
(research ri-ballistics)
(disable-self))

(defrule
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
(disable-self))

(defrule
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
(disable-self))

;UNITS

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count militiaman-line < small-pop)
(can-train militiaman-line)
=>
(train militiaman-line))

(defrule
(unit-type-count skirmisher-line < medium-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(unit-type-count eagle-warrior-line < small-pop)
(can-train eagle-warrior-line)
=>
(train eagle-warrior-line))

(defrule
(unit-type-count plumed-archer < small-pop)
(can-train plumed-archer)
=>
(train plumed-archer))

(defrule
(unit-type-count cavalry-archer-line < small-pop)
(can-train cavalry-archer-line)
=>
(train cavalry-archer-line))

(defrule
(unit-type-count mangonel-line < tiny-pop)
(can-train mangonel-line)
=>
(train mangonel-line))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

#end-if

;Polish

#load-if-defined SARACEN-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Polish civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research ostsiedlung)
(can-research union-of-krewo)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research ostsiedlung)
(can-research union-of-krewo)
=>
(research ostsiedlung)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research ostsiedlung)
(can-research union-of-krewo)
=>
(research union-of-krewo)
)

(defrule
(can-research cuirass)
=>
(research cuirass)
(disable-self))

; UNITS

(defrule
(research-completed ostsiedlung)
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count camel-line < medium-pop)
(can-train camel-line)
=>
(train camel-line))

(defrule
(unit-type-count scout-cavalry-line < medium-pop)
(can-train scout-cavalry-line)
=>
(train scout-cavalry-line))

(defrule
(not(research-completed union-of-krewo))
(unit-type-count militiaman-line < medium-pop)
(can-train militiaman-line)
=>
(train militiaman-line))

(defrule
(not(research-completed union-of-krewo))
(unit-type-count szlachcic < small-pop)
(can-train szlachcic)
=>
(train szlachcic))

(defrule
(research-completed union-of-krewo)
(unit-type-count szlachcic < medium-pop)
(can-train szlachcic)
=>
(train szlachcic))

(defrule
(unit-type-count bajoras < medium-pop)
(can-train bajoras)
=>
(train bajoras))

(defrule
(unit-type-count cavalry-archer-line < small-pop)
(can-train cavalry-archer-line)
=>
(train cavalry-archer-line))

(defrule
(research-completed union-of-krewo)
(can-train cavalry-archer-line)
(unit-type-count archer-line < small-pop)
(can-train archer-line)
=>
(train archer-line))

(defrule
(can-train cavalry-archer-line)
(unit-type-count skirmisher-line < small-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(not(can-train cavalry-archer-line))
(unit-type-count archer-line < medium-pop)
(can-train archer-line)
=>
(train archer-line))

(defrule
(not(can-train cavalry-archer-line))
(unit-type-count skirmisher-line < medium-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(unit-type-count battering-ram-line < tiny-pop)
(can-train battering-ram-line)
=>
(train battering-ram-line))

#end-if

;Savoy

#load-if-defined PERSIAN-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Savoyan civilization detected")
(disable-self))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research sav-statuta-sabaudiate)
(can-research sav-imperial-vicariate)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research sav-statuta-sabaudiate)
(can-research sav-imperial-vicariate)
=>
(research sav-statuta-sabaudiate)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research sav-statuta-sabaudiate)
(can-research sav-imperial-vicariate)
=>
(research sav-imperial-vicariate)
)

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

(defrule
(can-research ri-heavy-scorpion)
=>
(research ri-heavy-scorpion)
(disable-self))

(defrule

(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

(defrule
(can-research ri-chain-mail)
=>
(research ri-chain-mail)
(disable-self))

; UNITS

(defrule
(not(research-completed ri-heavy-scorpion))
(unit-type-count my-unique-unit-line < 1)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(not(research-completed ri-heavy-scorpion))
(unit-type-count spearman-line < 12)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(not(research-completed ri-heavy-scorpion))
(unit-type-count scorpion-line < 5)
(can-train scorpion-line)
=>
(train scorpion-line))

(defrule
(research-completed ri-heavy-scorpion)
(unit-type-count scorpion-line < 30)
(can-train scorpion-line)
=>
(train scorpion-line))

(defrule
(research-completed ri-heavy-scorpion)
(unit-type-count spearman-line < 30)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(research-completed ri-heavy-scorpion)
(unit-type-count my-unique-unit-line < 10)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Saxony

#load-if-defined JAPANESE-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Saxon civilization detected")
(disable-self))

; RESEARCHES

(defrule
(current-age == castle-age)
(can-research sax-hanseatic-league)
(can-research sax-kurfurst)
(can-research sax-teutonic-order)
=>
(generate-random-number 100)
(disable-self)
)

(defrule
(current-age == castle-age)
(random-number <= 33)
(can-research sax-hanseatic-league)
(can-research sax-kurfurst)
(can-research sax-teutonic-order)
=>
(research sax-hanseatic-league)
)

(defrule
(current-age == castle-age)
(random-number > 33)
(random-number <= 66)
(can-research sax-hanseatic-league)
(can-research sax-kurfurst)
(can-research sax-teutonic-order)
=>
(research sax-kurfurst)
)

(defrule
(current-age == castle-age)
(random-number > 66)
(can-research sax-hanseatic-league)
(can-research sax-kurfurst)
(can-research sax-teutonic-order)
=>
(research sax-teutonic-order)
)

(defrule
(not(research-completed sax-hanseatic-league))
(not(research-completed sax-kurfurst))
(not(research-completed sax-teutonic-order))
(unit-type-count archer-line < medium-pop)
(can-train archer-line)
=>
(train archer-line))

(defrule
(not(research-completed sax-hanseatic-league))
(not(research-completed sax-kurfurst))
(not(research-completed sax-teutonic-order))
(unit-type-count cavalier < small-pop)
(can-train cavalier)
=>
(train cavalier))

(defrule
(can-research ri-onager)
=>
(research ri-onager)
(disable-self))

(defrule
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

(defrule
(can-research ri-chain-mail)
=>
(research ri-chain-mail)
(disable-self))

(defrule
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

;TO
(defrule
(current-age == castle-age)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(generate-random-number 100)
(disable-self)
)

(defrule
(current-age == castle-age)
(random-number <= 33)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(research sax/to-bow-practise)
)

(defrule
(current-age == castle-age)
(random-number > 33)
(random-number <= 66)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(research to-swordsmanship)
)

(defrule
(current-age == castle-age)
(random-number > 66)
(can-research sax/to-bow-practise)
(can-research to-swordsmanship)
(can-research sax/to-chivalric-order)
=>
(research sax/to-chivalric-order)
)

(defrule
(can-research to-murder-holes)
=>
(research to-murder-holes)
(disable-self))

(defrule
(can-research to-alchemy)
=>
(research to-alchemy)
(disable-self))

(defrule
(can-research to-fortified-wall)
=>
(research to-fortified-wall)
(disable-self))

(defrule
(can-research to-treadmill-crane)
=>
(research to-treadmill-crane)
(disable-self))

; UNITS

;TO

(defrule
(unit-type-count halbruder < small-pop)
(can-train halbruder)
=>
(train halbruder))

(defrule
(unit-type-count lett-auxiliary < medium-pop)
(can-train lett-auxiliary)
=>
(train lett-auxiliary))

(defrule
(unit-type-count liv-auxiliary < medium-pop)
(can-train liv-auxiliary)
=>
(train liv-auxiliary))

(defrule
(unit-type-count riga-militia < medium-pop)
(can-train riga-militia)
=>
(train riga-militia))


(defrule
(research-completed sax-teutonic-order)
(unit-type-count mangonel-line < tiny-pop)
(can-train mangonel-line)
=>
(train mangonel-line))


(defrule
(unit-type-count ritterbruder < small-pop)
(can-train ritterbruder)
=>
(train ritterbruder))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

;Hanseatic league

(defrule
(current-age == castle-age)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(generate-random-number 100)
(disable-self)
)

(defrule
(current-age == castle-age)
(random-number <= 33)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(research sax/to-bow-practise)
)

(defrule
(current-age == castle-age)
(random-number > 33)
(random-number <= 66)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(research sax-militia-guilds)
)

(defrule
(current-age == castle-age)
(random-number > 66)
(can-research sax/to-bow-practise)
(can-research sax-militia-guilds)
(can-research sax/to-chivalric-order)
=>
(research sax/to-chivalric-order)
)

(defrule
(research-completed sax-hanseatic-league)
(unit-type-count skirmisher-line < medium-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(research-completed sax-hanseatic-league)
(unit-type-count archer-line < medium-pop)
(can-train archer-line)
=>
(train archer-line))

(defrule
(research-completed sax-hanseatic-league)
(unit-type-count rhenish-knight < medium-pop)
(can-train rhenish-knight)
=>
(train rhenish-knight))

(defrule
(research-completed sax-hanseatic-league)
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(research-completed sax-hanseatic-league)
(unit-type-count knight-line < medium-pop)
(can-train knight-line)
=>
(train knight-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(research-completed sax-hanseatic-league)
(unit-type-count mangonel-line < tiny-pop)
(can-train mangonel-line)
=>
(train mangonel-line))

;Kurfurst

(defrule
(research-completed sax-kurfurst)
(unit-type-count skirmisher-line < medium-pop)
(can-train skirmisher-line)
=>
(train skirmisher-line))

(defrule
(research-completed sax-kurfurst)
(unit-type-count archer-line < medium-pop)
(can-train archer-line)
=>
(train archer-line))

(defrule
(research-completed sax-kurfurst)
(unit-type-count cavalier < medium-pop)
(can-train cavalier)
=>
(train cavalier))

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(research-completed sax-kurfurst)
(unit-type-count knight-line < medium-pop)
(can-train knight-line)
=>
(train knight-line))

(defrule
(research-completed sax-kurfurst)
(unit-type-count mangonel-line < tiny-pop)
(can-train mangonel-line)
=>
(train mangonel-line))

#end-if

;Scottish

#load-if-defined CELTIC-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Scottish civilization detected")
(disable-self))

; BUILDINGS

(defrule
(building-type-count barracks < 2)
(can-build barracks)
=>
(build barracks))

(defrule
(building-type-count archery-range < 2)
(can-build archery-range)
=>
(build archery-range))

(defrule
(building-type-count siege-workshop < 2)
(can-build siege-workshop)
=>
(build siege-workshop))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research sc-normanisation)
(can-research sc-gaelicisation)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research sc-normanisation)
(can-research sc-gaelicisation)
=>
(research sc-normanisation)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research sc-normanisation)
(can-research sc-gaelicisation)
=>
(research sc-gaelicisation)
)

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

(defrule
(can-research ri-elite-skirmisher)
=>
(research ri-elite-skirmisher)
(disable-self))

(defrule
(can-research ri-fletching)
=>
(research ri-fletching)
(disable-self))

(defrule
(can-research ri-murder-holes)
=>
(research ri-murder-holes)
(disable-self))

(defrule
(can-research ri-scale-mail)
=>
(research ri-scale-mail)
(disable-self))

(defrule
(can-research ri-chain-mail)
=>
(research ri-chain-mail)
(disable-self))

(defrule
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

; MILITARY

(defrule
(unit-type-count elite-skirmisher < medium-pop)
(can-train elite-skirmisher)
=>
(train elite-skirmisher))

(defrule
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count scorpion < small-pop)
(can-train scorpion)
=>
(train scorpion))

(defrule
(unit-type-count mangonel-line < tiny-pop)
(can-train mangonel-line)
=>
(train mangonel-line))

(defrule
(unit-type-count my-unique-unit-line < small-pop)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;Welsh
#load-if-defined BRITON-CIV

(defrule
(game-time > 15)
=>
(chat-local-to-self "Welsh civilization detected")
(disable-self))


; BUILDINGS IMPERIAL AGE

(defrule
(building-type-count assembly-hall < 1)
(can-build assembly-hall)
=>
(build assembly-hall))

(defrule
(building-type-count barracks < 3)
(can-build barracks)
=>
(build barracks))

(defrule
(building-type-count assembly-hall < 3)
(can-build assembly-hall)
=>
(build assembly-hall))

(defrule
(building-type-count siege-workshop < 1)
(can-build siege-workshop)
=>
(build siege-workshop))

(defrule
(building-type-count stable < 3)
(can-build stable)
=>
(build stable))

; RESEARCHES
(defrule
(current-age == castle-age)
(can-research wa-english-vassal)
(can-research wa-independence)
=>
(generate-random-number 100)
)

(defrule
(current-age == castle-age)
(random-number > 50)
(can-research wa-english-vassal)
(can-research wa-independence)
=>
(research wa-english-vassal)
)

(defrule
(current-age == castle-age)
(random-number <= 50)
(can-research wa-english-vassal)
(can-research wa-independence)
=>
(research wa-independence)
)

(defrule
(can-research ri-pikeman)
=>
(research ri-pikeman)
(disable-self))

(defrule
(research-completed my-unique-unit-upgrade)

(can-research ri-halberdier)
=>
(research ri-halberdier)
(disable-self))

(defrule
(can-research ri-fletching)
=>
(research ri-fletching)
(disable-self))

(defrule
(can-research ri-bodkin-arrow)
=>
(research ri-bodkin-arrow)
(disable-self))

(defrule
(can-research ri-bracer)
=>
(research ri-bracer)
(disable-self))

(defrule
(can-research my-unique-unit-upgrade)
=>
(research my-unique-unit-upgrade)
(disable-self))

(defrule
(can-research ri-padded-archer-armor)
=>
(research ri-padded-archer-armor)
(disable-self))

(defrule
(can-research ri-leather-archer-armor)
=>
(research ri-leather-archer-armor)
(disable-self))

; MILITARY

(defrule
(not(research-completed ri-bracer))
(unit-type-count my-unique-unit-line < medium-pop)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(not(research-completed ri-bracer))
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(research-completed ri-bracer)
(unit-type-count trebuchet >= 1)
(unit-type-count my-unique-unit-line < medium-pop)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line))

(defrule
(research-completed ri-bracer)
(unit-type-count spearman-line < medium-pop)
(can-train spearman-line)
=>
(train spearman-line))

(defrule
(unit-type-count trebuchet < tiny-pop)
(can-train trebuchet)
=>
(train trebuchet))

(defrule
(can-train battering-ram-line)
(unit-type-count battering-ram-line < tiny-pop)
=>
(train battering-ram-line))

#end-if

;----------------------------------------Attack Condition-----------------------------------------

#load-if-not-defined DIFFICULTY-EASIEST

;(defrule
;(military-population > 20)
;(unit-type-count battering-ram-line >= 1)
;=>
;(set-strategic-number sn-percent-attack-soldiers 100)
;(set-strategic-number sn-maximum-attack-group-size 100)
;(set-strategic-number sn-minimum-attack-group-size 20)
;(attack-now))

;=====<<<TSA strategy>>>=====

(defrule
(goal tsa-type-goal 2)
(not	(strategic-number sn-enemy-sighted-response-distance == 144))
=>
;(set-strategic-number sn-maximum-town-size 20)
(set-strategic-number sn-enemy-sighted-response-distance 144)
)

(defrule
(not	(goal tsa-type-goal 2))
(not	(strategic-number sn-enemy-sighted-response-distance == 7))
=>
;(set-strategic-number sn-maximum-town-size 20)
(set-strategic-number sn-enemy-sighted-response-distance 7)

)

;Aggressive strategy

(defrule
(military-population > 20)
(goal aggressive-goal aggressive)
(players-building-count any-enemy > 0)
(not	(town-under-attack))
(goal attack-type-goal TSA)
;(goal attack-goal 0)
(goal tsa-attack-status-goal 0)
(or	(unit-type-count battering-ram-line > 0)
	(military-population > 25))
(strategic-number sn-score-superiority > -2)
(goal delay-attack-goal 0)
=>
(set-goal attack-goal 1)
(set-goal tsa-type-goal 2)
(set-goal tsa-attack-status-goal 1)
;(set-strategic-number sn-maximum-town-size 20)
(disable-self)
)


;Defensive strategy

(defrule
(military-population > 25)
(or	(current-age >= castle-age)
	(strategic-number military-superiority > 0))
(players-building-count any-enemy > 0)
(not	(town-under-attack))
(goal attack-type-goal TSA)
;(goal attack-goal 0)
(goal tsa-attack-status-goal 0)
(unit-type-count battering-ram-line > 0)
(strategic-number sn-score-superiority > -2)
(goal delay-attack-goal 0)
=>
(set-goal attack-goal 1)
(set-goal tsa-type-goal 2)
(set-goal tsa-attack-status-goal 1)
;(set-strategic-number sn-maximum-town-size 20)
(disable-self)
)

(defrule
(goal TSA-detected-goal not-detected)
(goal tsa-type-goal 2)
(enemy-buildings-in-town)
(goal attack-goal 2)
=>
(set-goal TSA-detected-goal detected)
(chat-local-to-self "buildings in town")
(disable-timer tsa-timer)
(enable-timer tsa-timer 20)
)

(defrule
(goal TSA-detected-goal detected)
(timer-triggered tsa-timer)
(goal tsa-type-goal 2)
(enemy-buildings-in-town)
=>
(set-strategic-number sn-maximum-town-size 30)
(chat-local-to-self "restart TSA")
(set-goal TSA-detected-goal not-detected)
(disable-timer tsa-timer)
)

(defrule
(goal tsa-type-goal 2)
(goal tsa-attack-status-goal 1)
(goal attack-goal 1)
(or	(military-population < 17)
	(and	(players-military-population any-enemy >= 20)
		(military-population < 25)))
=>
(set-goal tsa-type-goal 0)
(set-goal attack-goal 0)
(set-goal tsa-attack-status-goal 2)
(set-strategic-number sn-maximum-town-size 20)
(set-strategic-number sn-enemy-sighted-response-distance 7)
(chat-local-to-self "end TSA attack")
(disable-self)
)

(defrule
(military-population > 45)
(current-age >= castle-age)
(players-building-count any-enemy > 0)
(nor	(town-under-attack)
	(enemy-buildings-in-town))
(goal attack-type-goal TSA)
(goal attack-goal 0)
(goal tsa-attack-status-goal 2)
(goal tsa-type-goal 0)
(unit-type-count battering-ram-line > 0)
(strategic-number sn-score-superiority > -2)
(goal delay-attack-goal 0)
=>
(set-goal attack-goal 1)
(set-goal tsa-type-goal 2)
)

(defrule
(goal tsa-type-goal 2)
(goal tsa-attack-status-goal 2)
(goal attack-goal 1)
(or	(military-population < 35)
	(and	(players-military-population any-enemy >= 35)
		(military-population < 40)))
=>
(set-goal tsa-type-goal 0)
(set-goal attack-goal 0)
(set-strategic-number sn-maximum-town-size 20)
(set-strategic-number sn-enemy-sighted-response-distance 7)
(chat-local-to-self "end TSA attack")
)

(defrule
(current-age == imperial-age)
(goal tsa-type-goal 2)
(goal tsa-attack-status-goal 2)
(goal attack-goal 1)
(or	(military-population < 50)
	(and	(players-military-population any-enemy >= 50)
		(military-population < 60)))
=>
(set-goal tsa-type-goal 0)
(set-goal attack-goal 0)
(set-strategic-number sn-maximum-town-size 20)
(set-strategic-number sn-enemy-sighted-response-distance 7)
(chat-local-to-self "end TSA attack")
)

(defrule
(goal attack-type-goal TSA)
(current-age <= feudal-age)
(goal attack-goal 1)
(or	(and	(goal aggressive-goal aggressive)
		(military-population > 20))
	(and	(goal aggressive-goal defensive)
		(military-population > 25)))
=>
(set-goal attack-goal 2)
)

(defrule
(goal attack-type-goal TSA)
(current-age == castle-age)
(goal attack-goal 1)
(military-population > 55)
=>
(set-goal attack-goal 2)
)

(defrule
(goal attack-type-goal TSA)
(current-age == imperial-age)
(goal attack-goal 1)
(military-population > 75)
=>
(set-goal attack-goal 2)
)

;=====<<<Attack Now strategy>>>=====

;====First attack

(defrule
(military-population > 25)
(or	(current-age >= castle-age)
	(strategic-number sn-score-superiority >= 2))
(players-building-count any-enemy > 0)
(goal attack-type-goal NORMAL)
;(goal attack-goal 0)
(goal attack-status-goal 0)
(unit-type-count battering-ram-line > 0)
(strategic-number sn-score-superiority > -2)
(goal delay-attack-goal 0)
=>
(set-goal attack-goal 1)
(set-goal attack-status-goal 1)
(chat-to-player my-player-number "ready to attack")
(disable-self)
)

;successive attacks

(defrule
(timer-triggered attack-timer)
(military-population > 45)
(or	(current-age >= castle-age)
	(strategic-number military-superiority > 0))
(players-building-count any-enemy > 0)
(goal attack-type-goal NORMAL)
(goal attack-status-goal 1)
(unit-type-count battering-ram-line > 0)
(strategic-number sn-score-superiority > -2)
(goal delay-attack-goal 0)
=>
(chat-to-player my-player-number "ready to attack again")
(set-goal attack-status-goal 2)
(set-goal attack-goal 1)
)

(defrule
(or	(town-under-attack)
	(enemy-buildings-in-town))
(goal attack-type-goal NORMAL)
(goal attack-goal 2)
=>
(set-goal attack-goal 0)
)

(defrule
(goal attack-type-goal NORMAL)
(goal attack-status-goal 1)
(goal attack-goal 2)
=>
(attack-now)
(disable-timer attack-timer)
(enable-timer attack-timer first-attack-interval)
(chat-to-player my-player-number "Attack now: First Attack")
(set-goal tsa-type-goal 0)
(disable-self)
)

(defrule
(timer-triggered attack-timer)
(goal attack-type-goal NORMAL)
(goal attack-status-goal 2)
(goal attack-goal 2)
=>
(attack-now)
(disable-timer attack-timer)
(enable-timer attack-timer attack-timer-interval)
(chat-to-player my-player-number "Attack now: Later Attacks")
(set-goal tsa-type-goal 0)
)

(defrule
(timer-triggered attack-timer)
(goal attack-goal 2)
(or	(or	(military-population <= 24)
		(and	(goal attack-status-goal 1)
			(military-population <= 18)))
	(or	(nor	(town-under-attack)
			(enemy-buildings-in-town))
		(unit-type-count battering-ram-line == 0)))
=>
(set-goal attack-goal 0)
(chat-to-player my-player-number "stop attacking")
)

(defrule
(current-age == castle-age)
(timer-triggered attack-timer)
(goal attack-goal 2)
(or	(or	(military-population <= 35)
		(and	(goal attack-status-goal 1)
			(military-population <= 18)))
	(or	(nor	(town-under-attack)
			(enemy-buildings-in-town))
		(unit-type-count battering-ram-line == 0)))
=>
(set-goal attack-goal 0)
(chat-to-player my-player-number "stop attacking")
)

(defrule
(current-age == imperial-age)
(timer-triggered attack-timer)
(goal attack-goal 2)
(or	(or	(military-population <= 50)
		(and	(goal attack-status-goal 1)
			(military-population <= 18)))
	(or	(nor	(town-under-attack)
			(enemy-buildings-in-town))
		(unit-type-count battering-ram-line == 0)))
=>
(set-goal attack-goal 0)
(chat-to-player my-player-number "stop attacking")
)

(defrule
(goal attack-type-goal NORMAL)
(current-age <= feudal-age)
(goal attack-goal 1)
(military-population > 25)
=>
(set-goal attack-goal 2)
)

(defrule
(goal attack-type-goal NORMAL)
(current-age == castle-age)
(goal attack-goal 1)
(military-population > 55)
=>
(set-goal attack-goal 2)
)

(defrule
(goal attack-type-goal NORMAL)
(current-age == imperial-age)
(goal attack-goal 1)
(military-population > 75)
=>
(set-goal attack-goal 2)
)

(defrule
(military-population > 50)
(players-building-count any-enemy == 0)
(player-in-game any-enemy)
(strategic-number sn-task-ungrouped-soldiers == 0)
=>
(set-strategic-number sn-task-ungrouped-soldiers 1)
)

(defrule
(strategic-number sn-task-ungrouped-soldiers == 1)
(players-building-count any-enemy > 0)
=>
(set-strategic-number sn-task-ungrouped-soldiers 0)
)

#end-if

;----------------------------------------------start Goals-----------------------------------------
(defrule
(true)
=>
(set-strategic-number military-superiority 0)
(disable-self)
)


;-----------------------------------------------end goals -------------------------------------------------

;map detection

; ============== MAP IDENTIFICATION

;0 = land map (Arabia, Arena, Black Forest, Fortress, Ghost Lake, Mongolia, Oasis, Silver Rush, Yucatan)
;1 = water map - small navy (Highland, Rivers, Salt Marsh, Scandinavia, Central Europe)
;2 = water map - medium navy (Baltic, Coastal, Continental, Meditteranean, Nomad, Low Countries, Norse Lands, Northern Italy)
;3 = islands map - large navy (Archipelago, Crater Lake, Islands, Migration, Team Islands, Britain, Byzantium, France, Iberia, Italy, Western Europe)

#load-if-defined ARABIA-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined ARCHIPELAGO-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a large navy")
(disable-self)
)
#end-if

#load-if-defined ARENA-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined BALTIC-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a medium navy")
(disable-self)
)
#end-if

#load-if-defined BLACK-FOREST-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined COASTAL-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a medium navy")
(disable-self)
)
#end-if

#load-if-defined CONTINENTAL-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a medium navy")
(disable-self)
)
#end-if

#load-if-defined CRATER-LAKE-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a large navy")
(disable-self)
)
#end-if

#load-if-defined FORTRESS-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined GHOST-LAKE-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined GOLD-RUSH-MAP	;Silver Rush
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined HIGHLAND-MAP
(defrule
(true)
=>
(set-goal water-map 1)
(chat-to-player my-player-number "34 Build a small navy")
(disable-self)
)
#end-if

#load-if-defined ISLANDS-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a large navy")
(disable-self)
)
#end-if

#load-if-defined MEDITERRANEAN-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a medium navy")
(disable-self)
)
#end-if

#load-if-defined MIGRATION-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a large navy")
(disable-self)
)
#end-if

#load-if-defined MONGOLIA-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined NOMAD-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a medium navy")
(disable-self)
)
#end-if

#load-if-defined OASIS-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined RIVERS-MAP
(defrule
(true)
=>
(set-goal water-map 1)
(chat-to-player my-player-number "34 Build a small navy")
(disable-self)
)
#end-if

#load-if-defined SALT-MARSH-MAP
(defrule
(true)
=>
(set-goal water-map 1)
(chat-to-player my-player-number "34 Build a small navy")
(disable-self)
)
#end-if

#load-if-defined SCANDINAVIA-MAP
(defrule
(true)
=>
(set-goal water-map 1)
(chat-to-player my-player-number "34 Build a small navy")
(disable-self)
)
#end-if

#load-if-defined TEAM-ISLANDS-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a large navy")
(disable-self)
)
#end-if

#load-if-defined YUCATAN-MAP
(defrule
(true)
=>
(set-goal water-map 0)
(chat-to-player my-player-number "35 Don't build a navy")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-BYZANTIUM-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a navy - Byzantium")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-CARIBBEAN-MAP	;Western Europe
(defrule
(true)
=>(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a navy - Western Europe")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-ENGLAND-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a navy - England")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-ITALY-MAP
(defrule
(true)
=>
(set-goal water-map 3)
(chat-to-player my-player-number "34 Build a navy")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-MIDEAST-MAP		;Central Europe
(defrule
(true)
=>
(set-goal water-map 1)
(chat-to-player my-player-number "34 Build a small navy - Central Europe")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-NIPPON-MAP		;Northern Italy
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a navy - Northern Italy")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-NORSE-LANDS-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a navy - Norse Lands")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-SPAIN-MAP
(defrule
(true)
=>
(set-goal water-map 1)
(chat-to-player my-player-number "34 Build a navy - Iberia")
(disable-self)
)
#end-if

#load-if-defined REAL-WORLD-TEXAS-MAP		;Low Countries
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a navy - Low Countries")
(disable-self)
)
#end-if

#load-if-defined SCENARIO-MAP
(defrule
(true)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a navy - Scenario")
(disable-self)
)
#end-if

(defrule
(goal water-map NOTICE)
=>
(set-goal water-map 2)
(chat-to-player my-player-number "34 Build a navy - Other")
(disable-self)
)
;---end map detection

(defrule
	(player-in-game any-ally)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 500)
	(disable-self)
)

(defrule
	(current-age >= castle-age)
=>	
	(set-strategic-number sn-mill-max-distance 40)
	(disable-self)
)

;end EDIT

(defrule
(true)
=>
(set-strategic-number sn-maximum-town-size 10)
(set-strategic-number sn-mill-max-distance 15)
(set-strategic-number sn-camp-max-distance 8)
(disable-self)
)

;EDIT! - Here are some better rules to increase the town and camp distances.

;(defrule
;(current-age >= dark-age)
;(game-time >= 400)
;=>
;(set-strategic-number sn-mill-max-distance 25)
;(set-strategic-number sn-camp-max-distance 25)
;(disable-self)
;)

(defrule
	(goal tsa-type-goal 0)
	(current-age == castle-age)
	(nor	(town-under-attack)
		(enemy-buildings-in-town))
	(military-population > 20)
=>
	(set-goal tsa-type-goal 1)
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(military-population > 55)
	(strategic-number sn-maximum-town-size < 45)
	(not	(enemy-buildings-in-town))
	(not	(strategic-number sn-maximum-town-size == 45))
	(strategic-number military-superiority >= 1)
	(goal delay-attack-goal 0)
=>
	(set-strategic-number sn-maximum-town-size 45)
	(chat-to-player my-player-number "TSA => 45")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(strategic-number sn-maximum-town-size > 45)
	(enemy-buildings-in-town)
	(goal delay-attack-goal 0)
=>
	(set-strategic-number sn-maximum-town-size 45)
	(chat-to-player my-player-number "TSA => 45")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(military-population > 45)
	(strategic-number sn-maximum-town-size < 40)
	(not	(enemy-buildings-in-town))
	(not	(strategic-number sn-maximum-town-size == 40))
	(strategic-number military-superiority >= 0)
	(goal delay-attack-goal 0)
=>
	(set-strategic-number sn-maximum-town-size 40)
	(chat-to-player my-player-number "TSA => 40")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(strategic-number sn-maximum-town-size > 40)
	(enemy-buildings-in-town)
	(goal delay-attack-goal 0)
=>
	(set-strategic-number sn-maximum-town-size 40)
	(chat-to-player my-player-number "TSA => 40")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(military-population > 35)
	(strategic-number sn-maximum-town-size < 35)
	(not	(enemy-buildings-in-town))
	(not	(strategic-number sn-maximum-town-size == 35))
	(strategic-number military-superiority >= 0)
	(goal delay-attack-goal 0)
=>
	(set-strategic-number sn-maximum-town-size 35)
	(chat-to-player my-player-number "TSA => 35")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(strategic-number sn-maximum-town-size > 35)
	(enemy-buildings-in-town)
	(not	(strategic-number sn-maximum-town-size == 35))
	(strategic-number military-superiority >= 0)
	(goal delay-attack-goal 0)
=>
	(set-strategic-number sn-maximum-town-size 35)
	(chat-to-player my-player-number "TSA => 35")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(military-population > 25)
	(military-population <= 30)
	(not	(enemy-buildings-in-town))
	(not	(strategic-number sn-maximum-town-size == 30))
=>
	(set-strategic-number sn-maximum-town-size 30)
	(chat-to-player my-player-number "TSA => 30")
)

(defrule
	(goal tsa-type-goal 1)
	(current-age >= castle-age)
	(military-population > 20)
	(military-population <= 25)
	(not	(enemy-buildings-in-town))
	(not	(strategic-number sn-maximum-town-size == 25))
=>
	(set-strategic-number sn-maximum-town-size 25)
	(chat-to-player my-player-number "TSA => 25")
)

(defrule
	(goal tsa-type-goal 1)
=>
	(set-goal tsa-type-goal 0)
)

(defrule
	(building-type-count-total barracks > 0)
	(unit-type-count-total villager >= 25)
=>
	(set-strategic-number sn-maximum-town-size 14)
	(chat-to-player my-player-number "TSA => 14")
	(disable-self)
)

(defrule
	(current-age >= feudal-age)
	(building-type-count-total stable > 0)
	(strategic-number sn-maximum-town-size < 16)
=>
	(set-strategic-number sn-maximum-town-size 16)
	(chat-to-player my-player-number "TSA => 16")
	(disable-self)
)

(defrule
	(current-age >= feudal-age)
	(or	(building-type-count-total market > 0)
		(or	(building-type-count-total siege-workshop > 0)
			(military-population > 25)))
	(strategic-number sn-maximum-town-size < 18)
=>
	(set-strategic-number sn-maximum-town-size 18)
	(chat-to-player my-player-number "TSA => 18")
	(disable-self)
)

(defrule
	(current-age == castle-age)
=>
	(set-strategic-number sn-maximum-town-size 20)
	(chat-to-player my-player-number "TSA => 20")
	(disable-self)
)

;===========================<<<<<<<<<<Town Size Attack>>>>>>>>>>===========================

;These town size rules are based on Tea's Goose AI.

(defrule
   (strategic-number sn-maximum-town-size <= 240)
   (strategic-number sn-maximum-town-size > 220)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 999)
   (chat-local-to-self "Max TS.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 220)
   (strategic-number sn-maximum-town-size > 200)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 240)
   (chat-local-to-self "TS 240.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 200)
   (strategic-number sn-maximum-town-size > 190)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 220)
   (chat-local-to-self "TS 220.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 190)
   (strategic-number sn-maximum-town-size > 180)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 200)
   (chat-local-to-self "TS 200.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 180)
   (strategic-number sn-maximum-town-size > 170)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 190)
   (chat-local-to-self "TS 190.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 170)
   (strategic-number sn-maximum-town-size > 160)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 180)
   (chat-local-to-self "TS 180.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 160)
   (strategic-number sn-maximum-town-size > 150)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 170)
   (chat-local-to-self "TS 170.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 150)
   (strategic-number sn-maximum-town-size > 140)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 160)
   (chat-local-to-self "TS 160.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 140)
   (strategic-number sn-maximum-town-size > 135)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 150)
   (chat-local-to-self "TS 150.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 135)
   (strategic-number sn-maximum-town-size > 130)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 140)
   (chat-local-to-self "TS 140.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 130)
   (strategic-number sn-maximum-town-size > 125)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 135)
   (chat-local-to-self "TS 135.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 125)
   (strategic-number sn-maximum-town-size > 120)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 130)
   (chat-local-to-self "TS 130.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 120)
   (strategic-number sn-maximum-town-size > 115)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 125)
   (chat-local-to-self "TS 125.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 115)
   (strategic-number sn-maximum-town-size > 110)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 120)
   (chat-local-to-self "TS 120.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 110)
   (strategic-number sn-maximum-town-size > 105)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 115)
   (chat-local-to-self "TS 115.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 105)
   (strategic-number sn-maximum-town-size > 100)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 110)
   (chat-local-to-self "TS 110.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 100)
   (strategic-number sn-maximum-town-size > 96)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 105)
   (chat-local-to-self "TS 105.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 96)
   (strategic-number sn-maximum-town-size > 92)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 100)
   (chat-local-to-self "TS 100.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 92)
   (strategic-number sn-maximum-town-size > 88)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 96)
   (chat-local-to-self "TS 96.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 88)
   (strategic-number sn-maximum-town-size > 84)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 92)
   (chat-local-to-self "TS 92.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 84)
   (strategic-number sn-maximum-town-size > 80)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 88)
   (chat-local-to-self "TS 88.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 80)
   (strategic-number sn-maximum-town-size > 76)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 84)
   (chat-local-to-self "TS 84.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 76)
   (strategic-number sn-maximum-town-size > 72)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 80)
   (chat-local-to-self "TS 80.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 72)
   (strategic-number sn-maximum-town-size > 70)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 76)
   (chat-local-to-self "TS 76.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 70)
   (strategic-number sn-maximum-town-size > 68)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 72)
   (chat-local-to-self "TS 72.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 68)
   (strategic-number sn-maximum-town-size > 66)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 70)
   (chat-local-to-self "TS 70.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 66)
   (strategic-number sn-maximum-town-size > 64)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 68)
   (chat-local-to-self "TS 68.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 64)
   (strategic-number sn-maximum-town-size > 62)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 66)
   (chat-local-to-self "TS 66.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 62)
   (strategic-number sn-maximum-town-size > 60)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 64)
   (chat-local-to-self "TS 64.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 60)
   (strategic-number sn-maximum-town-size > 58)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 62)
   (chat-local-to-self "TS 62.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 58)
   (strategic-number sn-maximum-town-size > 56)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 60)
   (chat-local-to-self "TS 60.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 56)
   (strategic-number sn-maximum-town-size > 54)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 58)
   (chat-local-to-self "TS 58.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 54)
   (strategic-number sn-maximum-town-size > 52)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 56)
   (chat-local-to-self "TS 56.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 52)
   (strategic-number sn-maximum-town-size > 50)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 54)
   (chat-local-to-self "TS 54.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 50)
   (strategic-number sn-maximum-town-size > 48)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 52)
   (chat-local-to-self "TS 52.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 48)
   (strategic-number sn-maximum-town-size > 46)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 50)
   (chat-local-to-self "TS 50.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 46)
   (strategic-number sn-maximum-town-size > 44)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 48)
   (chat-local-to-self "TS 48.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 44)
   (strategic-number sn-maximum-town-size > 42)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 46)
   (chat-local-to-self "TS 46.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 42)
   (strategic-number sn-maximum-town-size > 40)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 44)
   (chat-local-to-self "TS 44.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 40)
   (strategic-number sn-maximum-town-size > 38)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 42)
   (chat-local-to-self "TS 42.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 38)
   (strategic-number sn-maximum-town-size > 36)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 40)
   (chat-local-to-self "TS 40.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 36)
   (strategic-number sn-maximum-town-size > 34)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 38)
   (chat-local-to-self "TS 38.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 34)
   (strategic-number sn-maximum-town-size > 32)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 36)
   (chat-local-to-self "TS 36.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 32)
   (strategic-number sn-maximum-town-size > 30)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 34)
   (chat-local-to-self "TS 34.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 30)
   (strategic-number sn-maximum-town-size > 28)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 32)
   (chat-local-to-self "TS 32.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 28)
   (strategic-number sn-maximum-town-size > 26)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 30)
   (chat-local-to-self "TS 30.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 26)
   (strategic-number sn-maximum-town-size > 24)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 28)	
   (chat-local-to-self "TS 28.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 24)
   (strategic-number sn-maximum-town-size > 22)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 26)	
   (chat-local-to-self "TS 26.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 22)
   (strategic-number sn-maximum-town-size > 20)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 24)
   (chat-local-to-self "TS 24.")
)

(defrule
   (strategic-number sn-maximum-town-size <= 20)
   (not(enemy-buildings-in-town))
   (goal tsa-type-goal 2)
   (players-building-count any-enemy > 0)
   =>
   (set-strategic-number sn-maximum-town-size 22)
   (chat-local-to-self "TS 22.")
)

;Next several rules for setting initial camp-max-distance 
;are straight out of ERTI.

;(defrule
;   (resource-found wood)
;   (strategic-number sn-camp-max-distance == 8)
;   (game-time < 4)
;   =>
;   (set-strategic-number sn-camp-max-distance 11)
;   (chat-local-to-self "Camp distance 11.")
;   (disable-self)
;)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 7)
   =>
   (set-strategic-number sn-camp-max-distance 13)
   (chat-local-to-self "Camp distance 13.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 12)
   =>
   (set-strategic-number sn-camp-max-distance 15)
   (chat-local-to-self "Camp distance 15.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 16)
   =>
   (set-strategic-number sn-camp-max-distance 17)
   (chat-local-to-self "Camp distance 17.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 25)
   =>
   (set-strategic-number sn-camp-max-distance 20)
   (chat-local-to-self "Camp distance 20.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time > 25)
   =>
   (set-strategic-number sn-camp-max-distance 22)
   (chat-local-to-self "Camp distance 22.")
   (disable-self)
)

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 19)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-to-allies "Wood further away than 22 tiles!")
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 21)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 45)
   (chat-to-allies "Wood further away than 35 tiles!")
   (chat-local-to-self "Camp distance 45.")
   (disable-self)
)

(defrule
(building-type-count lumber-camp == 1)
(dropsite-min-distance wood > 4)
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 25)
(chat-local-to-self "Camp distance 25.")
(disable-self)
)

(defrule
(strategic-number sn-maximum-town-size >= 30)
(strategic-number sn-camp-max-distance < 30)
=>
(set-strategic-number sn-camp-max-distance 30)
(chat-local-to-self "Camp distance 30.")
(disable-self)
)

(defrule
(strategic-number sn-maximum-town-size >= 35)
(strategic-number sn-camp-max-distance < 35)
=>
(set-strategic-number sn-camp-max-distance 35)
(chat-local-to-self "Camp distance 35.")
(disable-self)
)

(defrule
(strategic-number sn-maximum-town-size >= 40)
(strategic-number sn-camp-max-distance < 40)
=>
(set-strategic-number sn-camp-max-distance 40)
(chat-local-to-self "Camp distance 40.")
(disable-self)
)

(defrule
(strategic-number sn-maximum-town-size >= 45)
(strategic-number sn-camp-max-distance < 45)
=>
(set-strategic-number sn-camp-max-distance 45)
(chat-local-to-self "Camp distance 45.")
(disable-self)
)

(defrule
(building-type-count castle > 0)
(military-population > 40)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 50)
(game-time > 2400) ;40 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 50)
(chat-local-to-self "Camp distance 50.")
(disable-self)
)

(defrule
(building-type-count castle > 0)
(military-population > 50)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 60)
(game-time > 2700) ;45 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 60)
(chat-local-to-self "Camp distance 60.")
(disable-self)
)

(defrule
(building-type-count castle > 1)
(military-population > 40)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 60)
(game-time > 2700) ;45 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 60)
(chat-local-to-self "Camp distance 60.")
(disable-self)
)

(defrule
(or	(current-age == imperial-age)
	(game-time > 4500)) ;75 minutes
(building-type-count castle > 1)
(military-population > 55)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 70)
(game-time > 3000) ;50 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 70)
(chat-local-to-self "Camp distance 70.")
(disable-self)
)

(defrule
(or	(current-age == imperial-age)
	(game-time > 5400)) ;90 minutes
(building-type-count castle > 1)
(military-population > 55)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 90)
(game-time > 3000) ;60 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 90)
(chat-local-to-self "Camp distance 90.")
(disable-self)
)

(defrule
(or	(current-age == imperial-age)
	(game-time > 6300)) ;105 minutes
(building-type-count castle > 1)
(military-population > 55)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 120)
(game-time > 3600) ;70 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 120)
(chat-local-to-self "Camp distance 120.")
(disable-self)
)

(defrule
(or	(current-age == imperial-age)
	(game-time > 4500)) ;120 minutes
(building-type-count castle > 1)
(military-population > 55)
(dropsite-min-distance wood > 4)
(strategic-number sn-camp-max-distance < 160)
(game-time > 4800) ;80 minutes
=>
(chat-local-to-self "Bad lumber camp.")
(set-strategic-number sn-camp-max-distance 160)
(chat-local-to-self "Camp distance 160.")
(disable-self)
)

(defrule
(current-age == imperial-age)
(dropsite-min-distance wood > 4)
(building-type-count castle > 2)
(military-population > 70)
(strategic-number sn-camp-max-distance < 255)
(or	(game-time > 3600) ;60 minutes
	(military-population > 85))
=>
(set-strategic-number sn-maximum-wood-drop-distance 255)
(set-strategic-number sn-camp-max-distance 255)
(chat-local-to-self "Camp distance 255.")
(disable-self)
)

;end EDIT

;-----adjustments---


;---------------------------------------------- STRATEGIC NUMBERS --------------------------
;--------------------------------------TOWN SIZE INCREASING--------------------------------------

(defrule
(game-time >= 60)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 12)
(disable-self)
)

(defrule
(game-time >= 100)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 15)
(disable-self)
)

(defrule
(game-time >= 150)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 20)
(disable-self)
)

(defrule
(game-time >= 180)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 25)
(disable-self)
)

(defrule
(game-time >= 220)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 30)
(set-strategic-number sn-cap-civilian-builders 10)
(disable-self)
)

(defrule
(game-time >= 300)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 35)
(disable-self)
)

(defrule
(game-time >= 400)
(death-match-game)
=>

(set-strategic-number sn-maximum-town-size 40)
(disable-self)
)

(defrule
(game-time >= 500)
(death-match-game)
(not(map-size tiny))
(not(map-size small))
=>

(set-strategic-number sn-maximum-town-size 45)
(disable-self)
)

(defrule
(game-time >= 1000)
(death-match-game)
(not(map-size tiny))
(not(map-size small))
=>

(set-strategic-number sn-maximum-town-size 55)
(disable-self)
)

;EDIT! The town size is modified better above

;-non death match
;(defrule
;(game-time >= 150)
;(not( death-match-game))
;=>
;(set-strategic-number sn-maximum-town-size 20)
;(disable-self)
;)

;(defrule
;(game-time >= 250)
;(not(death-match-game))
;=>
;(set-strategic-number sn-maximum-town-size 25)
;(disable-self)
;)

;(defrule
;(game-time >= 310)
;(not(death-match-game))
;=>
;(set-strategic-number sn-maximum-town-size 30)
;(disable-self)
;)

;(defrule
;(game-time >= 500)
;(not(death-match-game))
;=>
;(set-strategic-number sn-maximum-town-size 35)
;(disable-self)
;)

;(defrule
;(game-time >= 800)
;(not(death-match-game))
;=>
;(set-strategic-number sn-maximum-town-size 40)
;(set-strategic-number sn-cap-civilian-builders 10)
;(disable-self)
;)

;end EDIT

;----------------------------------------------end town size----------------------------------------

;------------attack groups to defend

;EDIT! These rules usually cause the AI to attack the enemy also. Removed.

;(defrule
;(not(current-age == imperial-age))
;(game-time >= 600)
;(town-under-attack)
;(strategic-number sn-number-attack-groups != 10)
;=>
;(chat-to-player my-player-number "defend with attack groups")
;(set-strategic-number sn-number-attack-groups 10)
;(set-strategic-number sn-enemy-sighted-response-distance 50)
;(set-strategic-number sn-percent-enemy-sighted-response 100)
;)

;(defrule
;(not(current-age == imperial-age))
;(game-time >= 600)
;(not(town-under-attack))
;(strategic-number sn-number-attack-groups != 0)
;=>
;(chat-to-player my-player-number "stop defend with attack groups")
;(set-strategic-number sn-number-attack-groups 0)
;(set-strategic-number sn-enemy-sighted-response-distance 50)
;(set-strategic-number sn-percent-enemy-sighted-response 50)
;)
;---------------end attack groups to defend---

;---------------------------------military superiority 1----------------------------

; ====================
; MILITARY SUPERIORITY - (taken directly from BearTheGreat's BTG_AI)
; ====================
;
;  215 - Degree of military superiority.
;        -2 = There is an enemy that has at least 20 more military than I do.
;        -1 = There is an enemy that has at least 10 more military than I do.
;         0 = Every enemy is within 10 of my military.
;         1 = I have over 195 military or 10 more than any enemy.
;         2 = I have over 200 military or 20 more than any enemy.

(defrule
   (true)
   =>
   (set-strategic-number military-superiority 0)
)

(defrule
   (or(military-population > 195)
      (or(and(military-population > 190)
             (players-military-population every-enemy < 180))
          (or(and(military-population > 180)
                 (players-military-population every-enemy < 170))
             (and(military-population > 170)
                 (players-military-population every-enemy < 160)))))
   =>
   (set-strategic-number military-superiority 1)
)

(defrule
   (or(and(military-population > 160)
          (players-military-population every-enemy < 150))
      (or(and(military-population > 150)
             (players-military-population every-enemy < 140))
          (or(and(military-population > 140)
                 (players-military-population every-enemy < 130))
             (and(military-population > 130)
                 (players-military-population every-enemy < 120)))))
   =>
   (set-strategic-number military-superiority 1)
)

(defrule
   (or(and(military-population > 120)
          (players-military-population every-enemy < 110))
      (or(and(military-population > 110)
             (players-military-population every-enemy < 100))
          (or(and(military-population > 100)
                 (players-military-population every-enemy < 90))
             (and(military-population > 90)
                 (players-military-population every-enemy < 80)))))
   =>
   (set-strategic-number military-superiority 1)
)

(defrule
   (or(and(military-population > 80)
          (players-military-population every-enemy < 70))
      (or(and(military-population > 70)
             (players-military-population every-enemy < 60))
          (or(and(military-population > 60)
                 (players-military-population every-enemy < 50))
             (and(military-population > 50)
                 (players-military-population every-enemy < 40)))))
   =>
   (set-strategic-number military-superiority 1)
)

(defrule
   (or(and(military-population > 40)
          (players-military-population every-enemy < 30))
      (or(and(military-population > 30)
             (players-military-population every-enemy < 20))
          (or(and(military-population > 20)
                 (players-military-population every-enemy < 10))
             (and(military-population > 10)
                 (players-military-population every-enemy < 2))))) ;<2 will take the scout into account
   =>
   (set-strategic-number military-superiority 1)
)

(defrule
   (or(military-population > 200)
      (or(and(military-population > 190)
             (players-military-population every-enemy < 170))
          (or(and(military-population > 180)
                 (players-military-population every-enemy < 160))
             (and(military-population > 170)
                 (players-military-population every-enemy < 150)))))
   =>
   (set-strategic-number military-superiority 2)
)

(defrule
   (or(and(military-population > 160)
          (players-military-population every-enemy < 140))
      (or(and(military-population > 150)
             (players-military-population every-enemy < 130))
          (or(and(military-population > 140)
                 (players-military-population every-enemy < 120))
             (and(military-population > 130)
                 (players-military-population every-enemy < 110)))))
   =>
   (set-strategic-number military-superiority 2)
)

(defrule
   (or(and(military-population > 120)
          (players-military-population every-enemy < 100))
      (or(and(military-population > 110)
             (players-military-population every-enemy < 90))
          (or(and(military-population > 100)
                 (players-military-population every-enemy < 80))
             (and(military-population > 90)
                 (players-military-population every-enemy < 70)))))
   =>
   (set-strategic-number military-superiority 2)
)

(defrule
   (or(and(military-population > 80)
          (players-military-population every-enemy < 60))
      (or(and(military-population > 70)
             (players-military-population every-enemy < 50))
          (or(and(military-population > 60)
                 (players-military-population every-enemy < 40))
             (and(military-population > 50)
                 (players-military-population every-enemy < 30)))))
   =>
   (set-strategic-number military-superiority 2)
)

(defrule
   (or(and(military-population > 40)
          (players-military-population every-enemy < 20))
      (or(and(military-population > 30)
             (players-military-population every-enemy < 10))
         (and(military-population > 20)
             (players-military-population every-enemy < 2)))) ;<2 will take the scout into account
   =>
   (set-strategic-number military-superiority 2)
)

(defrule
   (or(and(military-population == 0)
          (players-military-population any-enemy > 10))
      (or(and(military-population < 10)
             (players-military-population any-enemy > 20))
          (or(and(military-population < 20)
                 (players-military-population any-enemy > 30))
             (and(military-population < 30)
                 (players-military-population any-enemy > 40)))))
   =>
   (set-strategic-number military-superiority -1)
)

(defrule
   (or(and(military-population < 40)
          (players-military-population any-enemy > 50))
      (or(and(military-population < 50)
             (players-military-population any-enemy > 60))
          (or(and(military-population < 60)
                 (players-military-population any-enemy > 70))
             (and(military-population < 70)
                 (players-military-population any-enemy > 80)))))
   =>
   (set-strategic-number military-superiority -1)
)

(defrule
   (or(and(military-population < 80)
          (players-military-population any-enemy > 90))
      (or(and(military-population < 90)
             (players-military-population any-enemy > 100))
          (or(and(military-population < 100)
                 (players-military-population any-enemy > 110))
             (and(military-population < 110)
                 (players-military-population any-enemy > 120)))))
   =>
   (set-strategic-number military-superiority -1)
)

(defrule
   (or(and(military-population < 120)
          (players-military-population any-enemy > 130))
      (or(and(military-population < 130)
             (players-military-population any-enemy > 140))
          (or(and(military-population < 140)
                 (players-military-population any-enemy > 150))
             (and(military-population < 150)
                 (players-military-population any-enemy > 160)))))
   =>
   (set-strategic-number military-superiority -1)
)

(defrule
   (or(and(military-population < 160)
          (players-military-population any-enemy > 170))
      (or(and(military-population < 170)
             (players-military-population any-enemy > 180))
          (or(and(military-population < 180)
                 (players-military-population any-enemy > 190))
             (and(military-population < 190)
                 (players-military-population any-enemy > 200)))))
   =>
   (set-strategic-number military-superiority -1)
)

(defrule
   (or(and(military-population == 0)
          (players-military-population any-enemy > 20))
      (or(and(military-population < 10)
             (players-military-population any-enemy > 30))
          (or(and(military-population < 20)
                 (players-military-population any-enemy > 40))
             (and(military-population < 30)
                 (players-military-population any-enemy > 50)))))
   =>
   (set-strategic-number military-superiority -2)
)

(defrule
   (or(and(military-population < 40)
          (players-military-population any-enemy > 60))
      (or(and(military-population < 50)
             (players-military-population any-enemy > 70))
          (or(and(military-population < 60)
                 (players-military-population any-enemy > 80))
             (and(military-population < 70)
                 (players-military-population any-enemy > 90)))))
   =>
   (set-strategic-number military-superiority -2)
)

(defrule
   (or(and(military-population < 80)
          (players-military-population any-enemy > 100))
      (or(and(military-population < 90)
             (players-military-population any-enemy > 110))
          (or(and(military-population < 100)
                 (players-military-population any-enemy > 120))
             (and(military-population < 110)
                 (players-military-population any-enemy > 130)))))
   =>
   (set-strategic-number military-superiority -2)
)

(defrule
   (or(and(military-population < 120)
          (players-military-population any-enemy > 140))
      (or(and(military-population < 130)
             (players-military-population any-enemy > 150))
          (or(and(military-population < 140)
                 (players-military-population any-enemy > 160))
             (and(military-population < 150)
                 (players-military-population any-enemy > 170)))))
   =>
   (set-strategic-number military-superiority -2)
)

(defrule
   (or(and(military-population < 160)
          (players-military-population any-enemy > 180))
      (or(and(military-population < 170)
             (players-military-population any-enemy > 190))
          (or(and(military-population < 180)
                 (players-military-population any-enemy > 200))
             (and(military-population < 190)
                 (players-military-population any-enemy > 210)))))
   =>
   (set-strategic-number military-superiority -2)
)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 15)
;(players-military-population every-enemy >= 4))
;=>
;(chat-local-to-self "defend military 15:4")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 20)
;(players-military-population every-enemy >= 10))
;=>
;(chat-local-to-self "defend military 20:10")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 35)
;(players-military-population every-enemy >= 20))
;=>
;(chat-local-to-self "defend military 35:20")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 50)
;(players-military-population every-enemy >= 35))
;=>
;(chat-local-to-self "defend military 50:35")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 60)
;(players-military-population every-enemy >= 45))
;=>
;(chat-local-to-self "defend military 60:45")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 70)
;(players-military-population every-enemy >= 55))
;=>
;(chat-local-to-self "defend military 70:55")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 70)
;(players-military-population every-enemy >= 60))
;=>
;(chat-local-to-self "defend military 70:60")
;(set-strategic-number  military-superiority 0)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population <= 80)
;(players-military-population every-enemy >= 70))
;=>
;(chat-local-to-self "defend military 80:70")
;(set-strategic-number  military-superiority 0)
;)


;---------------------------------military superiority 2----------------------------
;(defrule
;(research-completed imperial-age)
;;(not(military-population >= 95)) ;to avoid conflict
;(and(military-population > 12)
;(players-military-population every-enemy < 3))
;=>
;(chat-local-to-self "attack military 10:3")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;;(not(military-population >= 95)) ;to avoid conflict
;(and(military-population > 25)
;(players-military-population every-enemy < 10))
;=>
;(chat-local-to-self "attack military 25:10")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;;(not(military-population >= 95)) ;to avoid conflict
;(and(military-population > 40)
;(players-military-population every-enemy < 20))
;=>
;(chat-local-to-self "attack military 40:20")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;;(not(military-population >= 95)) ;to avoid conflict
;(and(military-population > 55)
;(players-military-population every-enemy < 35))
;=>
;(chat-local-to-self "attack military 55:35")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population > 65)
;(players-military-population every-enemy < 40))
;=>
;(chat-local-to-self "attack military 65:40")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population > 75)
;(players-military-population every-enemy < 50))
;=>
;(chat-local-to-self "attack military 75:50")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;;(not(military-population >= 95)) ;to avoid conflict
;(and(military-population > 85)
;(players-military-population every-enemy < 60))
;=>
;(chat-local-to-self "attack military 85:60")
;(set-strategic-number  military-superiority 1)
;)

;(defrule
;(research-completed imperial-age)
;(and(unit-type-count battering-ram-line >= 3)
;(and(military-population >= 95)
;(players-military-population every-enemy < 70)))
;=>
;(chat-local-to-self "attack military 95:70 with ram")
;(set-strategic-number  military-superiority 2)
;)

;(defrule
;(research-completed imperial-age)
;(and(military-population >= 95)
;(players-military-population every-enemy < 60))
;=>
;(chat-local-to-self "attack military 95:60 ")
;(set-strategic-number  military-superiority 2)
;)

;(defrule
;(research-completed imperial-age)
;(population >= 190)
;=>
;(set-strategic-number  military-superiority 2)
;)

;(defrule
;(research-completed imperial-age)
;(unit-type-count battering-ram-line >= 4)
;(or(unit-type-count trebuchet >= 2)
;(unit-type-count 42 >= 2))
;(and(population >= 190)
;(players-military-population every-enemy < 75))
;=>
;(chat-local-to-self "attack military 100:75 wirh ram and 42")
;(set-strategic-number  military-superiority 2)
;)
;----------------- END MILITARY SUPERIORITY
; - - - - - --  -- - - - Attack Now ------ - -- - -- - - - - - - - - -
(defrule
(current-age >= imperial-age)
(strategic-number military-superiority >= 1)
=>
(set-strategic-number sn-number-attack-groups 200)
(set-strategic-number sn-number-boat-attack-groups 200)
(set-strategic-number sn-enemy-sighted-response-distance 50)
)

(defrule
(current-age >= imperial-age)
(population < 180)
(strategic-number military-superiority < 1)
=>
(set-strategic-number sn-number-attack-groups 0)
(set-strategic-number sn-number-boat-attack-groups 0)
(set-strategic-number sn-enemy-sighted-response-distance 0)
)

(defrule
(current-age >= imperial-age)
(population >= 180)
=>
(set-strategic-number sn-number-attack-groups  200)
)

(defrule
(not (goal water-map 0))
(strategic-number military-superiority >= 1)
(current-age == imperial-age)
(population >= 150)
=>
(set-strategic-number sn-number-boat-attack-groups  200)
)

;-----------------------------------------just for watermap----------

(defrule

(not (goal water-map 0))
(civilian-population >= 30)
(building-type-count-total dock < 1)
(can-build dock)
=>
(build dock)
)

(defrule
(not (goal water-map 0))
(current-age >= feudal-age)
(civilian-population >= 42)
(building-type-count-total dock < 3)
(can-build dock)
=>
(build dock)
)

(defrule
(not (goal water-map 0))
(current-age >= castle-age)
(civilian-population >= 42)
(building-type-count-total dock < 5)
(can-build dock)
=>
(build dock)
)

(defrule
(not (goal water-map 0))
(population >= 50)
(unit-type-count-total  transport-ship < 3)
(can-train transport-ship)
=>
(train transport-ship)
)

(defrule
(not (goal water-map 0))
(civilian-population >= 42)
(unit-type-count-total galley-line < 15)
(can-train galley-line)
=>
(train galley-line)
(set-strategic-number sn-number-boat-explore-groups 2)
)

(defrule
(not (goal water-map 0))
(death-match-game)
=>
(set-strategic-number sn-number-boat-explore-groups 2)
)

(defrule
(not (goal water-map 0))
(civilian-population >= 42)
(unit-type-count-total  fire-ship-line < 15)
(can-train fire-ship-line)
=>
(train fire-ship-line)
)

(defrule
(not (goal water-map 0))
(civilian-population >= 42)
(unit-type-count-total  turtle-ship-line < 15)
(can-train turtle-ship-line)
=>
(train turtle-ship-line)
)

(defrule
(not (goal water-map 0))
(civilian-population >= 42)
(unit-type-count-total cannon-galleon-line < 7)
(can-train cannon-galleon-line)
=>
(train cannon-galleon-line)
)

(defrule
(not (goal water-map 0))
(civilian-population >= 30)
(unit-type-count-total  fishing-ship < 7)
(can-train fishing-ship)
=>
(train fishing-ship)
)

(defrule
(not (goal water-map 0))
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
(wood-amount >= 800)
(gold-amount >= 900)
(building-type-count-total bombard-tower < 1)
(can-build bombard-tower)
=>
(build-forward bombard-tower)
)

(defrule
(not (goal water-map 0))
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
(wood-amount >= 800)
(gold-amount >= 900)
(building-type-count-total castle < 6)
(can-build castle)
=>
(build-forward castle)
)

(defrule
(not (goal water-map 0))
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
(wood-amount >= 500)
(building-type-count-total barracks < 4)
(can-build barracks)
=>
(build-forward barracks)
)

(defrule
(not (goal water-map 0))
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
(wood-amount >= 500)
(building-type-count-total lumber-camp < 9)
(can-build lumber-camp)
=>
(build-forward lumber-camp)
)

(defrule
(not (goal water-map 0))
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
(wood-amount >= 500)
(building-type-count-total mining-camp < 9)
(can-build mining-camp)
=>
(build-forward mining-camp)
)

(defrule
(not (goal water-map 0))
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
(wood-amount >= 500)
(building-type-count-total monastery < 2)
(can-build monastery)
=>
(build-forward monastery)
)

(defrule
(not (goal water-map 0))
(wood-amount >= 500)
(current-age == imperial-age)
(strategic-number military-superiority >= 1)
=>
(set-strategic-number sn-number-forward-builders 10)
)

;-----end for watermap
;(defrule
;(goal water-map 0)
;(game-time >= 200)
;(idle-farm-count < 3)
;;(wood-amount >= 500)
;(building-type-count farm < 48)
;(can-build farm)
;=>
;(build farm)
;(chat-local-to-self "farm")
;)

(defrule
(game-time >= 200)
(not (goal water-map 0))
(wood-amount >= 100)
(idle-farm-count < 3)
(building-type-count farm < 38)
(can-build farm)
=>
(build farm)
;(chat-local-to-self "farm")
)

;---end adjustments----


;--------------------MARKETING ---------------

(defrule
(wood-amount < 100)
(dropsite-min-distance wood > 7)
(not	(can-build lumber-camp))
(building-type-count-total market == 0)
(current-age >= feudal-age)
=>
(set-strategic-number sn-maximum-food-drop-distance 0)
(set-strategic-number sn-maximum-gold-drop-distance 0)
(set-strategic-number sn-maximum-stone-drop-distance 0)
(set-strategic-number sn-maximum-hunt-drop-distance 0)
(chat-to-player my-player-number "No market, only collect wood")
)

(defrule
(strategic-number sn-maximum-hunt-drop-distance == 0)
(building-type-count-total market > 0)
=>
(set-strategic-number sn-maximum-food-drop-distance 12)
(set-strategic-number sn-maximum-gold-drop-distance 12)
(set-strategic-number sn-maximum-stone-drop-distance 12)
(set-strategic-number sn-maximum-hunt-drop-distance 25)
(chat-to-player my-player-number "We have a market, gather like normal")
)

;====Market Trade

(defrule
(wood-amount < 100)
(dropsite-min-distance wood > 7)
(not	(can-build lumber-camp))
(gold-amount > 300)
(can-buy-commodity wood)
=>
(buy-commodity wood)
(chat-to-player my-player-number "need wood for lumber camp, buy wood")
)

(defrule
(wood-amount < 100)
(dropsite-min-distance wood > 7)
(not	(can-build lumber-camp))
(food-amount > 400)
(gold-amount <= 300)
(can-buy-commodity wood)
=>
(sell-commodity food)
(chat-to-player my-player-number "need wood for lumber camp, sell food")
)

;Age Advancement Trading

(defrule
(current-age == feudal-age)
;(commodity-buying-price food < 140)
(gold-amount >= 700)
(food-amount < 800)
(can-buy-commodity food)
=>
(buy-commodity food)
)

(defrule
(current-age == feudal-age)
;(commodity-buying-price food < 200)
(gold-amount >= 700)
(and(food-amount < 800)(food-amount > 700))
(can-buy-commodity food)
=>
(buy-commodity food)
)

(defrule
(current-age == feudal-age)
;(commodity-selling-price food > 50)
(gold-amount < 600)
(food-amount >= 900)
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age == feudal-age)
;(commodity-selling-price food > 30)
(food-amount >= 900)
(and(gold-amount < 600)(gold-amount > 500))
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age == castle-age)
;(commodity-buying-price food < 140)
(gold-amount >= 900)
(food-amount < 1000)
(can-buy-commodity food)
=>
(buy-commodity food)
)

(defrule
(current-age == castle-age)
;(commodity-buying-price food < 200)
(gold-amount >= 900)
(and(food-amount < 1000)(food-amount > 850))
(can-buy-commodity food)
=>
(buy-commodity food)
)

(defrule
(current-age == castle-age)
;(commodity-selling-price food > 50)
(gold-amount < 800)
(food-amount >= 1100)
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age == castle-age)
;(commodity-selling-price food > 30)
(food-amount >= 1100)
(and(gold-amount < 800)(gold-amount > 700))
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age == castle-age)
(goal army-type-goal late-game)
(food-amount >= 1100)
(gold-amount < 800)
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age == castle-age)
(goal army-type-goal late-game)
(food-amount < 1100)
(wood-amount > 600)
(gold-amount < 800)
(can-sell-commodity wood)
=>
(sell-commodity wood)
)

;Low resource trading

(defrule
(current-age >= feudal-age)
(food-amount < 100)
(gold-amount >= 400)
(can-buy-commodity food)
=>
(buy-commodity food)
)

(defrule
(current-age >= feudal-age)
(food-amount < 100)
(gold-amount < 400)
(wood-amount > 400)
(can-sell-commodity wood)
=>
(sell-commodity wood)
)

(defrule
(current-age >= feudal-age)
(food-amount < 100)
(gold-amount < 400)
(stone-amount > 400)
(or	(and	(building-type-count-total castle > 0)
		(stone-amount > 750))
	(building-type-count-total castle > 1))
(building-type-count-total town-center > 0)
(can-sell-commodity stone)
=>
(sell-commodity stone)
)

(defrule
(current-age >= feudal-age)
(wood-amount < 100)
(gold-amount >= 400)
(can-buy-commodity food)
=>
(buy-commodity wood)
)

(defrule
(current-age >= feudal-age)
(wood-amount < 100)
(gold-amount < 400)
(food-amount > 400)
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age >= feudal-age)
(wood-amount < 100)
(gold-amount < 400)
(stone-amount > 400)
(or	(and	(building-type-count-total castle > 0)
		(stone-amount > 750))
	(building-type-count-total castle > 1))
(building-type-count-total town-center > 0)
(can-sell-commodity stone)
=>
(sell-commodity stone)
)

(defrule
(current-age >= feudal-age)
(gold-amount < 100)
(food-amount >= 400)
(can-sell-commodity food)
=>
(sell-commodity food)
)

(defrule
(current-age >= feudal-age)
(gold-amount < 100)
(wood-amount >= 400)
(can-sell-commodity wood)
=>
(sell-commodity wood)
)

(defrule
(current-age >= feudal-age)
(gold-amount < 100)
(stone-amount >= 400)
(can-sell-commodity stone)
(or	(and	(building-type-count-total castle > 0)
		(stone-amount > 750))
	(building-type-count-total castle > 1))
(building-type-count-total town-center > 0)
=>
(sell-commodity stone)
)

;Excess resource trading

(defrule
(gold-amount < 1000)
(wood-amount > 1200)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
)

(defrule
(gold-amount < 1000)
(wood-amount > 2000)
(food-amount < 3000)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
)

(defrule
(gold-amount < 1000)
(wood-amount < 2000)
(food-amount > 3000)
(can-sell-commodity food)
=>
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
)

(defrule
(not (goal water-map 0))
(gold-amount < 1000)
(wood-amount < 800)
(food-amount > 2000)
(can-sell-commodity food)
=>
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
)

(defrule
(not (goal water-map 0))
(gold-amount >= 1000)
(wood-amount < 400)
(food-amount > 1500)
(can-buy-commodity wood)
=>
(buy-commodity wood)
(buy-commodity wood)
(buy-commodity wood)
)

;Death Match Trading

(defrule
(wood-amount >= 4000)
(gold-amount < 1000)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(sell-commodity wood)
)

(defrule
(food-amount >= 4400)
(gold-amount < 1000)
(can-sell-commodity food)
=>
(sell-commodity food)
(sell-commodity food)
)

(defrule
(food-amount >= 16000)
(can-sell-commodity food)
=>
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
(sell-commodity food)
)

(defrule
(food-amount >= 16000)
(can-sell-commodity wood)
=>
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
(sell-commodity wood)
)

(defrule
(goal water-map 0)
(current-age >= castle-age)
(players-building-type-count any-ally market >= 1)
(unit-type-count-total trade-cart < 10)
(not	(town-under-attack))
(unit-type-count 178 < 2) 				;ID 178 = dead trade cart
(can-train trade-cart)
=>
(train trade-cart))

(defrule
(goal water-map 0)
(current-age >= castle-age)
(players-building-type-count any-ally market >= 1)
(unit-type-count-total trade-cart < 15)
(not	(town-under-attack))
(unit-type-count 178 < 2) 				;ID 178 = dead trade cart
(can-train trade-cart)
(research-completed city-rights-court)
=>
(train trade-cart))

(defrule
(goal water-map 0)
(current-age >= castle-age)
(players-building-type-count any-ally market >= 1)
(unit-type-count-total trade-cart < 25)
(not	(town-under-attack))
(unit-type-count 178 < 2) 				;ID 178 = dead trade cart
(can-train trade-cart)
(research-completed city-councils-court)
=>
(train trade-cart))

(defrule
(goal water-map 0)
(current-age >= castle-age)
(players-building-type-count any-ally market >= 1)
(unit-type-count-total trade-cart < 40)
(not	(town-under-attack))
(unit-type-count 178 < 2) 				;ID 178 = dead trade cart
(can-train trade-cart)
(research-completed storehouses-court)
=>
(train trade-cart))

(defrule
(not (goal water-map 0))
(current-age >= castle-age)
(players-building-type-count  any-ally dock >= 1)
(unit-type-count trade-cog < 5)
(can-train trade-cog)
=>
(train trade-cog))

(defrule
(not (goal water-map 0))
(current-age >= castle-age)
(players-building-type-count any-ally dock >= 1)
(unit-type-count-total trade-cog < 10)
(not	(town-under-attack))
(warboat-count > 8)
(can-train trade-cog)
=>
(train trade-cog))

(defrule
(not (goal water-map 0))
(current-age >= castle-age)
(players-building-type-count any-ally dock >= 1)
(unit-type-count-total trade-cog < 15)
(not	(town-under-attack))
(warboat-count > 8)
(can-train trade-cog)
(research-completed city-rights-court)
=>
(train trade-cog))

(defrule
(not (goal water-map 0))
(current-age >= castle-age)
(players-building-type-count any-ally dock >= 1)
(unit-type-count-total trade-cog < 25)
(not	(town-under-attack))
(warboat-count > 8)
(can-train trade-cog)
(research-completed city-councils-court)
=>
(train trade-cog))

(defrule
(not (goal water-map 0))
(current-age >= castle-age)
(players-building-type-count any-ally dock >= 1)
(unit-type-count-total trade-cog < 40)
(not	(town-under-attack))
(warboat-count > 8)
(can-train trade-cog)
(research-completed storehouses-court)
=>
(train trade-cog))

;--------------------marketing ends---------------

#load-if-defined DEATH-MATCH ;--PIDM ------- please try unit trainin here------
;--PIDM BUILDINGS

(defrule
(not (goal water-map 0))
(building-type-count dock < 12)
(can-build dock)
=>
(build dock))

(defrule
(not(map-size tiny))
(building-type-count market < 1)
(can-build market)
=>
(build market))

(defrule
(building-type-count house < 30)
(can-build house)
=>
(build house))

(defrule
(building-type-count-total barracks >= 2)
(building-type-count stable < 5)
(can-build stable)
=>
(build stable))

(defrule
(goal water-map 0)
(building-type-count barracks < 7)
(can-build barracks)
=>
(build barracks))

(defrule
(not (goal water-map 0))
(building-type-count-total dock >= 2)
(building-type-count barracks < 5)
(can-build barracks)
=>
(build barracks))

(defrule
(building-type-count-total barracks >= 2)
(building-type-count archery-range < 5)
(can-build archery-range)
=>
(build archery-range))

(defrule
(goal water-map 0)
(building-type-count castle < 7)
(can-build castle)
=>
(build castle))

(defrule
(not (goal water-map 0))
(building-type-count-total dock >= 1)
(building-type-count siege-workshop < 4)
(can-build siege-workshop)
=>
(build siege-workshop))

(defrule
(goal water-map 0)
(military-population >= 12)
(building-type-count siege-workshop < 4)
(can-build siege-workshop)
=>
(build siege-workshop))

(defrule
(building-type-count-total dock >= 2)
(goal water-map 0)
(building-type-count castle < 5)
(can-build castle)
=>
(build castle))
;----------PIDM uinits
(defrule
(unit-type-count bombard-cannon < 5)
(gold-amount >= 600)
(can-train bombard-cannon)
=>
(train bombard-cannon)
;(chat-local-to-self "training bomb-line")
)

(defrule
(unit-type-count 569 < 2) ;foot knight - not training
(gold-amount >= 600)
(can-train 569)
=>
(train 569)
;(chat-local-to-self "training 569")
)
(defrule
(unit-type-count paladin < 25)
(gold-amount >= 200)
(can-train paladin)
=>
(train paladin)
;(chat-local-to-self "training PALADIN"); failed
)
(defrule
(unit-type-count cavalier < 25)
(gold-amount >= 200)
(can-train cavalier)
=>
(train cavalier)
;(chat-local-to-self "training cavalier"); failed
)

(defrule
(goal water-map 0)
(unit-type-count camel-line < 35)
(gold-amount >= 200)
(can-train camel-line)
=>
(train camel-line)
;(chat-local-to-self "training camel-line")
)

(defrule
(not (goal water-map 0))
(unit-type-count camel-line < 20)
(gold-amount >= 200)
(can-train camel-line)
=>
(train camel-line)
;(chat-local-to-self "training camel-line")
)

(defrule
(not (goal water-map 0))
(not(can-train camel-line))
(unit-type-count knight < 20)
(gold-amount >= 200)
(can-train knight)
=>
(train knight)
;(chat-local-to-self "training knight")
)

(defrule
(goal water-map 0)
(not(can-train camel-line))
(unit-type-count knight < 40)
(gold-amount >= 200)
(can-train knight)
=>
(train knight)
;(chat-local-to-self "training knight")
)

(defrule
(unit-type-count knight < 12)
(gold-amount >= 200)
(can-train knight)
=>
(train knight)
;(chat-local-to-self "training knight")
)

(defrule
(goal water-map 0)
(unit-type-count my-unique-unit-line < 25)
(gold-amount >= 200)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line)
;(chat-local-to-self "training my-unique-unit-line")
)

(defrule
(not (goal water-map 0))
(unit-type-count my-unique-unit-line < 15)
(gold-amount >= 200)
(can-train my-unique-unit-line)
=>
(train my-unique-unit-line)
;(chat-local-to-self "training my-unique-unit-line")
)

(defrule
(unit-type-count cataphract < 15)
(gold-amount >= 200)
(can-train cataphract)
=>
(train rhenish-knight)
;(chat-local-to-self "training cataphract")
)

(defrule
(unit-type-count militiaman-line < 15)
(gold-amount >= 200)
(can-train militiaman-line)
=>
(train militiaman-line)
;(chat-local-to-self "training militia")
)
(defrule
(unit-type-count spearman-line < 15)
(gold-amount >= 200)
(can-train spearman-line)
=>
(train spearman-line)
;(chat-local-to-self "training spearman")
)

(defrule
(goal water-map 0)
(unit-type-count battering-ram-line < 8)
(gold-amount >= 200)
(can-train battering-ram-line)
=>
(train battering-ram-line)
;(chat-local-to-self "training battering-ram-line")
)

(defrule
(town-under-attack)
(players-unit-type-count any-enemy 42 >= 1)
(unit-type-count battering-ram-line < 4)
(can-train battering-ram-line)
=>
(train battering-ram-line)
;(chat-local-to-self "training battering-ram-line")
)

(defrule
(unit-type-count mangonel-line < 4)
(can-train mangonel-line)
(gold-amount >= 300)
=>

(train mangonel-line)
;(chat-local-to-self "training mangonel-line")
)

(defrule
(or(players-unit-type-count any-enemy archer-line >= 35)
(players-unit-type-count any-enemy skirmisher-line >= 35))
(players-unit-type-count any-enemy knight < 10)
(unit-type-count mangonel-line < 8)
(can-train mangonel-line)
(gold-amount >= 300)
=>

(train mangonel-line)
;(chat-local-to-self "training mangonel-line")
)

(defrule
(not (goal water-map 0))
(unit-type-count galley-line < 10)
(can-train galley-line )
=>
(train galley-line)
)

(defrule
(not (goal water-map 0))
(unit-type-count fire-ship-line < 8)
(can-train fire-ship-line )
=>
(train fire-ship-line)
)

(defrule
(not (goal water-map 0))
(unit-type-count cannon-galleon-line < 5)
(can-train cannon-galleon-line )
=>
(train cannon-galleon-line)
)

(defrule
(not (goal water-map 0))
(unit-type-count longboat-line < 10)
(can-train longboat-line )
=>
(train longboat-line)
)

#end-if ;----PIDM----------end trying training new unitsin PIDM section----

;CASTLE AGE START & imperial age start----- 


#load-if-not-defined DARK-AGE-START
#load-if-not-defined FEUDAL-AGE-START

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-builders 10)
(set-strategic-number sn-percent-civilian-explorers 100); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 0)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 5)
(disable-self)
)

(defrule
(or	(resource-found food)
	(or	(not	(sheep-and-forage-too-far))
		(building-type-count-total mill > 0)))
=>
(set-strategic-number sn-percent-civilian-builders 50)
(set-strategic-number sn-percent-civilian-explorers 0); to search initial food
(set-strategic-number sn-percent-civilian-gatherers 50)
(set-strategic-number sn-cap-civilian-builders 200) ;EDIT! You want as many builders as possible
(set-strategic-number sn-cap-civilian-explorers 0)
(disable-self)
)

;Researches for castle start



(defrule
(food-amount >= 300)
(unit-type-count villager >= 20)
(can-research ri-hand-cart)
=>
(research ri-hand-cart)
)

(defrule
(food-amount >= 300)
(unit-type-count militiaman-line >= tiny-pop)
(can-research ri-long-swordsman)
=>
(research ri-long-swordsman)
)

;- castle start gatherering--
(defrule
(unit-type-count villager < 8)
=>
(set-strategic-number sn-food-gatherer-percentage 80)
(set-strategic-number sn-wood-gatherer-percentage 20)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 8)
(unit-type-count villager < 10)
=>
(set-strategic-number sn-food-gatherer-percentage 75)
(set-strategic-number sn-wood-gatherer-percentage 25)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 10)
(unit-type-count villager < 15)
=>
(set-strategic-number sn-food-gatherer-percentage 70)
(set-strategic-number sn-wood-gatherer-percentage 30)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 15)
(unit-type-count villager < 20)
=>
(set-strategic-number sn-food-gatherer-percentage 60)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 20)
(unit-type-count villager < 25)
=>
(set-strategic-number sn-food-gatherer-percentage 50)
(set-strategic-number sn-wood-gatherer-percentage 50)
(set-strategic-number sn-stone-gatherer-percentage 0)
(set-strategic-number sn-gold-gatherer-percentage 0)
)

(defrule
(unit-type-count villager >= 25)
(unit-type-count villager < 30)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 5)
(set-strategic-number sn-gold-gatherer-percentage 15)
)

(defrule
(unit-type-count villager >= 30)
(unit-type-count villager < 35)
=>
(set-strategic-number sn-food-gatherer-percentage 45)
(set-strategic-number sn-wood-gatherer-percentage 35)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 12)
)

(defrule
(unit-type-count villager >= 35)
(unit-type-count villager < 41)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 40)
(set-strategic-number sn-stone-gatherer-percentage 8)
(set-strategic-number sn-gold-gatherer-percentage 12)
)

(defrule
(unit-type-count villager >= 41)
(unit-type-count villager < 50)
=>
(set-strategic-number sn-food-gatherer-percentage 40)
(set-strategic-number sn-wood-gatherer-percentage 37)
(set-strategic-number sn-stone-gatherer-percentage 5)
(set-strategic-number sn-gold-gatherer-percentage 18)
)



;buildings for castle age start
(defrule
(housing-headroom < 8)
(or	(population-headroom < 3)
	(and	(research-completed city-councils-court)
		(population < 250))) ;EDIT!
(can-build house)
(current-age >= castle-age) ;EDIT!
=>
(build house)
;(chat-local-to-self "build house")
)

(defrule
(or(resource-found food)
(game-time >= 150))
(building-type-count mill < 1)
(can-build mill)
=>
(build mill)
;(chat-local-to-self "build first mill")
)

;---castle start buildings


(defrule
(not(death-match-game))
(resource-found food)
(building-type-count mill < 1)
(can-build mill)
=>
(build mill)
)

(defrule
(resource-found food)
(building-type-count-total lumber-camp >= 1)
(or(unit-type-count male-hunter >= 1)
(unit-type-count female-hunter >= 1))
(building-type-count mill < 2)
(can-build mill)
=>
(build mill)
)

(defrule
(building-type-count-total lumber-camp < 1)
(wood-amount > 200)	;EDIT! - added, we don't want to build farms before a lumber camp unless we have to
(unit-type-count villager >= 6)
(unit-type-count villager < 25)
(building-type-count farm < 4)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count-total lumber-camp >= 1)
(unit-type-count villager >= 6)
(unit-type-count villager < 25)
(building-type-count farm < 8)
(can-build farm)
=>
(build farm)
)

(defrule
(building-type-count mining-camp >= 1)	;EDIT! - changed lumber-camp to mining-camp
(unit-type-count villager >= 25)
(unit-type-count villager < 40)
(building-type-count farm < 20)
(can-build farm)
=>
(build farm)
)

(defrule
(not(starting-age == post-imperial-age))
(unit-type-count villager >= 42)
(building-type-count university < 1)
(can-build university)
=>
(build university)
)

(defrule
(unit-type-count villager >= 10)
(building-type-count castle < 1)
(can-build castle)
=>
(build castle)
)

(defrule
(unit-type-count villager >= 10)
(can-build castle)
(building-type-count watch-tower-line >= low-tower-count)
(building-type-count castle < 2)
=>
(build castle)
)

(defrule
(unit-type-count villager >= 10)
(can-build castle)
(building-type-count watch-tower-line >= high-tower-count)
=>
(build castle)
)

(defrule
(or(unit-type-count villager >= 25)
(wood-amount >= 200))
(can-build barracks)
(building-type-count barracks < 1)
=>
(build barracks)
)

(defrule
(building-type-count-total barracks >= 1)
(or(unit-type-count villager >= 25)
(wood-amount >= 200))
(can-build monastery)
(building-type-count monastery < 1)
=>
(build monastery)
)

(defrule
(or(unit-type-count villager >= 25)
(wood-amount >= 400))
(can-build archery-range)
(building-type-count archery-range < 1)
=>
(build archery-range)
)

(defrule
(or(unit-type-count villager >= 25)
(wood-amount >= 300))
(can-build barracks)
(building-type-count barracks < 2)
=>
(build barracks)
)

(defrule
(building-type-count-total barracks >= 2)
(or(unit-type-count villager >= 25)
(wood-amount >= 300))
(can-build monastery)
(building-type-count monastery < 1)
=>
(build monastery)
)

(defrule
(or(unit-type-count villager >= 25)
(wood-amount >= 300))
(can-build archery-range)
(building-type-count archery-range < 2)
=>
(build archery-range)
)

(defrule
(or(unit-type-count villager >= 25)
(wood-amount >= 400))
(can-build archery-range)
(building-type-count siege-workshop < 2)
=>
(build siege-workshop)
)


#end-if
#end-if
;castle, imperial AGE start ends here

;====Resign rules

(defrule
	(building-type-count town-center == 0)
	(building-type-count-total wonder == 0)
	(unit-type-count male-farmer < 4)
	(unit-type-count female-farmer < 4)
	(game-time > 600)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(attack-now)
	(set-strategic-number sn-number-attack-groups 100)
	(set-strategic-number sn-maximum-town-size 255)
	(chat-to-player my-player-number "We shall die with honor")
	(disable-self)
)

(defrule
	(building-type-count town-center == 0)
	(building-type-count-total wonder == 0)
	(military-population < 5)
	(unit-type-count-total monk == 0)
	(not	(can-train monk))
	(unit-type-count male-farmer < 4)
	(unit-type-count female-farmer < 4)
	(game-time > 900)
=>
	(set-goal resign-goal 1)
	(disable-self)
)

(defrule
	(goal resign-goal 1)
=>
	(release-escrow wood)
	(release-escrow food)
	(release-escrow stone)
	(release-escrow gold)
	(tribute-to-player any-ally wood 99999)
 	(tribute-to-player any-ally food 99999)
 	(tribute-to-player any-ally gold 99999)
	(tribute-to-player any-ally stone 99999)
	(disable-self)
)

(defrule
	(goal resign-goal 1)
=>
	(delete-building house)
	(delete-building blacksmith)
	(delete-building university)
	(delete-building dock)
	(delete-building mill)
	(delete-building lumber-camp)
	(delete-building mining-camp)
	(delete-building archery-range)
	(delete-building barracks)
	(delete-building stable)
	(delete-building monastery)
	(delete-building siege-workshop)
	(delete-building farm)
)

(defrule
	(building-type-count blacksmith == 0)
	(building-type-count university == 0)
	(building-type-count dock == 0)
	(building-type-count mill == 0)
	(building-type-count lumber-camp == 0)
	(building-type-count mining-camp == 0)
	(building-type-count archery-range == 0)
	(building-type-count barracks == 0)
	(building-type-count stable == 0)
	(building-type-count monastery == 0)
	(building-type-count siege-workshop == 0)
	(goal resign-goal 1)
=>
	(set-goal resign-goal 2)
	(disable-self)
) 

(defrule
	(building-type-count town-center == 0)
	(building-type-count-total wonder == 0)
	(military-population < 5)
	(unit-type-count-total monk == 0)
	(not	(can-train monk))
	(unit-type-count male-farmer < 4)
	(unit-type-count female-farmer < 4)
	(game-time > 900)
	(goal resign-goal 2)
=>
	(chat-to-all-using-range 22300  22)	;the AI sends the chat with an id between 22300 and 22321 to all players
	(chat-to-all-using-id 22322) 		;the AI sends the chat with id 22322 to all players
	(enable-timer resign-timer resign-interval)
	(disable-self)
)

(defrule
	(building-type-count town-center == 0)
	(building-type-count-total wonder == 0)
	(military-population < 5)
	(unit-type-count-total monk == 0)
	(not	(can-train monk))
	(unit-type-count male-farmer < 4)
	(unit-type-count female-farmer < 4)
	(game-time > 900)
	(timer-triggered resign-timer)
	(goal resign-goal 2)
=>
	(resign)
)

; ====================
; SCORE SUPERIORITY - (based on the military superiority rules by BearTheGreat)
; ====================
;
;  205 - Degree of score superiority.
;        -2 = There is an enemy that has at least 6000 more score than I do.
;        -1 = There is an enemy that has more score than I do.
;         0 = I have more score than every enemy.
;         1 = I have over 2000 more score than every enemy.
;         2 = I have over 5000 more score than every enemy.

(defrule
   (true)
   =>
   (set-strategic-number sn-score-superiority 0)
)

(defrule
   (or(and(current-score > 1800)
	  (players-score every-enemy < 1600))
      (or(and(current-score > 1900)
             (players-score every-enemy < 1700))
          (or(and(current-score > 2000)
                 (players-score every-enemy < 1800))
             (and(current-score > 2100)
                 (players-score every-enemy < 1900)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 2200)
          (players-score every-enemy < 2000))
      (or(and(current-score > 2300)
             (players-score every-enemy < 2100))
          (or(and(current-score > 2400)
                 (players-score every-enemy < 2200))
             (and(current-score > 2500)
                 (players-score every-enemy < 2300)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 2600)
          (players-score every-enemy < 2400))
      (or(and(current-score > 2700)
             (players-score every-enemy < 2500))
          (or(and(current-score > 2800)
                 (players-score every-enemy < 2600))
             (and(current-score > 2900)
                 (players-score every-enemy < 2700)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 3000)
          (players-score every-enemy < 2800))
      (or(and(current-score > 3100)
             (players-score every-enemy < 2900))
          (or(and(current-score > 3200)
                 (players-score every-enemy < 3000))
             (and(current-score > 3300)
                 (players-score every-enemy < 3100)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 3400)
          (players-score every-enemy < 3200))
      (or(and(current-score > 3500)
             (players-score every-enemy < 3300))
          (or(and(current-score > 3600)
                 (players-score every-enemy < 3400))
             (and(current-score > 3700)
                 (players-score every-enemy < 3500)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 3800)
          (players-score every-enemy < 3600))
      (or(and(current-score > 3900)
             (players-score every-enemy < 3700))
          (or(and(current-score > 4000)
                 (players-score every-enemy < 3800))
             (and(current-score > 4100)
                 (players-score every-enemy < 3900)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 4200)
          (players-score every-enemy < 4000))
      (or(and(current-score > 4300)
             (players-score every-enemy < 4100))
          (or(and(current-score > 4400)
                 (players-score every-enemy < 4200))
             (and(current-score > 4500)
                 (players-score every-enemy < 4300)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 4600)
          (players-score every-enemy < 4400))
      (or(and(current-score > 4700)
             (players-score every-enemy < 4500))
          (or(and(current-score > 4800)
                 (players-score every-enemy < 4600))
             (and(current-score > 4900)
                 (players-score every-enemy < 4700)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 5000)
          (players-score every-enemy < 4800))
      (or(and(current-score > 5100)
             (players-score every-enemy < 4900))
          (or(and(current-score > 5200)
                 (players-score every-enemy < 5000))
             (and(current-score > 5300)
                 (players-score every-enemy < 5100)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 5400)
          (players-score every-enemy < 5200))
      (or(and(current-score > 5500)
             (players-score every-enemy < 5300))
          (or(and(current-score > 5600)
                 (players-score every-enemy < 5400))
             (and(current-score > 5700)
                 (players-score every-enemy < 5500)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 5800)
          (players-score every-enemy < 5600))
      (or(and(current-score > 5900)
             (players-score every-enemy < 5700))
          (or(and(current-score > 6000)
                 (players-score every-enemy < 5800))
             (and(current-score > 6100)
                 (players-score every-enemy < 5900)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 6200)
          (players-score every-enemy < 6000))
      (or(and(current-score > 6300)
             (players-score every-enemy < 6100))
          (or(and(current-score > 6400)
                 (players-score every-enemy < 6200))
             (and(current-score > 6500)
                 (players-score every-enemy < 6300)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 6600)
          (players-score every-enemy < 6400))
      (or(and(current-score > 6700)
             (players-score every-enemy < 6500))
          (or(and(current-score > 6800)
                 (players-score every-enemy < 6600))
             (and(current-score > 6900)
                 (players-score every-enemy < 6700)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 7000)
          (players-score every-enemy < 6800))
      (or(and(current-score > 7100)
             (players-score every-enemy < 6900))
          (or(and(current-score > 7200)
                 (players-score every-enemy < 7000))
             (and(current-score > 7300)
                 (players-score every-enemy < 7100)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 7400)
          (players-score every-enemy < 7200))
      (or(and(current-score > 7500)
             (players-score every-enemy < 7300))
          (or(and(current-score > 7600)
                 (players-score every-enemy < 7400))
             (and(current-score > 7700)
                 (players-score every-enemy < 7500)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 7800)
          (players-score every-enemy < 7600))
      (or(and(current-score > 7900)
             (players-score every-enemy < 7700))
          (or(and(current-score > 8000)
                 (players-score every-enemy < 7800))
             (and(current-score > 8100)
                 (players-score every-enemy < 7900)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 8200)
          (players-score every-enemy < 8000))
      (or(and(current-score > 8300)
             (players-score every-enemy < 8100))
          (or(and(current-score > 8400)
                 (players-score every-enemy < 8200))
             (and(current-score > 8500)
                 (players-score every-enemy < 8300)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 8600)
          (players-score every-enemy < 8400))
      (or(and(current-score > 8700)
             (players-score every-enemy < 8500))
          (or(and(current-score > 8800)
                 (players-score every-enemy < 8600))
             (and(current-score > 8900)
                 (players-score every-enemy < 8700)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 9000)
          (players-score every-enemy < 8800))
      (or(and(current-score > 9100)
             (players-score every-enemy < 8900))
          (or(and(current-score > 9200)
                 (players-score every-enemy < 9000))
             (and(current-score > 9300)
                 (players-score every-enemy < 9100)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 9400)
          (players-score every-enemy < 9200))
      (or(and(current-score > 9500)
             (players-score every-enemy < 9300))
          (or(and(current-score > 9600)
                 (players-score every-enemy < 9400))
             (and(current-score > 9700)
                 (players-score every-enemy < 9500)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 9800)
          (players-score every-enemy < 9600))
      (or(and(current-score > 9900)
             (players-score every-enemy < 9700))
          (or(and(current-score > 10000)
                 (players-score every-enemy < 9800))
             (and(current-score > 10100)
                 (players-score every-enemy < 9900)))))
   =>
   (set-strategic-number sn-score-superiority 1)
)

(defrule
   (or(and(current-score > 2200)
	  (players-score every-enemy < 1600))
      (or(and(current-score > 2300)
             (players-score every-enemy < 1700))
          (or(and(current-score > 2400)
                 (players-score every-enemy < 1800))
             (and(current-score > 2500)
                 (players-score every-enemy < 1900)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 2600)
          (players-score every-enemy < 2000))
      (or(and(current-score > 2700)
             (players-score every-enemy < 2100))
          (or(and(current-score > 2800)
                 (players-score every-enemy < 2200))
             (and(current-score > 2900)
                 (players-score every-enemy < 2300)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 3000)
          (players-score every-enemy < 2400))
      (or(and(current-score > 3100)
             (players-score every-enemy < 2500))
          (or(and(current-score > 3200)
                 (players-score every-enemy < 2600))
             (and(current-score > 3300)
                 (players-score every-enemy < 2700)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 3400)
          (players-score every-enemy < 2800))
      (or(and(current-score > 3500)
             (players-score every-enemy < 2900))
          (or(and(current-score > 3600)
                 (players-score every-enemy < 3000))
             (and(current-score > 3700)
                 (players-score every-enemy < 3100)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 3800)
          (players-score every-enemy < 3200))
      (or(and(current-score > 3900)
             (players-score every-enemy < 3300))
          (or(and(current-score > 4000)
                 (players-score every-enemy < 3400))
             (and(current-score > 4100)
                 (players-score every-enemy < 3500)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 4200)
          (players-score every-enemy < 3600))
      (or(and(current-score > 4300)
             (players-score every-enemy < 3700))
          (or(and(current-score > 4400)
                 (players-score every-enemy < 3800))
             (and(current-score > 4500)
                 (players-score every-enemy < 3900)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 4600)
          (players-score every-enemy < 4000))
      (or(and(current-score > 4700)
             (players-score every-enemy < 4100))
          (or(and(current-score > 4800)
                 (players-score every-enemy < 4200))
             (and(current-score > 4900)
                 (players-score every-enemy < 4300)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 5000)
          (players-score every-enemy < 4400))
      (or(and(current-score > 5100)
             (players-score every-enemy < 4500))
          (or(and(current-score > 5200)
                 (players-score every-enemy < 4600))
             (and(current-score > 5300)
                 (players-score every-enemy < 4700)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 5400)
          (players-score every-enemy < 4800))
      (or(and(current-score > 5500)
             (players-score every-enemy < 4900))
          (or(and(current-score > 5600)
                 (players-score every-enemy < 5000))
             (and(current-score > 5700)
                 (players-score every-enemy < 5100)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 5800)
          (players-score every-enemy < 5200))
      (or(and(current-score > 5900)
             (players-score every-enemy < 5300))
          (or(and(current-score > 6000)
                 (players-score every-enemy < 5400))
             (and(current-score > 6100)
                 (players-score every-enemy < 5500)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 6200)
          (players-score every-enemy < 5600))
      (or(and(current-score > 6300)
             (players-score every-enemy < 5700))
          (or(and(current-score > 6400)
                 (players-score every-enemy < 5800))
             (and(current-score > 6500)
                 (players-score every-enemy < 5900)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 6600)
          (players-score every-enemy < 6000))
      (or(and(current-score > 6700)
             (players-score every-enemy < 6100))
          (or(and(current-score > 6800)
                 (players-score every-enemy < 6200))
             (and(current-score > 6900)
                 (players-score every-enemy < 6300)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 7000)
          (players-score every-enemy < 6400))
      (or(and(current-score > 7100)
             (players-score every-enemy < 6500))
          (or(and(current-score > 7200)
                 (players-score every-enemy < 6600))
             (and(current-score > 7300)
                 (players-score every-enemy < 6700)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 7400)
          (players-score every-enemy < 6800))
      (or(and(current-score > 7500)
             (players-score every-enemy < 6900))
          (or(and(current-score > 7600)
                 (players-score every-enemy < 7000))
             (and(current-score > 7700)
                 (players-score every-enemy < 7100)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 7800)
          (players-score every-enemy < 7200))
      (or(and(current-score > 7900)
             (players-score every-enemy < 7300))
          (or(and(current-score > 8000)
                 (players-score every-enemy < 7400))
             (and(current-score > 8100)
                 (players-score every-enemy < 7500)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 8200)
          (players-score every-enemy < 7600))
      (or(and(current-score > 8300)
             (players-score every-enemy < 7700))
          (or(and(current-score > 8400)
                 (players-score every-enemy < 7800))
             (and(current-score > 8500)
                 (players-score every-enemy < 7900)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 8600)
          (players-score every-enemy < 8000))
      (or(and(current-score > 8700)
             (players-score every-enemy < 8100))
          (or(and(current-score > 8800)
                 (players-score every-enemy < 8200))
             (and(current-score > 8900)
                 (players-score every-enemy < 8300)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 9000)
          (players-score every-enemy < 8400))
      (or(and(current-score > 9100)
             (players-score every-enemy < 8500))
          (or(and(current-score > 9200)
                 (players-score every-enemy < 8600))
             (and(current-score > 9300)
                 (players-score every-enemy < 8700)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 9400)
          (players-score every-enemy < 8800))
      (or(and(current-score > 9500)
             (players-score every-enemy < 8900))
          (or(and(current-score > 9600)
                 (players-score every-enemy < 9000))
             (and(current-score > 9700)
                 (players-score every-enemy < 9100)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score > 9800)
          (players-score every-enemy < 9200))
      (or(and(current-score > 9900)
             (players-score every-enemy < 9300))
          (or(and(current-score > 10000)
                 (players-score every-enemy < 9400))
             (and(current-score > 10100)
                 (players-score every-enemy < 9500)))))
   =>
   (set-strategic-number sn-score-superiority 2)
)

(defrule
   (or(and(current-score < 1700)
          (players-score any-enemy > 1900))
      (or(and(current-score < 1800)
             (players-score any-enemy > 2000))
          (or(and(current-score < 1900)
                 (players-score any-enemy > 2100))
             (and(current-score < 2000)
                 (players-score any-enemy > 2200)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 2100)
          (players-score any-enemy > 2300))
      (or(and(current-score < 2200)
             (players-score any-enemy > 2400))
          (or(and(current-score < 2300)
                 (players-score any-enemy > 2500))
             (and(current-score < 2400)
                 (players-score any-enemy > 2600)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 2500)
          (players-score any-enemy > 2700))
      (or(and(current-score < 2600)
             (players-score any-enemy > 2800))
          (or(and(current-score < 2700)
                 (players-score any-enemy > 2900))
             (and(current-score < 2800)
                 (players-score any-enemy > 3000)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 2900)
          (players-score any-enemy > 3100))
      (or(and(current-score < 3000)
             (players-score any-enemy > 3200))
          (or(and(current-score < 3100)
                 (players-score any-enemy > 3300))
             (and(current-score < 3200)
                 (players-score any-enemy > 3400)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 3300)
          (players-score any-enemy > 3500))
      (or(and(current-score < 3400)
             (players-score any-enemy > 3600))
          (or(and(current-score < 3500)
                 (players-score any-enemy > 3700))
             (and(current-score < 3600)
                 (players-score any-enemy > 3800)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 3700)
          (players-score any-enemy > 3900))
      (or(and(current-score < 3800)
             (players-score any-enemy > 4000))
          (or(and(current-score < 3900)
                 (players-score any-enemy > 4100))
             (and(current-score < 4000)
                 (players-score any-enemy > 4200)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 4100)
          (players-score any-enemy > 4300))
      (or(and(current-score < 4200)
             (players-score any-enemy > 4400))
          (or(and(current-score < 4300)
                 (players-score any-enemy > 4500))
             (and(current-score < 4400)
                 (players-score any-enemy > 4600)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 4500)
          (players-score any-enemy > 4700))
      (or(and(current-score < 4600)
             (players-score any-enemy > 4800))
          (or(and(current-score < 4700)
                 (players-score any-enemy > 4900))
             (and(current-score < 4800)
                 (players-score any-enemy > 5000)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 4900)
          (players-score any-enemy > 5100))
      (or(and(current-score < 5000)
             (players-score any-enemy > 5200))
          (or(and(current-score < 5100)
                 (players-score any-enemy > 5300))
             (and(current-score < 5200)
                 (players-score any-enemy > 5400)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 5300)
          (players-score any-enemy > 5500))
      (or(and(current-score < 5400)
             (players-score any-enemy > 5600))
          (or(and(current-score < 5500)
                 (players-score any-enemy > 5700))
             (and(current-score < 5600)
                 (players-score any-enemy > 5800)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 5700)
          (players-score any-enemy > 5900))
      (or(and(current-score < 5800)
             (players-score any-enemy > 6000))
          (or(and(current-score < 5900)
                 (players-score any-enemy > 6100))
             (and(current-score < 6000)
                 (players-score any-enemy > 6200)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 6100)
          (players-score any-enemy > 6300))
      (or(and(current-score < 6200)
             (players-score any-enemy > 6400))
          (or(and(current-score < 6300)
                 (players-score any-enemy > 6500))
             (and(current-score < 6400)
                 (players-score any-enemy > 6600)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 6500)
          (players-score any-enemy > 6700))
      (or(and(current-score < 6600)
             (players-score any-enemy > 6800))
          (or(and(current-score < 6700)
                 (players-score any-enemy > 6900))
             (and(current-score < 6800)
                 (players-score any-enemy > 7000)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 6900)
          (players-score any-enemy > 7100))
      (or(and(current-score < 7000)
             (players-score any-enemy > 7200))
          (or(and(current-score < 7100)
                 (players-score any-enemy > 7300))
             (and(current-score < 7200)
                 (players-score any-enemy > 7400)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 7300)
          (players-score any-enemy > 7500))
      (or(and(current-score < 7400)
             (players-score any-enemy > 7600))
          (or(and(current-score < 7500)
                 (players-score any-enemy > 7700))
             (and(current-score < 7600)
                 (players-score any-enemy > 7800)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 7700)
          (players-score any-enemy > 7900))
      (or(and(current-score < 7800)
             (players-score any-enemy > 8000))
          (or(and(current-score < 7900)
                 (players-score any-enemy > 8100))
             (and(current-score < 8000)
                 (players-score any-enemy > 8200)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 8100)
          (players-score any-enemy > 8300))
      (or(and(current-score < 8200)
             (players-score any-enemy > 8400))
          (or(and(current-score < 8300)
                 (players-score any-enemy > 8500))
             (and(current-score < 8400)
                 (players-score any-enemy > 8600)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 8500)
          (players-score any-enemy > 8700))
      (or(and(current-score < 8600)
             (players-score any-enemy > 8800))
          (or(and(current-score < 8700)
                 (players-score any-enemy > 8900))
             (and(current-score < 8800)
                 (players-score any-enemy > 9000)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 8900)
          (players-score any-enemy > 9100))
      (or(and(current-score < 9000)
             (players-score any-enemy > 9200))
          (or(and(current-score < 9100)
                 (players-score any-enemy > 9300))
             (and(current-score < 9200)
                 (players-score any-enemy > 9400)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 9300)
          (players-score any-enemy > 9500))
      (or(and(current-score < 9400)
             (players-score any-enemy > 9600))
          (or(and(current-score < 9500)
                 (players-score any-enemy > 9700))
             (and(current-score < 9600)
                 (players-score any-enemy > 9800)))))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 1700)
          (players-score any-enemy > 2300))
      (or(and(current-score < 1800)
             (players-score any-enemy > 2400))
          (or(and(current-score < 1900)
                 (players-score any-enemy > 2500))
             (and(current-score < 2000)
                 (players-score any-enemy > 2600)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 2100)
          (players-score any-enemy > 2700))
      (and(current-score < 2200)
          (players-score any-enemy > 2800)))
   =>
   (set-strategic-number sn-score-superiority -1)
)

(defrule
   (or(and(current-score < 2300)
          (players-score any-enemy > 2900))
      (or(and(current-score < 2400)
             (players-score any-enemy > 3000))
          (or(and(current-score < 2500)
                 (players-score any-enemy > 3100))
             (and(current-score < 2600)
                 (players-score any-enemy > 3200)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 2700)
          (players-score any-enemy > 3300))
      (or(and(current-score < 2800)
             (players-score any-enemy > 3400))
          (or(and(current-score < 2900)
                 (players-score any-enemy > 3500))
             (and(current-score < 3000)
                 (players-score any-enemy > 3600)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 3100)
          (players-score any-enemy > 3700))
      (or(and(current-score < 3200)
             (players-score any-enemy > 3800))
          (or(and(current-score < 3300)
                 (players-score any-enemy > 3900))
             (and(current-score < 3400)
                 (players-score any-enemy > 4000)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 3500)
          (players-score any-enemy > 4100))
      (or(and(current-score < 3600)
             (players-score any-enemy > 4200))
          (or(and(current-score < 3700)
                 (players-score any-enemy > 4300))
             (and(current-score < 3800)
                 (players-score any-enemy > 4400)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 3900)
          (players-score any-enemy > 4500))
      (or(and(current-score < 4000)
             (players-score any-enemy > 4600))
          (or(and(current-score < 4100)
                 (players-score any-enemy > 4700))
             (and(current-score < 4200)
                 (players-score any-enemy > 4800)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 4300)
          (players-score any-enemy > 4900))
      (or(and(current-score < 4400)
             (players-score any-enemy > 5000))
          (or(and(current-score < 4500)
                 (players-score any-enemy > 5100))
             (and(current-score < 4600)
                 (players-score any-enemy > 5200)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 4700)
          (players-score any-enemy > 5300))
      (or(and(current-score < 4800)
             (players-score any-enemy > 5400))
          (or(and(current-score < 4900)
                 (players-score any-enemy > 5500))
             (and(current-score < 5000)
                 (players-score any-enemy > 5600)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 5100)
          (players-score any-enemy > 5700))
      (or(and(current-score < 5200)
             (players-score any-enemy > 5800))
          (or(and(current-score < 5300)
                 (players-score any-enemy > 5900))
             (and(current-score < 5400)
                 (players-score any-enemy > 6000)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 5500)
          (players-score any-enemy > 6100))
      (or(and(current-score < 5600)
             (players-score any-enemy > 6200))
          (or(and(current-score < 5700)
                 (players-score any-enemy > 6300))
             (and(current-score < 5800)
                 (players-score any-enemy > 6400)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 5900)
          (players-score any-enemy > 6500))
      (or(and(current-score < 6000)
             (players-score any-enemy > 6600))
          (or(and(current-score < 6100)
                 (players-score any-enemy > 6700))
             (and(current-score < 6200)
                 (players-score any-enemy > 6800)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 6300)
          (players-score any-enemy > 6900))
      (or(and(current-score < 6400)
             (players-score any-enemy > 7000))
          (or(and(current-score < 6500)
                 (players-score any-enemy > 7100))
             (and(current-score < 6600)
                 (players-score any-enemy > 7200)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 6700)
          (players-score any-enemy > 7300))
      (or(and(current-score < 6800)
             (players-score any-enemy > 7400))
          (or(and(current-score < 6900)
                 (players-score any-enemy > 7500))
             (and(current-score < 7000)
                 (players-score any-enemy > 7600)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 7100)
          (players-score any-enemy > 7700))
      (or(and(current-score < 7200)
             (players-score any-enemy > 7800))
          (or(and(current-score < 7300)
                 (players-score any-enemy > 7900))
             (and(current-score < 7400)
                 (players-score any-enemy > 8000)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 7500)
          (players-score any-enemy > 8100))
      (or(and(current-score < 7600)
             (players-score any-enemy > 8200))
          (or(and(current-score < 7700)
                 (players-score any-enemy > 8300))
             (and(current-score < 7800)
                 (players-score any-enemy > 8400)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 7900)
          (players-score any-enemy > 8500))
      (or(and(current-score < 8000)
             (players-score any-enemy > 8600))
          (or(and(current-score < 8100)
                 (players-score any-enemy > 8700))
             (and(current-score < 8200)
                 (players-score any-enemy > 8800)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 8300)
          (players-score any-enemy > 8900))
      (or(and(current-score < 8400)
             (players-score any-enemy > 9000))
          (or(and(current-score < 8500)
                 (players-score any-enemy > 9100))
             (and(current-score < 8600)
                 (players-score any-enemy > 9200)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 8700)
          (players-score any-enemy > 9300))
      (or(and(current-score < 8800)
             (players-score any-enemy > 9400))
          (or(and(current-score < 8900)
                 (players-score any-enemy > 9500))
             (and(current-score < 9000)
                 (players-score any-enemy > 9600)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)

(defrule
   (or(and(current-score < 9100)
          (players-score any-enemy > 9700))
      (or(and(current-score < 9200)
             (players-score any-enemy > 9800))
          (or(and(current-score < 9300)
                 (players-score any-enemy > 9900))
             (and(current-score < 9400)
                 (players-score any-enemy > 10000)))))
   =>
   (set-strategic-number sn-score-superiority -2)
)


;--- sorry for any confusion

;---------credit :P--------
(defrule
(game-time >= 5)
=>
(chat-local-to-self "Made for Age of Chivalry")
(disable-self)
)