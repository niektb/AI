; 1- Constants
; 2- Initialization of goals, sns, etc
; 3- Economy
; 4- Buildings
; 5- Upgrades
; 6- Units
; 7- Market
; 8- Military superiority
; 9- Defend Rules 
; 10- Attack
; 11- Resign

;*****************************************************************************
;				Constants
;*****************************************************************************
(defconst max-num-dark-villagers 15)



;*****************************************************************************
;				Initialization Rules (including age up)
;*****************************************************************************
(defrule
   (true)
   =>
   (set-strategic-number sn-camp-max-distance 8)
   (set-strategic-number sn-initial-exploration-required 0)
   (set-strategic-number sn-food-dropsite-distance -1)
   (set-strategic-number sn-wood-dropsite-distance -1)
   (set-strategic-number sn-stone-dropsite-distance 100)
   (set-strategic-number sn-gold-dropsite-distance 35)
   (set-strategic-number sn-maximum-food-drop-distance 15)
   (set-strategic-number sn-maximum-wood-drop-distance 15)
   (set-strategic-number sn-maximum-stone-drop-distance 25)
   (set-strategic-number sn-maximum-gold-drop-distance 25)
   (set-strategic-number sn-maximum-hunt-drop-distance 15)
   (set-strategic-number sn-maximum-fish-boat-drop-distance 15)
   (set-strategic-number sn-mill-max-distance 15)
   (disable-self)
)

(defrule
   (true)
   =>
   (set-strategic-number sn-gold-defend-priority 1)
   (set-strategic-number sn-stone-defend-priority 0)
   (set-strategic-number sn-forage-defend-priority 0)
   (set-strategic-number sn-relic-defend-priority 0)
   (set-strategic-number sn-town-defend-priority 0)
   (set-strategic-number sn-task-ungrouped-soldiers 0)
   (set-strategic-number sn-enemy-sighted-response-distance 2)
   (disable-self)
)
                             
;Age up rules
(defrule
   (building-type-count-total mill > 0)
   (building-type-count-total lumber-camp > 0)
   (unit-type-count-total villager >= max-num-dark-villagers) 
   (can-research feudal-age)
   =>
   (research feudal-age)
   (chat-to-allies "Researching Feudal Age")      
)

(defrule
   (can-research castle-age)
   (building-type-count-total mill > 0)
   (building-type-count-total lumber-camp > 0)
   (building-type-count-total mining-camp > 0)
   (building-type-count-total barracks > 0)
   (building-type-count-total archery-range > 0)
   (building-type-count-total stable > 0)
   (building-type-count-total market > 0)
   (unit-type-count-total villager >= 30) 
   =>
   (research castle-age)
   (chat-to-allies "Researching Castle Age")      
)

(defrule
   (can-research imperial-age)
   (building-type-count-total mill > 0)
   (building-type-count-total lumber-camp > 0)
   (building-type-count-total mining-camp > 0)
   (building-type-count-total blacksmith > 0)
   (building-type-count-total castle > 0)
   (building-type-count-total university > 0)
   (unit-type-count-total villager >= 30) 
   =>
   (research imperial-age)
   (chat-to-allies "Researching Imperial Age")      
)



;*****************************************************************************
;				Economy Rules
;*****************************************************************************
(defrule
   (true)
   =>
   (set-strategic-number sn-percent-civilian-explorers 100)
   (set-strategic-number sn-minimum-civilian-explorers 100)
   (set-strategic-number sn-cap-civilian-explorers 100)
   (set-strategic-number sn-total-number-explorers 101)
   (set-strategic-number sn-number-explore-groups 101)
   (set-strategic-number sn-minimum-explore-group-size 1)
   (set-strategic-number sn-maximum-explore-group-size 1)
   (set-strategic-number sn-initial-exploration-required 0)
   (disable-self)
)

(defrule
   (resource-found food)
   =>
   (set-strategic-number sn-percent-civilian-explorers 0)
   (set-strategic-number sn-minimum-civilian-explorers 0)
   (set-strategic-number sn-cap-civilian-explorers 0)
   (set-strategic-number sn-total-number-explorers 1)
   (set-strategic-number sn-number-explore-groups 1)
   (set-strategic-number sn-initial-exploration-required 0)
   (disable-self)
)


#load-if-not-defined TEUTONIC-CIV

(defrule
	(current-age == dark-age)
	=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

#end-if

#load-if-defined TEUTONIC-CIV

(defrule
   (current-age == dark-age)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60)
   (set-strategic-number sn-wood-gatherer-percentage 40)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (current-age == dark-age)
   (building-type-count-total mining-camp > 0)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60)
   (set-strategic-number sn-wood-gatherer-percentage 30)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

#end-if

(defrule
	(current-age == imperial-age)
	=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)

(defrule
	(current-age == castle-age)
	=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 20)
)

(defrule
	(current-age == feudal-age)
	=>
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)



;*****************************************************************************
;				Build Rules
;*****************************************************************************
#load-if-not-defined HUN-CIV 

(defrule
   (housing-headroom < 4)
   (population-headroom > 3)
   (can-build house)
   =>
   (build house)
)

#end-if   


(defrule
	(or(building-type-count-total house > 0) ;Start first house before mill.
      (civ-selected hun))   

	(building-type-count-total mill == 0) 
	(resource-found food) 
	(can-build mill)
	=>
	(build mill)
	)

;Lumbercamp placement

(defrule
   (true)
   =>
   (set-strategic-number sn-camp-max-distance 8)
   (disable-self)
)


(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 4)
   =>
   (set-strategic-number sn-camp-max-distance 11)
   (chat-local-to-self "Camp distance 11.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 7)
   =>
   (set-strategic-number sn-camp-max-distance 13)
   (chat-local-to-self "Camp distance 13.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 12)
   =>
   (set-strategic-number sn-camp-max-distance 15)
   (chat-local-to-self "Camp distance 15.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 16)
   =>
   (set-strategic-number sn-camp-max-distance 17)
   (chat-local-to-self "Camp distance 17.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 25)
   =>
   (set-strategic-number sn-camp-max-distance 20)
   (chat-local-to-self "Camp distance 20.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time > 25)
   =>
   (set-strategic-number sn-camp-max-distance 22)
   (chat-local-to-self "Camp distance 22.")
   (disable-self)
)

(defrule
      (current-age == dark-age)
   (wood-amount > 200)
   (population > 19)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-to-allies "Wood further away than 22 tiles!")
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 21)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 45)
   (chat-to-allies "Wood further away than 35 tiles!")
   (chat-local-to-self "Camp distance 45.")
   (disable-self)
)

(defrule
   	(current-age == dark-age)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp == 0)
	(resource-found wood)
	(can-build lumber-camp)
	=>
	(build lumber-camp)
)

(defrule
   (building-type-count-total lumber-camp > 0)
   (strategic-number sn-camp-max-distance < 35)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

(defrule
   (current-age <= feudal-age)
   (building-type-count lumber-camp == 1)
   (dropsite-min-distance wood > 5)
   =>
   (chat-to-allies "Bad lumber camp.")
   (set-strategic-number sn-camp-max-distance 45)
   (chat-local-to-self "Camp distance 45.")
   (set-strategic-number sn-maximum-wood-drop-distance -1)
   (disable-self)
)

(defrule
   (building-type-count-total lumber-camp == 2)
   =>
   (set-strategic-number sn-maximum-wood-drop-distance 15)
   (disable-self)
)

(defrule
   (or(current-age >= feudal-age)
      (strategic-number sn-camp-max-distance == 45))
   (dropsite-min-distance wood > 5)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

;end of Lumbercamp placement

(defrule
	(building-type-count-total lumber-camp > 0) 
	(unit-type-count-total villager > 15)
	(building-type-count-total farm < 15)
	(idle-farm-count == 0)
	(can-build farm) 
	=>
	(build farm)
)

(defrule
   (resource-found gold)
   (building-type-count mining-camp < 4)
   (cc-players-unit-type-count 0 66 > 0)
   (dropsite-min-distance gold > 5)
   (dropsite-min-distance gold < 255)
   (can-build mining-camp)
   =>
   (build mining-camp)
)

(defrule
   (current-age >= feudal-age)
   (resource-found stone)
   (building-type-count mining-camp < 4)
   (dropsite-min-distance stone > 10)
   (can-build mining-camp)
   =>
   (build mining-camp)
)

(defrule
	(building-type-count-total lumber-camp > 0) 
	(unit-type-count-total villager > 15)
	(can-build barracks)
	(building-type-count-total barracks < 2)
	=>
	(build barracks)
)

(defrule
   (current-age >= feudal-age)
   (building-type-count-total barracks > 1)
   (building-type-count-total blacksmith < 1)
   (can-build blacksmith)
   =>
   (build blacksmith)
)

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (building-type-count-total market < 1)
   (can-build market)
   =>
   (build market)
)

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (building-type-count-total archery-range < 1)
   (can-build archery-range)
   =>
   (build archery-range)
)

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (building-type-count-total stable < 1)
   (can-build stable)
   =>
   (build stable)
)

(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (can-build watch-tower)
   =>
   (build watch-tower)
)

(defrule
   (current-age >= castle-age)
   (building-type-count-total barracks > 1)
   (building-type-count-total blacksmith > 0)
   (can-build castle)
   =>
   (build castle)
)

(defrule
   (current-age >= castle-age)
   (building-type-count-total barracks > 1)
   (building-type-count-total blacksmith > 0)
   (can-build university)
   =>
   (build university)
)


;*****************************************************************************
;				Research Rules
;*****************************************************************************
(defrule
   (can-research ri-wheel-barrow)
   =>
   (research ri-wheel-barrow)
   (chat-to-allies "Researching wheel barrow.")
)

(defrule
   (can-research ri-man-at-arms)
   =>
   (research ri-man-at-arms)
   (chat-to-allies "Researching man at arms.")
)

(defrule
   (can-research ri-long-swordsman)
   =>
   (research ri-long-swordsman)
   (chat-to-allies "Researching swordsman.")
)

(defrule
   (can-research ri-two-handed-swordsman)
   =>
   (research ri-two-handed-swordsman)
   (chat-to-allies "Researching twohanded.")
)

(defrule
   (can-research ri-champion)
   =>
   (research ri-champion)
   (chat-to-allies "Researching champion.")
)

(defrule
   (can-research ri-crossbow)
   =>
   (research ri-crossbow)
   (chat-to-allies "Researching crossbow.")
)

(defrule
   (can-research ri-arbalest)
   =>
   (research ri-arbalest)
   (chat-to-allies "Researching arbalest.")
)

(defrule
   (not(research-available ri-wheel-barrow))
   (not(research-available ri-man-at-arms))
   (can-research ri-double-bit-axe)
   =>
   (research ri-double-bit-axe)
   (chat-to-allies "Researching double bit axe.")
)

(defrule
   (not(research-available ri-double-bit-axe))
   (can-research ri-gold-mining)
   =>
   (research ri-gold-mining)
   (chat-to-allies "Researching gold mining.")
)

(defrule
   (not(research-available ri-gold-mining))
   (can-research ri-horse-collar)
   =>
   (research ri-horse-collar)
   (chat-to-allies "Researching horse collar.")
)

(defrule
   (not(research-available ri-man-at-arms))
   (can-research ri-scale-mail)
   =>
   (research ri-scale-mail)
   (chat-to-allies "Researching scale mail armor.")
)

(defrule
   (research-completed ri-scale-mail)
   (can-research ri-forging)
   =>
   (research ri-forging)
   (chat-to-allies "Researching forging.")
)

;The following rule will greatly aid in the TC being able
;to defend itself.

(defrule
   (town-under-attack)
   (can-research ri-fletching)
   =>
   (research ri-fletching)
   (chat-to-allies "Researching fletching.")
)

(defrule
   (current-age > dark-age)
   (can-research ri-stone-mining)
   =>
   (research ri-stone-mining)
   (chat-to-allies "Researching stone mining.")
)

(defrule
   (current-age > feudal-age)
   (can-research ri-murder-holes)
   =>
   (research ri-murder-holes)
   (chat-to-allies "Researching murder holes.")
)

(defrule
   (current-age > feudal-age)
   (can-research ri-ballistics)
   =>
   (research ri-ballistics)
   (chat-to-allies "Researching ballistics.")
)

(defrule
   (can-research ri-capped-ram)
   =>
   (research ri-capped-ram)
   (chat-to-allies "Researching capped ram.")
)

(defrule
   (can-research ri-siege-ram)
   =>
   (research ri-siege-ram)
   (chat-to-allies "Researching siege ram.")
)

;*****************************************************************************
;				Training Rules
;*****************************************************************************
(defrule
   (current-age == dark-age) 
   (unit-type-count-total villager < max-num-dark-villagers) 
   (can-train villager)
   =>
   (train villager)
)

(defrule                     
   (current-age == feudal-age) 
   (unit-type-count-total villager < 30)
   (can-train villager)
   =>
   (train villager)
)

(defrule                     
   (current-age > feudal-age) 
   (unit-type-count-total villager < 40)
   (can-train villager)
   =>
   (train villager)
)

(defrule
   (current-age == imperial-age)
   (unit-type-count-total villager > 20)
   (can-train militiaman-line)
   =>
   (train militiaman-line)
)

(defrule
   (current-age > dark-age)
   (unit-type-count-total villager > 20)
   (can-train militiaman-line)
   (strategic-number 215 < 0) 
   =>
   (train militiaman-line)
)

(defrule
   (current-age > dark-age)
   (unit-type-count-total villager > 20)
   (can-train archer-line)
   (strategic-number 215 < 0) 
   =>
   (train archer-line)
)

(defrule
   (current-age == imperial-age)
   (unit-type-count-total villager > 20)
   (can-train archer-line)
   =>
   (train archer-line)
)

(defrule
   (current-age == imperial-age)
   (unit-type-count-total battering-ram-line < 5)
   (strategic-number 215 > -1)
   (can-train battering-ram-line)
   =>
   (train battering-ram-line)
)

;*****************************************************************************
;				Military Superiority
;*****************************************************************************
(defrule  ;Initialize
   (true)
   =>
   (set-strategic-number 215 0)
)

(defrule
   (or(military-population > 195)
      (or(and(military-population > 190)
             (players-military-population every-enemy < 180))
          (or(and(military-population > 180)
                 (players-military-population every-enemy < 170))
             (and(military-population > 170)
                 (players-military-population every-enemy < 160)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 160)
          (players-military-population every-enemy < 150))
      (or(and(military-population > 150)
             (players-military-population every-enemy < 140))
          (or(and(military-population > 140)
                 (players-military-population every-enemy < 130))
             (and(military-population > 130)
                 (players-military-population every-enemy < 120)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 120)
          (players-military-population every-enemy < 110))
      (or(and(military-population > 110)
             (players-military-population every-enemy < 100))
          (or(and(military-population > 100)
                 (players-military-population every-enemy < 90))
             (and(military-population > 90)
                 (players-military-population every-enemy < 80)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 80)
          (players-military-population every-enemy < 70))
      (or(and(military-population > 70)
             (players-military-population every-enemy < 60))
          (or(and(military-population > 60)
                 (players-military-population every-enemy < 50))
             (and(military-population > 50)
                 (players-military-population every-enemy < 40)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(and(military-population > 40)
          (players-military-population every-enemy < 30))
      (or(and(military-population > 30)
             (players-military-population every-enemy < 20))
          (or(and(military-population > 20)
                 (players-military-population every-enemy < 10))
             (and(military-population > 10)
                 (players-military-population every-enemy == 0)))))
   =>
   (set-strategic-number 215 1)
)

(defrule
   (or(military-population > 200)
      (or(and(military-population > 190)
             (players-military-population every-enemy < 170))
          (or(and(military-population > 180)
                 (players-military-population every-enemy < 160))
             (and(military-population > 170)
                 (players-military-population every-enemy < 150)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 160)
          (players-military-population every-enemy < 140))
      (or(and(military-population > 150)
             (players-military-population every-enemy < 130))
          (or(and(military-population > 140)
                 (players-military-population every-enemy < 120))
             (and(military-population > 130)
                 (players-military-population every-enemy < 110)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 120)
          (players-military-population every-enemy < 100))
      (or(and(military-population > 110)
             (players-military-population every-enemy < 90))
          (or(and(military-population > 100)
                 (players-military-population every-enemy < 80))
             (and(military-population > 90)
                 (players-military-population every-enemy < 70)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 80)
          (players-military-population every-enemy < 60))
      (or(and(military-population > 70)
             (players-military-population every-enemy < 50))
          (or(and(military-population > 60)
                 (players-military-population every-enemy < 40))
             (and(military-population > 50)
                 (players-military-population every-enemy < 30)))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population > 40)
          (players-military-population every-enemy < 20))
      (or(and(military-population > 30)
             (players-military-population every-enemy < 10))
         (and(military-population > 20)
             (players-military-population every-enemy == 0))))
   =>
   (set-strategic-number 215 2)
)

(defrule
   (or(and(military-population == 0)
          (players-military-population any-enemy > 10))
      (or(and(military-population < 10)
             (players-military-population any-enemy > 20))
          (or(and(military-population < 20)
                 (players-military-population any-enemy > 30))
             (and(military-population < 30)
                 (players-military-population any-enemy > 40)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 40)
          (players-military-population any-enemy > 50))
      (or(and(military-population < 50)
             (players-military-population any-enemy > 60))
          (or(and(military-population < 60)
                 (players-military-population any-enemy > 70))
             (and(military-population < 70)
                 (players-military-population any-enemy > 80)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 80)
          (players-military-population any-enemy > 90))
      (or(and(military-population < 90)
             (players-military-population any-enemy > 100))
          (or(and(military-population < 100)
                 (players-military-population any-enemy > 110))
             (and(military-population < 110)
                 (players-military-population any-enemy > 120)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 120)
          (players-military-population any-enemy > 130))
      (or(and(military-population < 130)
             (players-military-population any-enemy > 140))
          (or(and(military-population < 140)
                 (players-military-population any-enemy > 150))
             (and(military-population < 150)
                 (players-military-population any-enemy > 160)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population < 160)
          (players-military-population any-enemy > 170))
      (or(and(military-population < 170)
             (players-military-population any-enemy > 180))
          (or(and(military-population < 180)
                 (players-military-population any-enemy > 190))
             (and(military-population < 190)
                 (players-military-population any-enemy > 200)))))
   =>
   (set-strategic-number 215 -1)
)

(defrule
   (or(and(military-population == 0)
          (players-military-population any-enemy > 20))
      (or(and(military-population < 10)
             (players-military-population any-enemy > 30))
          (or(and(military-population < 20)
                 (players-military-population any-enemy > 40))
             (and(military-population < 30)
                 (players-military-population any-enemy > 50)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 40)
          (players-military-population any-enemy > 60))
      (or(and(military-population < 50)
             (players-military-population any-enemy > 70))
          (or(and(military-population < 60)
                 (players-military-population any-enemy > 80))
             (and(military-population < 70)
                 (players-military-population any-enemy > 90)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 80)
          (players-military-population any-enemy > 100))
      (or(and(military-population < 90)
             (players-military-population any-enemy > 110))
          (or(and(military-population < 100)
                 (players-military-population any-enemy > 120))
             (and(military-population < 110)
                 (players-military-population any-enemy > 130)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 120)
          (players-military-population any-enemy > 140))
      (or(and(military-population < 130)
             (players-military-population any-enemy > 150))
          (or(and(military-population < 140)
                 (players-military-population any-enemy > 160))
             (and(military-population < 150)
                 (players-military-population any-enemy > 170)))))
   =>
   (set-strategic-number 215 -2)
)

(defrule
   (or(and(military-population < 160)
          (players-military-population any-enemy > 180))
      (or(and(military-population < 170)
             (players-military-population any-enemy > 190))
          (or(and(military-population < 180)
                 (players-military-population any-enemy > 200))
             (and(military-population < 190)
                 (players-military-population any-enemy > 210)))))
   =>
   (set-strategic-number 215 -2)
)



;*****************************************************************************
; Defend Rules
;*****************************************************************************
(defrule
   (town-under-attack)
   (strategic-number sn-enemy-sighted-response-distance == 2)
   =>
   (set-strategic-number sn-enemy-sighted-response-distance 144) 
   (set-strategic-number sn-target-evaluation-siege-weapon 100)
)

(defrule
   (not(town-under-attack))
   (strategic-number sn-enemy-sighted-response-distance == 144)
   =>
   (set-strategic-number sn-enemy-sighted-response-distance 2) 
   (set-strategic-number sn-target-evaluation-siege-weapon 0)
)



;*****************************************************************************
; Attack Rules
;*****************************************************************************
(defrule
	(not(town-under-attack))
	(strategic-number 215 >= 1)
	(strategic-number sn-number-attack-groups < 200)
	=>
	(set-strategic-number sn-number-attack-groups 200)
)

(defrule
	(strategic-number 215 <= 0)
	(strategic-number sn-number-attack-groups > 0)
	=>
	(set-strategic-number sn-number-attack-groups 0)
)



;*****************************************************************************
; Resign Rules
;*****************************************************************************
(defrule
	(unit-type-count-total villager < 3)
	(military-population < 2)
	(building-type-count castle == 0)
=>
	(chat-to-player my-player-number "I'm too weak to continue the fight. I resign")
	(resign)
)


